import gi as __gi
import gi.overrides.GObject as __gi_overrides_GObject
import gi.repository.GObject as __gi_repository_GObject
import gobject as __gobject
from _typeshed import Incomplete


API_VERSION: str
CHECK_DARK: float
CHECK_LIGHT: float
CHECK_SIZE: int
CHECK_SIZE_SM: int
CONFIG_PARAM_AGGREGATE: int
CONFIG_PARAM_CONFIRM: int
CONFIG_PARAM_DEFAULTS: int
CONFIG_PARAM_DONT_COMPARE: int
CONFIG_PARAM_FLAGS: int
CONFIG_PARAM_IGNORE: int
CONFIG_PARAM_RESTART: int
CONFIG_PARAM_SERIALIZE: int
MAJOR_VERSION: int
MAX_IMAGE_SIZE: int
MAX_MEMSIZE: int
MAX_RESOLUTION: float
MICRO_VERSION: int
MINOR_VERSION: int
MIN_IMAGE_SIZE: int
MIN_RESOLUTION: float
MODULE_ABI_VERSION: int
PARAM_NO_VALIDATE: int
PARAM_READABLE: int
PARAM_READWRITE: int
PARAM_STATIC_STRINGS: int
PARAM_WRITABLE: int
PARASITE_ATTACH_GRANDPARENT: int
PARASITE_ATTACH_PARENT: int
PARASITE_GRANDPARENT_PERSISTENT: int
PARASITE_GRANDPARENT_UNDOABLE: int
PARASITE_PARENT_PERSISTENT: int
PARASITE_PARENT_UNDOABLE: int
PARASITE_PERSISTENT: int
PARASITE_UNDOABLE: int
PIXPIPE_MAXDIM: int
RGB_LUMINANCE_BLUE: float
RGB_LUMINANCE_GREEN: float
RGB_LUMINANCE_RED: float
VERSION: str

def adaptive_supersample_area(x1: int, y1: int, x2: int, y2: int, max_depth: int, threshold: float, render_func: Gimp.RenderFunc, render_data, put_pixel_func: Gimp.PutPixelFunc, put_pixel_data, progress_func: Gimp.ProgressFunc, progress_data) -> int: ...
def airbrush(drawable: Gimp.Drawable, pressure: float, strokes: list) -> bool: ...
def airbrush_default(drawable: Gimp.Drawable, strokes: list) -> bool: ...
def attach_parasite(parasite: Gimp.Parasite) -> bool: ...
def bilinear(x: float, y: float, values: list) -> float: ...
def bilinear_16(x: float, y: float, values: list) -> int: ...
def bilinear_32(x: float, y: float, values: list) -> int: ...
def bilinear_8(x: float, y: float, values: list) -> int: ...
def bilinear_rgb(x: float, y: float, values: list) -> Gimp.RGB: ...
def bilinear_rgba(x: float, y: float, values: list) -> Gimp.RGB: ...
def brushes_close_popup(brush_callback: str) -> bool: ...
def brushes_get_list(filter: str) -> list: ...
def brushes_popup(brush_callback: str, popup_title: str, initial_brush: str, opacity: float, spacing: int, paint_mode: Gimp.LayerMode) -> bool: ...
def brushes_refresh() -> bool: ...
def brushes_set_popup(brush_callback: str, brush_name: str, opacity: float, spacing: int, paint_mode: Gimp.LayerMode) -> bool: ...
def brush_delete(name: str) -> bool: ...
def brush_duplicate(name: str) -> str: ...
def brush_get_angle(name: str) -> float: ...
def brush_get_aspect_ratio(name: str) -> float: ...
def brush_get_hardness(name: str) -> float: ...
def brush_get_info(name: str) -> tuple[bool, None, None, None, None]: ...
def brush_get_pixels(name: str) -> tuple[bool, None, None, None, None, None, None]: ...
def brush_get_radius(name: str) -> float: ...
def brush_get_shape(name: str) -> Gimp.BrushGeneratedShape: ...
def brush_get_spacing(name: str) -> tuple[bool, None]: ...
def brush_get_spikes(name: str) -> int: ...
def brush_is_editable(name: str) -> bool: ...
def brush_is_generated(name: str) -> bool: ...
def brush_new(name: str) -> str: ...
def brush_rename(name: str, new_name: str) -> str: ...
def brush_select_destroy(brush_callback: str): ...
def brush_select_new(title: str, brush_name: str, opacity: float, spacing: int, paint_mode: Gimp.LayerMode, callback: Gimp.RunBrushCallback) -> str: ...
def brush_set_angle(name: str, angle_in: float) -> float: ...
def brush_set_aspect_ratio(name: str, aspect_ratio_in: float) -> float: ...
def brush_set_hardness(name: str, hardness_in: float) -> float: ...
def brush_set_radius(name: str, radius_in: float) -> float: ...
def brush_set_shape(name: str, shape_in: Gimp.BrushGeneratedShape) -> Gimp.BrushGeneratedShape: ...
def brush_set_spacing(name: str, spacing: int) -> bool: ...
def brush_set_spikes(name: str, spikes_in: int) -> int: ...
def buffers_get_list(filter: str) -> list: ...
def buffer_delete(buffer_name: str) -> bool: ...
def buffer_get_bytes(buffer_name: str) -> int: ...
def buffer_get_height(buffer_name: str) -> int: ...
def buffer_get_image_type(buffer_name: str) -> Gimp.ImageBaseType: ...
def buffer_get_width(buffer_name: str) -> int: ...
def buffer_rename(buffer_name: str, new_name: str) -> str: ...
def cache_directory() -> str: ...
def cairo_checkerboard_create(cr: cairo.Context, size: int, light: Gimp.RGB, dark: Gimp.RGB) -> cairo.Pattern: ...
def cairo_set_source_rgb(cr: cairo.Context, color: Gimp.RGB): ...
def cairo_set_source_rgba(cr: cairo.Context, color: Gimp.RGB): ...
def cairo_surface_create_buffer(surface: cairo.Surface) -> Gegl.Buffer: ...
def cairo_surface_get_format(surface: cairo.Surface) -> Babl.Object: ...
def canonicalize_identifier(identifier: str) -> str: ...
def checks_get_colors(type: Gimp.CheckType, color1: Gimp.RGB, color2: Gimp.RGB) -> tuple[None, None]: ...
def check_custom_color1() -> Gimp.RGB: ...
def check_custom_color2() -> Gimp.RGB: ...
def check_size() -> Gimp.CheckSize: ...
def check_type() -> Gimp.CheckType: ...
def clone(drawable: Gimp.Drawable, src_drawable: Gimp.Drawable, clone_type: Gimp.CloneType, src_x: float, src_y: float, strokes: list) -> bool: ...
def clone_default(drawable: Gimp.Drawable, strokes: list) -> bool: ...
def cmyka_get_uchar(cmyka: Gimp.CMYK) -> tuple[None, None, None, None, None]: ...
def cmyka_set(cmyka: Gimp.CMYK, cyan: float, magenta: float, yellow: float, black: float, alpha: float): ...
def cmyka_set_uchar(cmyka: Gimp.CMYK, cyan: int, magenta: int, yellow: int, black: int, alpha: int): ...
def config_build_data_path(name: str) -> str: ...
def config_build_plug_in_path(name: str) -> str: ...
def config_build_system_path(name: str) -> str: ...
def config_build_writable_path(name: str) -> str: ...
def config_deserialize_return(scanner: GLib.Scanner, expected_token: GLib.TokenType, nest_level: int) -> bool: ...
def config_diff(a: GObject.Object, b: GObject.Object, flags: GObject.ParamFlags) -> list: ...
def config_error_quark() -> int: ...
def config_param_spec_duplicate(pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
def config_reset_properties(object: GObject.Object): ...
def config_reset_property(object: GObject.Object, property_name: str): ...
def config_serialize_value(value: GObject.Value, str: GLib.String, escaped: bool) -> bool: ...
def config_string_append_escaped(string: GLib.String, val: str): ...
def config_sync(src: GObject.Object, dest: GObject.Object, flags: GObject.ParamFlags) -> bool: ...
def config_type_register(parent_type: GType, type_name: str, pspecs: list) -> GType: ...
def context_are_dynamics_enabled() -> bool: ...
def context_enable_dynamics(enable: bool) -> bool: ...
def context_get_antialias() -> bool: ...
def context_get_background() -> tuple[bool, None]: ...
def context_get_brush() -> str: ...
def context_get_brush_angle() -> float: ...
def context_get_brush_aspect_ratio() -> float: ...
def context_get_brush_force() -> float: ...
def context_get_brush_hardness() -> float: ...
def context_get_brush_size() -> float: ...
def context_get_brush_spacing() -> float: ...
def context_get_diagonal_neighbors() -> bool: ...
def context_get_distance_metric() -> Gegl.DistanceMetric: ...
def context_get_dynamics() -> str: ...
def context_get_feather() -> bool: ...
def context_get_feather_radius() -> tuple[bool, None, None]: ...
def context_get_font() -> str: ...
def context_get_foreground() -> tuple[bool, None]: ...
def context_get_gradient() -> str: ...
def context_get_gradient_blend_color_space() -> Gimp.GradientBlendColorSpace: ...
def context_get_gradient_repeat_mode() -> Gimp.RepeatMode: ...
def context_get_gradient_reverse() -> bool: ...
def context_get_ink_angle() -> float: ...
def context_get_ink_blob_angle() -> float: ...
def context_get_ink_blob_aspect_ratio() -> float: ...
def context_get_ink_blob_type() -> Gimp.InkBlobType: ...
def context_get_ink_size() -> float: ...
def context_get_ink_size_sensitivity() -> float: ...
def context_get_ink_speed_sensitivity() -> float: ...
def context_get_ink_tilt_sensitivity() -> float: ...
def context_get_interpolation() -> Gimp.InterpolationType: ...
def context_get_line_cap_style() -> Gimp.CapStyle: ...
def context_get_line_dash_offset() -> float: ...
def context_get_line_dash_pattern() -> tuple[bool, None]: ...
def context_get_line_join_style() -> Gimp.JoinStyle: ...
def context_get_line_miter_limit() -> float: ...
def context_get_line_width() -> float: ...
def context_get_line_width_unit() -> Gimp.Unit: ...
def context_get_mypaint_brush() -> str: ...
def context_get_opacity() -> float: ...
def context_get_paint_method() -> str: ...
def context_get_paint_mode() -> Gimp.LayerMode: ...
def context_get_palette() -> str: ...
def context_get_pattern() -> str: ...
def context_get_sample_criterion() -> Gimp.SelectCriterion: ...
def context_get_sample_merged() -> bool: ...
def context_get_sample_threshold() -> float: ...
def context_get_sample_threshold_int() -> int: ...
def context_get_sample_transparent() -> bool: ...
def context_get_stroke_method() -> Gimp.StrokeMethod: ...
def context_get_transform_direction() -> Gimp.TransformDirection: ...
def context_get_transform_resize() -> Gimp.TransformResize: ...
def context_list_paint_methods() -> tuple[bool, None]: ...
def context_pop() -> bool: ...
def context_push() -> bool: ...
def context_set_antialias(antialias: bool) -> bool: ...
def context_set_background(background: Gimp.RGB) -> bool: ...
def context_set_brush(name: str) -> bool: ...
def context_set_brush_angle(angle: float) -> bool: ...
def context_set_brush_aspect_ratio(aspect: float) -> bool: ...
def context_set_brush_default_hardness() -> bool: ...
def context_set_brush_default_size() -> bool: ...
def context_set_brush_default_spacing() -> bool: ...
def context_set_brush_force(force: float) -> bool: ...
def context_set_brush_hardness(hardness: float) -> bool: ...
def context_set_brush_size(size: float) -> bool: ...
def context_set_brush_spacing(spacing: float) -> bool: ...
def context_set_defaults() -> bool: ...
def context_set_default_colors() -> bool: ...
def context_set_diagonal_neighbors(diagonal_neighbors: bool) -> bool: ...
def context_set_distance_metric(metric: Gegl.DistanceMetric) -> bool: ...
def context_set_dynamics(name: str) -> bool: ...
def context_set_feather(feather: bool) -> bool: ...
def context_set_feather_radius(feather_radius_x: float, feather_radius_y: float) -> bool: ...
def context_set_font(name: str) -> bool: ...
def context_set_foreground(foreground: Gimp.RGB) -> bool: ...
def context_set_gradient(name: str) -> bool: ...
def context_set_gradient_blend_color_space(blend_color_space: Gimp.GradientBlendColorSpace) -> bool: ...
def context_set_gradient_fg_bg_hsv_ccw() -> bool: ...
def context_set_gradient_fg_bg_hsv_cw() -> bool: ...
def context_set_gradient_fg_bg_rgb() -> bool: ...
def context_set_gradient_fg_transparent() -> bool: ...
def context_set_gradient_repeat_mode(repeat_mode: Gimp.RepeatMode) -> bool: ...
def context_set_gradient_reverse(reverse: bool) -> bool: ...
def context_set_ink_angle(angle: float) -> bool: ...
def context_set_ink_blob_angle(angle: float) -> bool: ...
def context_set_ink_blob_aspect_ratio(aspect: float) -> bool: ...
def context_set_ink_blob_type(type: Gimp.InkBlobType) -> bool: ...
def context_set_ink_size(size: float) -> bool: ...
def context_set_ink_size_sensitivity(size: float) -> bool: ...
def context_set_ink_speed_sensitivity(speed: float) -> bool: ...
def context_set_ink_tilt_sensitivity(tilt: float) -> bool: ...
def context_set_interpolation(interpolation: Gimp.InterpolationType) -> bool: ...
def context_set_line_cap_style(cap_style: Gimp.CapStyle) -> bool: ...
def context_set_line_dash_offset(dash_offset: float) -> bool: ...
def context_set_line_dash_pattern(dashes: list) -> bool: ...
def context_set_line_join_style(join_style: Gimp.JoinStyle) -> bool: ...
def context_set_line_miter_limit(miter_limit: float) -> bool: ...
def context_set_line_width(line_width: float) -> bool: ...
def context_set_line_width_unit(line_width_unit: Gimp.Unit) -> bool: ...
def context_set_mypaint_brush(name: str) -> bool: ...
def context_set_opacity(opacity: float) -> bool: ...
def context_set_paint_method(name: str) -> bool: ...
def context_set_paint_mode(paint_mode: Gimp.LayerMode) -> bool: ...
def context_set_palette(name: str) -> bool: ...
def context_set_pattern(name: str) -> bool: ...
def context_set_sample_criterion(sample_criterion: Gimp.SelectCriterion) -> bool: ...
def context_set_sample_merged(sample_merged: bool) -> bool: ...
def context_set_sample_threshold(sample_threshold: float) -> bool: ...
def context_set_sample_threshold_int(sample_threshold: int) -> bool: ...
def context_set_sample_transparent(sample_transparent: bool) -> bool: ...
def context_set_stroke_method(stroke_method: Gimp.StrokeMethod) -> bool: ...
def context_set_transform_direction(transform_direction: Gimp.TransformDirection) -> bool: ...
def context_set_transform_resize(transform_resize: Gimp.TransformResize) -> bool: ...
def context_swap_colors() -> bool: ...
def convolve(drawable: Gimp.Drawable, pressure: float, convolve_type: Gimp.ConvolveType, strokes: list) -> bool: ...
def convolve_default(drawable: Gimp.Drawable, strokes: list) -> bool: ...
def cpu_accel_get_support() -> Gimp.CpuAccelFlags: ...
def cpu_accel_set_use(use: bool): ...
def data_directory() -> str: ...
def debug_timer_end() -> float: ...
def debug_timer_start() -> bool: ...
def default_display() -> Gimp.Display: ...
def detach_parasite(name: str) -> bool: ...
def directory() -> str: ...
def displays_flush() -> bool: ...
def displays_reconnect(old_image: Gimp.Image, new_image: Gimp.Image) -> bool: ...
def dodgeburn(drawable: Gimp.Drawable, exposure: float, dodgeburn_type: Gimp.DodgeBurnType, dodgeburn_mode: Gimp.TransferMode, strokes: list) -> bool: ...
def dodgeburn_default(drawable: Gimp.Drawable, strokes: list) -> bool: ...
def dynamics_get_list(filter: str) -> list: ...
def dynamics_refresh() -> bool: ...
def edit_copy(drawables: list) -> bool: ...
def edit_copy_visible(image: Gimp.Image) -> bool: ...
def edit_cut(drawables: list) -> bool: ...
def edit_named_copy(drawables: list, buffer_name: str) -> str: ...
def edit_named_copy_visible(image: Gimp.Image, buffer_name: str) -> str: ...
def edit_named_cut(drawables: list, buffer_name: str) -> str: ...
def edit_named_paste(drawable: Gimp.Drawable, buffer_name: str, paste_into: bool) -> Gimp.Layer: ...
def edit_named_paste_as_new_image(buffer_name: str) -> Gimp.Image: ...
def edit_paste(drawable: Gimp.Drawable, paste_into: bool) -> tuple[list, None]: ...
def edit_paste_as_new_image() -> Gimp.Image: ...
def enums_get_type_names() -> tuple[list, None]: ...
def enums_init() -> None: ...
def enum_get_desc(enum_class: GObject.EnumClass, value: int) -> Union[Gimp.EnumDesc, None]: ...
def enum_get_value(enum_type: GType, value: int) -> tuple[bool, None, None, None, None]: ...
def enum_get_value_descriptions(enum_type: GType) -> Gimp.EnumDesc: ...
def enum_set_value_descriptions(enum_type: GType, descriptions: Gimp.EnumDesc): ...
def enum_value_get_abbrev(enum_class: GObject.EnumClass, enum_value: GObject.EnumValue) -> str: ...
def enum_value_get_desc(enum_class: GObject.EnumClass, enum_value: GObject.EnumValue) -> str: ...
def enum_value_get_help(enum_class: GObject.EnumClass, enum_value: GObject.EnumValue) -> str: ...
def env_init(plug_in: bool): ...
def eraser(drawable: Gimp.Drawable, strokes: list, hardness: Gimp.BrushApplicationMode, method: Gimp.PaintApplicationMode) -> bool: ...
def eraser_default(drawable: Gimp.Drawable, strokes: list) -> bool: ...
def escape_uline(str: str) -> str: ...
def export_color_profile() -> bool: ...
def export_comment() -> bool: ...
def export_exif() -> bool: ...
def export_iptc() -> bool: ...
def export_thumbnail() -> bool: ...
def export_xmp() -> bool: ...
def filename_to_utf8(filename: str) -> str: ...
def file_get_config_path(file: Gio.File) -> str: ...
def file_get_utf8_name(file: Gio.File) -> str: ...
def file_has_extension(file: Gio.File, extension: str) -> bool: ...
def file_load(run_mode: Gimp.RunMode, file: Gio.File) -> Gimp.Image: ...
def file_load_layer(run_mode: Gimp.RunMode, image: Gimp.Image, file: Gio.File) -> Gimp.Layer: ...
def file_load_layers(run_mode: Gimp.RunMode, image: Gimp.Image, file: Gio.File) -> tuple[list, None]: ...
def file_new_for_config_path(path: str) -> Union[Gio.File, None]: ...
def file_save(run_mode: Gimp.RunMode, image: Gimp.Image, drawables: list, file: Gio.File) -> bool: ...
def file_save_thumbnail(image: Gimp.Image, file: Gio.File) -> bool: ...
def file_show_in_file_manager(file: Gio.File) -> bool: ...
def flags_get_first_desc(flags_class: GObject.FlagsClass, value: int) -> Union[Gimp.FlagsDesc, None]: ...
def flags_get_first_value(flags_type: GType, value: int) -> tuple[bool, None, None, None, None]: ...
def flags_get_value_descriptions(flags_type: GType) -> Gimp.FlagsDesc: ...
def flags_set_value_descriptions(flags_type: GType, descriptions: Gimp.FlagsDesc): ...
def flags_value_get_abbrev(flags_class: GObject.FlagsClass, flags_value: GObject.FlagsValue) -> str: ...
def flags_value_get_desc(flags_class: GObject.FlagsClass, flags_value: GObject.FlagsValue) -> str: ...
def flags_value_get_help(flags_class: GObject.FlagsClass, flags_value: GObject.FlagsValue) -> str: ...
def floating_sel_anchor(floating_sel: Gimp.Layer) -> bool: ...
def floating_sel_attach(layer: Gimp.Layer, drawable: Gimp.Drawable) -> bool: ...
def floating_sel_remove(floating_sel: Gimp.Layer) -> bool: ...
def floating_sel_to_layer(floating_sel: Gimp.Layer) -> bool: ...
def fonts_close_popup(font_callback: str) -> bool: ...
def fonts_get_list(filter: str) -> list: ...
def fonts_popup(font_callback: str, popup_title: str, initial_font: str) -> bool: ...
def fonts_refresh() -> bool: ...
def fonts_set_popup(font_callback: str, font_name: str) -> bool: ...
def font_select_destroy(font_callback: str): ...
def font_select_new(title: str, font_name: str, callback: Gimp.RunFontCallback, data) -> str: ...
def getpid() -> int: ...
def get_color_configuration() -> Gimp.ColorConfig: ...
def get_default_comment() -> str: ...
def get_default_unit() -> Gimp.Unit: ...
def get_module_load_inhibit() -> str: ...
def get_monitor_resolution() -> tuple[bool, None, None]: ...
def get_num_processors() -> int: ...
def get_parasite(name: str) -> Gimp.Parasite: ...
def get_parasite_list() -> list: ...
def get_pdb() -> Union[Gimp.PDB, None]: ...
def get_plug_in() -> Union[Gimp.PlugIn, None]: ...
def get_progname() -> str: ...
def gimprc_query(token: str) -> str: ...
def gimprc_set(token: str, value: str) -> bool: ...
def gradients_close_popup(gradient_callback: str) -> bool: ...
def gradients_get_list(filter: str) -> list: ...
def gradients_popup(gradient_callback: str, popup_title: str, initial_gradient: str, sample_size: int) -> bool: ...
def gradients_refresh() -> bool: ...
def gradients_set_popup(gradient_callback: str, gradient_name: str) -> bool: ...
def gradient_delete(name: str) -> bool: ...
def gradient_duplicate(name: str) -> str: ...
def gradient_get_custom_samples(name: str, positions: list, reverse: bool) -> tuple[bool, None]: ...
def gradient_get_number_of_segments(name: str) -> int: ...
def gradient_get_uniform_samples(name: str, num_samples: int, reverse: bool) -> tuple[bool, None]: ...
def gradient_is_editable(name: str) -> bool: ...
def gradient_new(name: str) -> str: ...
def gradient_rename(name: str, new_name: str) -> str: ...
def gradient_segment_get_blending_function(name: str, segment: int) -> tuple[bool, None]: ...
def gradient_segment_get_coloring_type(name: str, segment: int) -> tuple[bool, None]: ...
def gradient_segment_get_left_color(name: str, segment: int) -> tuple[bool, None, None]: ...
def gradient_segment_get_left_pos(name: str, segment: int) -> tuple[bool, None]: ...
def gradient_segment_get_middle_pos(name: str, segment: int) -> tuple[bool, None]: ...
def gradient_segment_get_right_color(name: str, segment: int) -> tuple[bool, None, None]: ...
def gradient_segment_get_right_pos(name: str, segment: int) -> tuple[bool, None]: ...
def gradient_segment_range_blend_colors(name: str, start_segment: int, end_segment: int) -> bool: ...
def gradient_segment_range_blend_opacity(name: str, start_segment: int, end_segment: int) -> bool: ...
def gradient_segment_range_delete(name: str, start_segment: int, end_segment: int) -> bool: ...
def gradient_segment_range_flip(name: str, start_segment: int, end_segment: int) -> bool: ...
def gradient_segment_range_move(name: str, start_segment: int, end_segment: int, delta: float, control_compress: bool) -> float: ...
def gradient_segment_range_redistribute_handles(name: str, start_segment: int, end_segment: int) -> bool: ...
def gradient_segment_range_replicate(name: str, start_segment: int, end_segment: int, replicate_times: int) -> bool: ...
def gradient_segment_range_set_blending_function(name: str, start_segment: int, end_segment: int, blending_function: Gimp.GradientSegmentType) -> bool: ...
def gradient_segment_range_set_coloring_type(name: str, start_segment: int, end_segment: int, coloring_type: Gimp.GradientSegmentColor) -> bool: ...
def gradient_segment_range_split_midpoint(name: str, start_segment: int, end_segment: int) -> bool: ...
def gradient_segment_range_split_uniform(name: str, start_segment: int, end_segment: int, split_parts: int) -> bool: ...
def gradient_segment_set_left_color(name: str, segment: int, color: Gimp.RGB, opacity: float) -> bool: ...
def gradient_segment_set_left_pos(name: str, segment: int, pos: float) -> tuple[bool, None]: ...
def gradient_segment_set_middle_pos(name: str, segment: int, pos: float) -> tuple[bool, None]: ...
def gradient_segment_set_right_color(name: str, segment: int, color: Gimp.RGB, opacity: float) -> bool: ...
def gradient_segment_set_right_pos(name: str, segment: int, pos: float) -> tuple[bool, None]: ...
def gradient_select_destroy(gradient_callback: str): ...
def gradient_select_new(title: str, gradient_name: str, sample_size: int, callback: Gimp.RunGradientCallback, data) -> str: ...
def heal(drawable: Gimp.Drawable, src_drawable: Gimp.Drawable, src_x: float, src_y: float, strokes: list) -> bool: ...
def heal_default(drawable: Gimp.Drawable, strokes: list) -> bool: ...
def help(help_domain: str, help_id: str) -> bool: ...
def hsva_set(hsva: Gimp.HSV, hue: float, saturation: float, value: float, alpha: float): ...
def icon_theme_dir() -> str: ...
def installation_directory() -> str: ...
def is_canonical_identifier(identifier: str) -> bool: ...
def list_images() -> list: ...
def locale_directory() -> str: ...
def main(plug_in_type: GType, argv: list) -> int: ...
def message(message: str) -> bool: ...
def message_get_handler() -> Gimp.MessageHandlerType: ...
def message_set_handler(handler: Gimp.MessageHandlerType) -> bool: ...
def monitor_number() -> int: ...
def paintbrush(drawable: Gimp.Drawable, fade_out: float, strokes: list, method: Gimp.PaintApplicationMode, gradient_length: float) -> bool: ...
def paintbrush_default(drawable: Gimp.Drawable, strokes: list) -> bool: ...
def palettes_close_popup(palette_callback: str) -> bool: ...
def palettes_get_list(filter: str) -> list: ...
def palettes_popup(palette_callback: str, popup_title: str, initial_palette: str) -> bool: ...
def palettes_refresh() -> bool: ...
def palettes_set_popup(palette_callback: str, palette_name: str) -> bool: ...
def palette_add_entry(name: str, entry_name: str, color: Gimp.RGB) -> tuple[bool, None]: ...
def palette_delete(name: str) -> bool: ...
def palette_delete_entry(name: str, entry_num: int) -> bool: ...
def palette_duplicate(name: str) -> str: ...
def palette_entry_get_color(name: str, entry_num: int) -> tuple[bool, None]: ...
def palette_entry_get_name(name: str, entry_num: int) -> tuple[bool, None]: ...
def palette_entry_set_color(name: str, entry_num: int, color: Gimp.RGB) -> bool: ...
def palette_entry_set_name(name: str, entry_num: int, entry_name: str) -> bool: ...
def palette_get_colors(name: str) -> tuple[list, None]: ...
def palette_get_columns(name: str) -> int: ...
def palette_get_info(name: str) -> tuple[bool, None]: ...
def palette_is_editable(name: str) -> bool: ...
def palette_new(name: str) -> str: ...
def palette_rename(name: str, new_name: str) -> str: ...
def palette_select_destroy(palette_callback: str): ...
def palette_select_new(title: str, palette_name: str, callback: Gimp.RunPaletteCallback, data) -> str: ...
def palette_set_columns(name: str, columns: int) -> bool: ...
def param_spec_array(name: str, nick: str, blurb: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_channel(name: str, nick: str, blurb: str, none_ok: bool, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_config_path(name: str, nick: str, blurb: str, type: Gimp.ConfigPathType, default_value: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_config_path_type(pspec: GObject.ParamSpec) -> Gimp.ConfigPathType: ...
def param_spec_display(name: str, nick: str, blurb: str, none_ok: bool, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_drawable(name: str, nick: str, blurb: str, none_ok: bool, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_float_array(name: str, nick: str, blurb: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_image(name: str, nick: str, blurb: str, none_ok: bool, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_int32_array(name: str, nick: str, blurb: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_item(name: str, nick: str, blurb: str, none_ok: bool, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_layer(name: str, nick: str, blurb: str, none_ok: bool, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_layer_mask(name: str, nick: str, blurb: str, none_ok: bool, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_matrix2(name: str, nick: str, blurb: str, default_value: Gimp.Matrix2, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_matrix3(name: str, nick: str, blurb: str, default_value: Gimp.Matrix3, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_memsize(name: str, nick: str, blurb: str, minimum: int, maximum: int, default_value: int, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_object_array(name: str, nick: str, blurb: str, object_type: GType, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_parasite(name: str, nick: str, blurb: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_rgb(name: str, nick: str, blurb: str, has_alpha: bool, default_value: Gimp.RGB, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_rgb_array(name: str, nick: str, blurb: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_rgb_get_default(pspec: GObject.ParamSpec, default_value: Gimp.RGB): ...
def param_spec_rgb_has_alpha(pspec: GObject.ParamSpec) -> bool: ...
def param_spec_selection(name: str, nick: str, blurb: str, none_ok: bool, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_uint8_array(name: str, nick: str, blurb: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_unit(name: str, nick: str, blurb: str, allow_pixels: bool, allow_percent: bool, default_value: Gimp.Unit, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_value_array(name: str, nick: str, blurb: str, element_spec: GObject.ParamSpec, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_vectors(name: str, nick: str, blurb: str, none_ok: bool, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def path_free(path: list): ...
def path_get_user_writable_dir(path: list) -> str: ...
def path_parse(path: str, max_paths: int, check: bool) -> tuple[list, None]: ...
def path_to_str(path: list) -> str: ...
def patterns_close_popup(pattern_callback: str) -> bool: ...
def patterns_get_list(filter: str) -> list: ...
def patterns_popup(pattern_callback: str, popup_title: str, initial_pattern: str) -> bool: ...
def patterns_refresh() -> bool: ...
def patterns_set_popup(pattern_callback: str, pattern_name: str) -> bool: ...
def pattern_get_info(name: str) -> tuple[bool, None, None, None]: ...
def pattern_get_pixels(name: str) -> tuple[bool, None, None, None, None]: ...
def pattern_select_destroy(pattern_callback: str): ...
def pattern_select_new(title: str, pattern_name: str, callback: Gimp.RunPatternCallback, data) -> str: ...
def pencil(drawable: Gimp.Drawable, strokes: list) -> bool: ...
def pixbuf_create_buffer(pixbuf: GdkPixbuf.Pixbuf) -> Gegl.Buffer: ...
def pixbuf_get_format(pixbuf: GdkPixbuf.Pixbuf) -> Babl.Object: ...
def pixbuf_get_icc_profile(pixbuf: GdkPixbuf.Pixbuf) -> Union[list, tuple[None, None]]: ...
def pixels_to_units(pixels: float, unit: Gimp.Unit, resolution: float) -> float: ...
def pixpipe_params_build(params: Gimp.PixPipeParams) -> str: ...
def pixpipe_params_free(params: Gimp.PixPipeParams): ...
def pixpipe_params_init(params: Gimp.PixPipeParams): ...
def pixpipe_params_parse(parameters: str, params: Gimp.PixPipeParams): ...
def progress_cancel(progress_callback: str) -> bool: ...
def progress_end() -> bool: ...
def progress_get_window_handle() -> int: ...
def progress_init(message: str) -> bool: ...
def progress_install_vtable(vtable: Gimp.ProgressVtable, user_data, user_data_destroy: GLib.DestroyNotify) -> str: ...
def progress_pulse() -> bool: ...
def progress_set_text(message: str) -> bool: ...
def progress_uninstall(progress_callback: str): ...
def progress_update(percentage: float) -> bool: ...
def quit() -> None: ...
def range_estimate_settings(lower: float, upper: float) -> tuple[None, None, None]: ...
def rectangle_intersect(x1: int, y1: int, width1: int, height1: int, x2: int, y2: int, width2: int, height2: int) -> tuple[bool, None, None, None, None]: ...
def rectangle_union(x1: int, y1: int, width1: int, height1: int, x2: int, y2: int, width2: int, height2: int) -> tuple[None, None, None, None]: ...
def rgba_add(rgba1: Gimp.RGB, rgba2: Gimp.RGB): ...
def rgba_distance(rgba1: Gimp.RGB, rgba2: Gimp.RGB) -> float: ...
def rgba_get_pixel(rgba: Gimp.RGB, format: Babl.Object) -> pixel: ...
def rgba_get_uchar(rgba: Gimp.RGB) -> tuple[None, None, None, None]: ...
def rgba_multiply(rgba: Gimp.RGB, factor: float): ...
def rgba_parse_css(rgba: Gimp.RGB, css: list) -> bool: ...
def rgba_set(rgba: Gimp.RGB, red: float, green: float, blue: float, alpha: float): ...
def rgba_set_pixel(rgba: Gimp.RGB, format: Babl.Object, pixel: Incomplete | None = ...): ...
def rgba_set_uchar(rgba: Gimp.RGB, red: int, green: int, blue: int, alpha: int): ...
def rgba_subtract(rgba1: Gimp.RGB, rgba2: Gimp.RGB): ...
def rgb_list_names() -> tuple[None, None]: ...
def show_help_button() -> bool: ...
def smudge(drawable: Gimp.Drawable, pressure: float, strokes: list) -> bool: ...
def smudge_default(drawable: Gimp.Drawable, strokes: list) -> bool: ...
def stack_trace_available(optimal: bool) -> bool: ...
def stack_trace_print(prog_name: str, stream) -> tuple[bool, None]: ...
def stack_trace_query(prog_name: str): ...
def strip_uline(str: str) -> str: ...
def sysconf_directory() -> str: ...
def temp_directory() -> str: ...
def temp_file(extension: str) -> Gio.File: ...
def text_fontname(image: Gimp.Image, drawable: Gimp.Drawable, x: float, y: float, text: str, border: int, antialias: bool, size: float, size_type: Gimp.SizeType, fontname: str) -> Union[Gimp.Layer, None]: ...
def text_get_extents_fontname(text: str, size: float, size_type: Gimp.SizeType, fontname: str) -> tuple[bool, None, None, None, None]: ...
def text_layer_get_antialias(layer: Gimp.Layer) -> bool: ...
def text_layer_get_base_direction(layer: Gimp.Layer) -> Gimp.TextDirection: ...
def text_layer_get_color(layer: Gimp.Layer) -> tuple[bool, None]: ...
def text_layer_get_font(layer: Gimp.Layer) -> str: ...
def text_layer_get_font_size(layer: Gimp.Layer) -> tuple[float, None]: ...
def text_layer_get_hint_style(layer: Gimp.Layer) -> Gimp.TextHintStyle: ...
def text_layer_get_indent(layer: Gimp.Layer) -> float: ...
def text_layer_get_justification(layer: Gimp.Layer) -> Gimp.TextJustification: ...
def text_layer_get_kerning(layer: Gimp.Layer) -> bool: ...
def text_layer_get_language(layer: Gimp.Layer) -> str: ...
def text_layer_get_letter_spacing(layer: Gimp.Layer) -> float: ...
def text_layer_get_line_spacing(layer: Gimp.Layer) -> float: ...
def text_layer_get_markup(layer: Gimp.Layer) -> str: ...
def text_layer_get_text(layer: Gimp.Layer) -> str: ...
def text_layer_new(image: Gimp.Image, text: str, fontname: str, size: float, unit: Gimp.Unit) -> Gimp.Layer: ...
def text_layer_resize(layer: Gimp.Layer, width: float, height: float) -> bool: ...
def text_layer_set_antialias(layer: Gimp.Layer, antialias: bool) -> bool: ...
def text_layer_set_base_direction(layer: Gimp.Layer, direction: Gimp.TextDirection) -> bool: ...
def text_layer_set_color(layer: Gimp.Layer, color: Gimp.RGB) -> bool: ...
def text_layer_set_font(layer: Gimp.Layer, font: str) -> bool: ...
def text_layer_set_font_size(layer: Gimp.Layer, font_size: float, unit: Gimp.Unit) -> bool: ...
def text_layer_set_hint_style(layer: Gimp.Layer, style: Gimp.TextHintStyle) -> bool: ...
def text_layer_set_indent(layer: Gimp.Layer, indent: float) -> bool: ...
def text_layer_set_justification(layer: Gimp.Layer, justify: Gimp.TextJustification) -> bool: ...
def text_layer_set_kerning(layer: Gimp.Layer, kerning: bool) -> bool: ...
def text_layer_set_language(layer: Gimp.Layer, language: str) -> bool: ...
def text_layer_set_letter_spacing(layer: Gimp.Layer, letter_spacing: float) -> bool: ...
def text_layer_set_line_spacing(layer: Gimp.Layer, line_spacing: float) -> bool: ...
def text_layer_set_text(layer: Gimp.Layer, text: str) -> bool: ...
def tile_height() -> int: ...
def tile_width() -> int: ...
def type_get_translation_context(type: GType) -> str: ...
def type_get_translation_domain(type: GType) -> str: ...
def type_set_translation_context(type: GType, context: str): ...
def type_set_translation_domain(type: GType, domain: str): ...
def units_to_pixels(value: float, unit: Gimp.Unit, resolution: float) -> float: ...
def units_to_points(value: float, unit: Gimp.Unit, resolution: float) -> float: ...
def user_time() -> int: ...
def utf8_strtrim(str: str, max_chars: int) -> str: ...
def value_dup_float_array(value: GObject.Value) -> list: ...
def value_dup_int32_array(value: GObject.Value) -> list: ...
def value_dup_object_array(value: GObject.Value) -> GObject.Object: ...
def value_dup_rgb_array(value: GObject.Value) -> list: ...
def value_dup_uint8_array(value: GObject.Value) -> list: ...
def value_get_float_array(value: GObject.Value) -> list: ...
def value_get_int32_array(value: GObject.Value) -> list: ...
def value_get_object_array(value: GObject.Value) -> GObject.Object: ...
def value_get_rgb(value: GObject.Value, rgb: Gimp.RGB): ...
def value_get_rgb_array(value: GObject.Value) -> list: ...
def value_get_uint8_array(value: GObject.Value) -> list: ...
def value_set_float_array(value: GObject.Value, data: list): ...
def value_set_int32_array(value: GObject.Value, data: list): ...
def value_set_object_array(value: GObject.Value, object_type: GType, data: list): ...
def value_set_rgb(value: GObject.Value, rgb: Gimp.RGB): ...
def value_set_rgb_array(value: GObject.Value, data: list): ...
def value_set_static_float_array(value: GObject.Value, data: list): ...
def value_set_static_int32_array(value: GObject.Value, data: list): ...
def value_set_static_object_array(value: GObject.Value, object_type: GType, data: list): ...
def value_set_static_rgb_array(value: GObject.Value, data: list): ...
def value_set_static_uint8_array(value: GObject.Value, data: list): ...
def value_set_uint8_array(value: GObject.Value, data: list): ...
def value_take_float_array(value: GObject.Value, data: list): ...
def value_take_int32_array(value: GObject.Value, data: list): ...
def value_take_object_array(value: GObject.Value, object_type: GType, data: list): ...
def value_take_rgb_array(value: GObject.Value, data: list): ...
def value_take_uint8_array(value: GObject.Value, data: list): ...
def vector2_add(vector1: Gimp.Vector2, vector2: Gimp.Vector2) -> Gimp.Vector2: ...
def vector2_sub(vector1: Gimp.Vector2, vector2: Gimp.Vector2) -> Gimp.Vector2: ...
def vector3_add(vector1: Gimp.Vector3, vector2: Gimp.Vector3) -> Gimp.Vector3: ...
def vector3_sub(vector1: Gimp.Vector3, vector2: Gimp.Vector3) -> Gimp.Vector3: ...
def vector_2d_to_3d(sx: int, sy: int, w: int, h: int, x: int, y: int, vp: Gimp.Vector3, p: Gimp.Vector3): ...
def vector_2d_to_3d_val(sx: int, sy: int, w: int, h: int, x: int, y: int, vp: Gimp.Vector3, p: Gimp.Vector3) -> Gimp.Vector3: ...
def vector_3d_to_2d(sx: int, sy: int, w: int, h: int, x: float, y: float, vp: Gimp.Vector3, p: Gimp.Vector3): ...
def version() -> str: ...
def wm_class() -> str: ...

class AddMaskType(__gobject.GEnum):
    GIMP_ADD_MASK_WHITE: int
    GIMP_ADD_MASK_BLACK: int
    GIMP_ADD_MASK_ALPHA: int
    GIMP_ADD_MASK_ALPHA_TRANSFER: int
    GIMP_ADD_MASK_SELECTION: int
    GIMP_ADD_MASK_COPY: int
    GIMP_ADD_MASK_CHANNEL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ALPHA: int
    ALPHA_TRANSFER: int
    BLACK: int
    CHANNEL: int
    COPY: int
    SELECTION: int
    WHITE: int

class ArgumentSync(__gobject.GEnum):
    GIMP_ARGUMENT_SYNC_NONE: int
    GIMP_ARGUMENT_SYNC_PARASITE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    NONE: int
    PARASITE: int

class Array(__gi.Boxed):
    def copy(self) -> Gimp.Array: ...
    def free(self) -> None: ...
    @staticmethod
    def new(data: list, static_data: bool) -> Gimp.Array: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    data: Incomplete
    length: Incomplete
    static_data: Incomplete

class Procedure(__gi_overrides_GObject.Object):
    def add_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_aux_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_aux_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_menu_path(self, menu_path: str): ...
    def add_return_value(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_return_value_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def create_config(self) -> Gimp.ProcedureConfig: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_install(self) -> None: ...
    def do_run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def do_set_sensitivity(self, sensitivity_mask: int) -> bool: ...
    def do_uninstall(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def extension_ready(self) -> None: ...
    def find_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_aux_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_return_value(self, name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_arguments(self) -> tuple[list, None]: ...
    def get_argument_sync(self, arg_name: str) -> Gimp.ArgumentSync: ...
    def get_authors(self) -> str: ...
    def get_aux_arguments(self) -> tuple[list, None]: ...
    def get_blurb(self) -> str: ...
    def get_copyright(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_date(self) -> str: ...
    def get_help(self) -> str: ...
    def get_help_id(self) -> str: ...
    def get_icon_file(self) -> Union[Gio.File, None]: ...
    def get_icon_name(self) -> Union[str, None]: ...
    def get_icon_pixbuf(self) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_type(self) -> Gimp.IconType: ...
    def get_image_types(self) -> str: ...
    def get_menu_label(self) -> str: ...
    def get_menu_paths(self) -> list: ...
    def get_name(self) -> str: ...
    def get_plug_in(self) -> Gimp.PlugIn: ...
    def get_proc_type(self) -> Gimp.PDBProcType: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_return_values(self) -> tuple[list, None]: ...
    def get_sensitivity_mask(self) -> int: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(plug_in: Gimp.PlugIn, name: str, proc_type: Gimp.PDBProcType, run_func: Gimp.RunFunc, run_data) -> Gimp.Procedure: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def new_arguments(self) -> Gimp.ValueArray: ...
    def new_return_values(self, status: Gimp.PDBStatusType, error: error) -> Gimp.ValueArray: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def run_dispose(self) -> None: ...
    def set_argument_sync(self, arg_name: str, sync: Gimp.ArgumentSync): ...
    def set_attribution(self, authors: str, copyright: str, date: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_documentation(self, blurb: str, help: str, help_id: str): ...
    def set_icon_file(self, file: Gio.File = ...): ...
    def set_icon_name(self, icon_name: str = ...): ...
    def set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf = ...): ...
    def set_image_types(self, image_types: str): ...
    def set_menu_label(self, menu_label: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_sensitivity_mask(self, sensitivity_mask: int): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class BatchProcedure(Procedure):
    def add_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_aux_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_aux_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_menu_path(self, menu_path: str): ...
    def add_return_value(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_return_value_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def create_config(self) -> Gimp.ProcedureConfig: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_install(self) -> None: ...
    def do_run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def do_set_sensitivity(self, sensitivity_mask: int) -> bool: ...
    def do_uninstall(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def extension_ready(self) -> None: ...
    def find_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_aux_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_return_value(self, name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_arguments(self) -> tuple[list, None]: ...
    def get_argument_sync(self, arg_name: str) -> Gimp.ArgumentSync: ...
    def get_authors(self) -> str: ...
    def get_aux_arguments(self) -> tuple[list, None]: ...
    def get_blurb(self) -> str: ...
    def get_copyright(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_date(self) -> str: ...
    def get_help(self) -> str: ...
    def get_help_id(self) -> str: ...
    def get_icon_file(self) -> Union[Gio.File, None]: ...
    def get_icon_name(self) -> Union[str, None]: ...
    def get_icon_pixbuf(self) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_type(self) -> Gimp.IconType: ...
    def get_image_types(self) -> str: ...
    def get_interpreter_name(self) -> str: ...
    def get_menu_label(self) -> str: ...
    def get_menu_paths(self) -> list: ...
    def get_name(self) -> str: ...
    def get_plug_in(self) -> Gimp.PlugIn: ...
    def get_proc_type(self) -> Gimp.PDBProcType: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_return_values(self) -> tuple[list, None]: ...
    def get_sensitivity_mask(self) -> int: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(plug_in: Gimp.PlugIn, name: str, interpreter_name: str, proc_type: Gimp.PDBProcType, run_func: Gimp.BatchFunc, run_data) -> Gimp.Procedure: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def new_arguments(self) -> Gimp.ValueArray: ...
    def new_return_values(self, status: Gimp.PDBStatusType, error: error) -> Gimp.ValueArray: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def run_dispose(self) -> None: ...
    def set_argument_sync(self, arg_name: str, sync: Gimp.ArgumentSync): ...
    def set_attribution(self, authors: str, copyright: str, date: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_documentation(self, blurb: str, help: str, help_id: str): ...
    def set_icon_file(self, file: Gio.File = ...): ...
    def set_icon_name(self, icon_name: str = ...): ...
    def set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf = ...): ...
    def set_image_types(self, image_types: str): ...
    def set_interpreter_name(self, interpreter_name: str): ...
    def set_menu_label(self, menu_label: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_sensitivity_mask(self, sensitivity_mask: int): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class BatchProcedureClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class BatchProcedurePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class BrushApplicationMode(__gobject.GEnum):
    GIMP_BRUSH_HARD: int
    GIMP_BRUSH_SOFT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    HARD: int
    SOFT: int

class BrushGeneratedShape(__gobject.GEnum):
    GIMP_BRUSH_GENERATED_CIRCLE: int
    GIMP_BRUSH_GENERATED_SQUARE: int
    GIMP_BRUSH_GENERATED_DIAMOND: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CIRCLE: int
    DIAMOND: int
    SQUARE: int

class CapStyle(__gobject.GEnum):
    GIMP_CAP_BUTT: int
    GIMP_CAP_ROUND: int
    GIMP_CAP_SQUARE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BUTT: int
    ROUND: int
    SQUARE: int

class Item(__gi_overrides_GObject.Object):
    def attach_parasite(self, parasite: Gimp.Parasite) -> bool: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def delete(self) -> bool: ...
    def detach_parasite(self, name: str) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    @staticmethod
    def get_by_id(item_id: int) -> Union[Gimp.Item, None]: ...
    def get_color_tag(self) -> Gimp.ColorTag: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_expanded(self) -> bool: ...
    def get_id(self) -> int: ...
    def get_image(self) -> Gimp.Image: ...
    def get_lock_content(self) -> bool: ...
    def get_lock_position(self) -> bool: ...
    def get_lock_visibility(self) -> bool: ...
    def get_name(self) -> str: ...
    def get_parasite(self, name: str) -> Gimp.Parasite: ...
    def get_parasite_list(self) -> list: ...
    def get_parent(self) -> Gimp.Item: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_tattoo(self) -> int: ...
    def get_visible(self) -> bool: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    @staticmethod
    def id_is_channel(item_id: int) -> bool: ...
    @staticmethod
    def id_is_drawable(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer_mask(item_id: int) -> bool: ...
    @staticmethod
    def id_is_selection(item_id: int) -> bool: ...
    @staticmethod
    def id_is_text_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_valid(item_id: int) -> bool: ...
    @staticmethod
    def id_is_vectors(item_id: int) -> bool: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_channel(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_group(self) -> bool: ...
    def is_layer(self) -> bool: ...
    def is_layer_mask(self) -> bool: ...
    def is_selection(self) -> bool: ...
    def is_text_layer(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def is_vectors(self) -> bool: ...
    def list_children(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_color_tag(self, color_tag: Gimp.ColorTag) -> bool: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_expanded(self, expanded: bool) -> bool: ...
    def set_lock_content(self, lock_content: bool) -> bool: ...
    def set_lock_position(self, lock_position: bool) -> bool: ...
    def set_lock_visibility(self, lock_visibility: bool) -> bool: ...
    def set_name(self, name: str) -> bool: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_tattoo(self, tattoo: int) -> bool: ...
    def set_visible(self, visible: bool) -> bool: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def transform_2d(self, source_x: float, source_y: float, scale_x: float, scale_y: float, angle: float, dest_x: float, dest_y: float) -> Gimp.Item: ...
    def transform_flip(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_flip_simple(self, flip_type: Gimp.OrientationType, auto_center: bool, axis: float) -> Gimp.Item: ...
    def transform_matrix(self, coeff_0_0: float, coeff_0_1: float, coeff_0_2: float, coeff_1_0: float, coeff_1_1: float, coeff_1_2: float, coeff_2_0: float, coeff_2_1: float, coeff_2_2: float) -> Gimp.Item: ...
    def transform_perspective(self, x0: float, y0: float, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float) -> Gimp.Item: ...
    def transform_rotate(self, angle: float, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_rotate_simple(self, rotate_type: Gimp.RotationType, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_scale(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_shear(self, shear_type: Gimp.OrientationType, magnitude: float) -> Gimp.Item: ...
    def transform_translate(self, off_x: float, off_y: float) -> Gimp.Item: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class Drawable(Item):
    def attach_parasite(self, parasite: Gimp.Parasite) -> bool: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def brightness_contrast(self, brightness: float, contrast: float) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def colorize_hsl(self, hue: float, saturation: float, lightness: float) -> bool: ...
    def color_balance(self, transfer_mode: Gimp.TransferMode, preserve_lum: bool, cyan_red: float, magenta_green: float, yellow_blue: float) -> bool: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def curves_explicit(self, channel: Gimp.HistogramChannel, values: list) -> bool: ...
    def curves_spline(self, channel: Gimp.HistogramChannel, points: list) -> bool: ...
    def delete(self) -> bool: ...
    def desaturate(self, desaturate_mode: Gimp.DesaturateMode) -> bool: ...
    def detach_parasite(self, name: str) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def edit_bucket_fill(self, fill_type: Gimp.FillType, x: float, y: float) -> bool: ...
    def edit_clear(self) -> bool: ...
    def edit_fill(self, fill_type: Gimp.FillType) -> bool: ...
    def edit_gradient_fill(self, gradient_type: Gimp.GradientType, offset: float, supersample: bool, supersample_max_depth: int, supersample_threshold: float, dither: bool, x1: float, y1: float, x2: float, y2: float) -> bool: ...
    def edit_stroke_item(self, item: Gimp.Item) -> bool: ...
    def edit_stroke_selection(self) -> bool: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def equalize(self, mask_only: bool) -> bool: ...
    def fill(self, fill_type: Gimp.FillType) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreground_extract(self, mode: Gimp.ForegroundExtractMode, mask: Gimp.Drawable) -> bool: ...
    def freeze_notify(self) -> None: ...
    def free_shadow(self) -> bool: ...
    def getv(self, names: list, values: list): ...
    def get_bpp(self) -> int: ...
    def get_buffer(self) -> Gegl.Buffer: ...
    @staticmethod
    def get_by_id(drawable_id: int) -> Union[Gimp.Drawable, None]: ...
    def get_color_tag(self) -> Gimp.ColorTag: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_expanded(self) -> bool: ...
    def get_format(self) -> Babl.Object: ...
    def get_height(self) -> int: ...
    def get_id(self) -> int: ...
    def get_image(self) -> Gimp.Image: ...
    def get_lock_content(self) -> bool: ...
    def get_lock_position(self) -> bool: ...
    def get_lock_visibility(self) -> bool: ...
    def get_name(self) -> str: ...
    def get_offsets(self) -> tuple[bool, None, None]: ...
    def get_parasite(self, name: str) -> Gimp.Parasite: ...
    def get_parasite_list(self) -> list: ...
    def get_parent(self) -> Gimp.Item: ...
    def get_pixel(self, x_coord: int, y_coord: int) -> tuple[list, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_shadow_buffer(self) -> Gegl.Buffer: ...
    def get_sub_thumbnail(self, src_x: int, src_y: int, src_width: int, src_height: int, dest_width: int, dest_height: int, alpha: Gimp.PixbufTransparency) -> GdkPixbuf.Pixbuf: ...
    def get_sub_thumbnail_data(self, src_x: int, src_y: int, src_width: int, src_height: int, dest_width: int, dest_height: int) -> Union[list, tuple[None, None, None, None]]: ...
    def get_tattoo(self) -> int: ...
    def get_thumbnail(self, width: int, height: int, alpha: Gimp.PixbufTransparency) -> GdkPixbuf.Pixbuf: ...
    def get_thumbnail_data(self, width: int, height: int) -> Union[list, tuple[None, None, None, None]]: ...
    def get_thumbnail_format(self) -> Babl.Object: ...
    def get_visible(self) -> bool: ...
    def get_width(self) -> int: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_alpha(self) -> bool: ...
    def histogram(self, channel: Gimp.HistogramChannel, start_range: float, end_range: float) -> tuple[bool, None, None, None, None, None, None]: ...
    def hue_saturation(self, hue_range: Gimp.HueRange, hue_offset: float, lightness: float, saturation: float, overlap: float) -> bool: ...
    @staticmethod
    def id_is_channel(item_id: int) -> bool: ...
    @staticmethod
    def id_is_drawable(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer_mask(item_id: int) -> bool: ...
    @staticmethod
    def id_is_selection(item_id: int) -> bool: ...
    @staticmethod
    def id_is_text_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_valid(item_id: int) -> bool: ...
    @staticmethod
    def id_is_vectors(item_id: int) -> bool: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def invert(self, linear: bool) -> bool: ...
    def is_channel(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_gray(self) -> bool: ...
    def is_group(self) -> bool: ...
    def is_indexed(self) -> bool: ...
    def is_layer(self) -> bool: ...
    def is_layer_mask(self) -> bool: ...
    def is_rgb(self) -> bool: ...
    def is_selection(self) -> bool: ...
    def is_text_layer(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def is_vectors(self) -> bool: ...
    def levels(self, channel: Gimp.HistogramChannel, low_input: float, high_input: float, clamp_input: bool, gamma: float, low_output: float, high_output: float, clamp_output: bool) -> bool: ...
    def levels_stretch(self) -> bool: ...
    def list_children(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def mask_bounds(self) -> tuple[bool, None, None, None, None]: ...
    def mask_intersect(self) -> tuple[bool, None, None, None, None]: ...
    def merge_shadow(self, undo: bool) -> bool: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def offset(self, wrap_around: bool, fill_type: Gimp.OffsetType, offset_x: int, offset_y: int) -> bool: ...
    def override_property(self, property_id: int, name: str): ...
    def posterize(self, levels: int) -> bool: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_color_tag(self, color_tag: Gimp.ColorTag) -> bool: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_expanded(self, expanded: bool) -> bool: ...
    def set_lock_content(self, lock_content: bool) -> bool: ...
    def set_lock_position(self, lock_position: bool) -> bool: ...
    def set_lock_visibility(self, lock_visibility: bool) -> bool: ...
    def set_name(self, name: str) -> bool: ...
    def set_pixel(self, x_coord: int, y_coord: int, pixel: list) -> bool: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_tattoo(self, tattoo: int) -> bool: ...
    def set_visible(self, visible: bool) -> bool: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def threshold(self, channel: Gimp.HistogramChannel, low_threshold: float, high_threshold: float) -> bool: ...
    def transform_2d(self, source_x: float, source_y: float, scale_x: float, scale_y: float, angle: float, dest_x: float, dest_y: float) -> Gimp.Item: ...
    def transform_flip(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_flip_simple(self, flip_type: Gimp.OrientationType, auto_center: bool, axis: float) -> Gimp.Item: ...
    def transform_matrix(self, coeff_0_0: float, coeff_0_1: float, coeff_0_2: float, coeff_1_0: float, coeff_1_1: float, coeff_1_2: float, coeff_2_0: float, coeff_2_1: float, coeff_2_2: float) -> Gimp.Item: ...
    def transform_perspective(self, x0: float, y0: float, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float) -> Gimp.Item: ...
    def transform_rotate(self, angle: float, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_rotate_simple(self, rotate_type: Gimp.RotationType, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_scale(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_shear(self, shear_type: Gimp.OrientationType, magnitude: float) -> Gimp.Item: ...
    def transform_translate(self, off_x: float, off_y: float) -> Gimp.Item: ...
    def type(self) -> Gimp.ImageType: ...
    def type_with_alpha(self) -> Gimp.ImageType: ...
    def unref(self, *args, **kargs) -> None: ...
    def update(self, x: int, y: int, width: int, height: int) -> bool: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class Channel(Drawable):
    def attach_parasite(self, parasite: Gimp.Parasite) -> bool: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def brightness_contrast(self, brightness: float, contrast: float) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def colorize_hsl(self, hue: float, saturation: float, lightness: float) -> bool: ...
    def color_balance(self, transfer_mode: Gimp.TransferMode, preserve_lum: bool, cyan_red: float, magenta_green: float, yellow_blue: float) -> bool: ...
    def combine_masks(self, channel2: Gimp.Channel, operation: Gimp.ChannelOps, offx: int, offy: int) -> bool: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def copy(self) -> Gimp.Channel: ...
    def curves_explicit(self, channel: Gimp.HistogramChannel, values: list) -> bool: ...
    def curves_spline(self, channel: Gimp.HistogramChannel, points: list) -> bool: ...
    def delete(self) -> bool: ...
    def desaturate(self, desaturate_mode: Gimp.DesaturateMode) -> bool: ...
    def detach_parasite(self, name: str) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def edit_bucket_fill(self, fill_type: Gimp.FillType, x: float, y: float) -> bool: ...
    def edit_clear(self) -> bool: ...
    def edit_fill(self, fill_type: Gimp.FillType) -> bool: ...
    def edit_gradient_fill(self, gradient_type: Gimp.GradientType, offset: float, supersample: bool, supersample_max_depth: int, supersample_threshold: float, dither: bool, x1: float, y1: float, x2: float, y2: float) -> bool: ...
    def edit_stroke_item(self, item: Gimp.Item) -> bool: ...
    def edit_stroke_selection(self) -> bool: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def equalize(self, mask_only: bool) -> bool: ...
    def fill(self, fill_type: Gimp.FillType) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreground_extract(self, mode: Gimp.ForegroundExtractMode, mask: Gimp.Drawable) -> bool: ...
    def freeze_notify(self) -> None: ...
    def free_shadow(self) -> bool: ...
    def getv(self, names: list, values: list): ...
    def get_bpp(self) -> int: ...
    def get_buffer(self) -> Gegl.Buffer: ...
    @staticmethod
    def get_by_id(channel_id: int) -> Union[Gimp.Channel, None]: ...
    def get_color(self) -> tuple[bool, None]: ...
    def get_color_tag(self) -> Gimp.ColorTag: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_expanded(self) -> bool: ...
    def get_format(self) -> Babl.Object: ...
    def get_height(self) -> int: ...
    def get_id(self) -> int: ...
    def get_image(self) -> Gimp.Image: ...
    def get_lock_content(self) -> bool: ...
    def get_lock_position(self) -> bool: ...
    def get_lock_visibility(self) -> bool: ...
    def get_name(self) -> str: ...
    def get_offsets(self) -> tuple[bool, None, None]: ...
    def get_opacity(self) -> float: ...
    def get_parasite(self, name: str) -> Gimp.Parasite: ...
    def get_parasite_list(self) -> list: ...
    def get_parent(self) -> Gimp.Item: ...
    def get_pixel(self, x_coord: int, y_coord: int) -> tuple[list, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_shadow_buffer(self) -> Gegl.Buffer: ...
    def get_show_masked(self) -> bool: ...
    def get_sub_thumbnail(self, src_x: int, src_y: int, src_width: int, src_height: int, dest_width: int, dest_height: int, alpha: Gimp.PixbufTransparency) -> GdkPixbuf.Pixbuf: ...
    def get_sub_thumbnail_data(self, src_x: int, src_y: int, src_width: int, src_height: int, dest_width: int, dest_height: int) -> Union[list, tuple[None, None, None, None]]: ...
    def get_tattoo(self) -> int: ...
    def get_thumbnail(self, width: int, height: int, alpha: Gimp.PixbufTransparency) -> GdkPixbuf.Pixbuf: ...
    def get_thumbnail_data(self, width: int, height: int) -> Union[list, tuple[None, None, None, None]]: ...
    def get_thumbnail_format(self) -> Babl.Object: ...
    def get_visible(self) -> bool: ...
    def get_width(self) -> int: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_alpha(self) -> bool: ...
    def histogram(self, channel: Gimp.HistogramChannel, start_range: float, end_range: float) -> tuple[bool, None, None, None, None, None, None]: ...
    def hue_saturation(self, hue_range: Gimp.HueRange, hue_offset: float, lightness: float, saturation: float, overlap: float) -> bool: ...
    @staticmethod
    def id_is_channel(item_id: int) -> bool: ...
    @staticmethod
    def id_is_drawable(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer_mask(item_id: int) -> bool: ...
    @staticmethod
    def id_is_selection(item_id: int) -> bool: ...
    @staticmethod
    def id_is_text_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_valid(item_id: int) -> bool: ...
    @staticmethod
    def id_is_vectors(item_id: int) -> bool: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def invert(self, linear: bool) -> bool: ...
    def is_channel(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_gray(self) -> bool: ...
    def is_group(self) -> bool: ...
    def is_indexed(self) -> bool: ...
    def is_layer(self) -> bool: ...
    def is_layer_mask(self) -> bool: ...
    def is_rgb(self) -> bool: ...
    def is_selection(self) -> bool: ...
    def is_text_layer(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def is_vectors(self) -> bool: ...
    def levels(self, channel: Gimp.HistogramChannel, low_input: float, high_input: float, clamp_input: bool, gamma: float, low_output: float, high_output: float, clamp_output: bool) -> bool: ...
    def levels_stretch(self) -> bool: ...
    def list_children(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def mask_bounds(self) -> tuple[bool, None, None, None, None]: ...
    def mask_intersect(self) -> tuple[bool, None, None, None, None]: ...
    def merge_shadow(self, undo: bool) -> bool: ...
    @staticmethod
    def new(image: Gimp.Image, name: str, width: int, height: int, opacity: float, color: Gimp.RGB) -> Gimp.Channel: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_component(image: Gimp.Image, component: Gimp.ChannelType, name: str) -> Gimp.Channel: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def offset(self, wrap_around: bool, fill_type: Gimp.OffsetType, offset_x: int, offset_y: int) -> bool: ...
    def override_property(self, property_id: int, name: str): ...
    def posterize(self, levels: int) -> bool: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_color(self, color: Gimp.RGB) -> bool: ...
    def set_color_tag(self, color_tag: Gimp.ColorTag) -> bool: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_expanded(self, expanded: bool) -> bool: ...
    def set_lock_content(self, lock_content: bool) -> bool: ...
    def set_lock_position(self, lock_position: bool) -> bool: ...
    def set_lock_visibility(self, lock_visibility: bool) -> bool: ...
    def set_name(self, name: str) -> bool: ...
    def set_opacity(self, opacity: float) -> bool: ...
    def set_pixel(self, x_coord: int, y_coord: int, pixel: list) -> bool: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_show_masked(self, show_masked: bool) -> bool: ...
    def set_tattoo(self, tattoo: int) -> bool: ...
    def set_visible(self, visible: bool) -> bool: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def threshold(self, channel: Gimp.HistogramChannel, low_threshold: float, high_threshold: float) -> bool: ...
    def transform_2d(self, source_x: float, source_y: float, scale_x: float, scale_y: float, angle: float, dest_x: float, dest_y: float) -> Gimp.Item: ...
    def transform_flip(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_flip_simple(self, flip_type: Gimp.OrientationType, auto_center: bool, axis: float) -> Gimp.Item: ...
    def transform_matrix(self, coeff_0_0: float, coeff_0_1: float, coeff_0_2: float, coeff_1_0: float, coeff_1_1: float, coeff_1_2: float, coeff_2_0: float, coeff_2_1: float, coeff_2_2: float) -> Gimp.Item: ...
    def transform_perspective(self, x0: float, y0: float, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float) -> Gimp.Item: ...
    def transform_rotate(self, angle: float, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_rotate_simple(self, rotate_type: Gimp.RotationType, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_scale(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_shear(self, shear_type: Gimp.OrientationType, magnitude: float) -> Gimp.Item: ...
    def transform_translate(self, off_x: float, off_y: float) -> Gimp.Item: ...
    def type(self) -> Gimp.ImageType: ...
    def type_with_alpha(self) -> Gimp.ImageType: ...
    def unref(self, *args, **kargs) -> None: ...
    def update(self, x: int, y: int, width: int, height: int) -> bool: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ChannelClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ChannelOps(__gobject.GEnum):
    GIMP_CHANNEL_OP_ADD: int
    GIMP_CHANNEL_OP_SUBTRACT: int
    GIMP_CHANNEL_OP_REPLACE: int
    GIMP_CHANNEL_OP_INTERSECT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ADD: int
    INTERSECT: int
    REPLACE: int
    SUBTRACT: int

class ChannelType(__gobject.GEnum):
    GIMP_CHANNEL_RED: int
    GIMP_CHANNEL_GREEN: int
    GIMP_CHANNEL_BLUE: int
    GIMP_CHANNEL_GRAY: int
    GIMP_CHANNEL_INDEXED: int
    GIMP_CHANNEL_ALPHA: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ALPHA: int
    BLUE: int
    GRAY: int
    GREEN: int
    INDEXED: int
    RED: int

class CheckSize(__gobject.GEnum):
    GIMP_CHECK_SIZE_SMALL_CHECKS: int
    GIMP_CHECK_SIZE_MEDIUM_CHECKS: int
    GIMP_CHECK_SIZE_LARGE_CHECKS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    LARGE_CHECKS: int
    MEDIUM_CHECKS: int
    SMALL_CHECKS: int

class CheckType(__gobject.GEnum):
    GIMP_CHECK_TYPE_LIGHT_CHECKS: int
    GIMP_CHECK_TYPE_GRAY_CHECKS: int
    GIMP_CHECK_TYPE_DARK_CHECKS: int
    GIMP_CHECK_TYPE_WHITE_ONLY: int
    GIMP_CHECK_TYPE_GRAY_ONLY: int
    GIMP_CHECK_TYPE_BLACK_ONLY: int
    GIMP_CHECK_TYPE_CUSTOM_CHECKS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BLACK_ONLY: int
    CUSTOM_CHECKS: int
    DARK_CHECKS: int
    GRAY_CHECKS: int
    GRAY_ONLY: int
    LIGHT_CHECKS: int
    WHITE_ONLY: int

class CloneType(__gobject.GEnum):
    GIMP_CLONE_IMAGE: int
    GIMP_CLONE_PATTERN: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    IMAGE: int
    PATTERN: int

class CMYK(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def get_uchar(self) -> tuple[None, None, None, None]: ...
    def set(self, cyan: float, magenta: float, yellow: float, black: float): ...
    def set_uchar(self, cyan: int, magenta: int, yellow: int, black: int): ...
    def to_rgb(self) -> Gimp.RGB: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    a: Incomplete
    c: Incomplete
    k: Incomplete
    m: Incomplete
    y: Incomplete

class ConfigInterface(__gobject.GInterface):
    @staticmethod
    def build_data_path(name: str) -> str: ...
    @staticmethod
    def build_plug_in_path(name: str) -> str: ...
    @staticmethod
    def build_system_path(name: str) -> str: ...
    @staticmethod
    def build_writable_path(name: str) -> str: ...
    @staticmethod
    def deserialize_return(scanner: GLib.Scanner, expected_token: GLib.TokenType, nest_level: int) -> bool: ...
    @staticmethod
    def diff(a: GObject.Object, b: GObject.Object, flags: GObject.ParamFlags) -> list: ...
    @staticmethod
    def error_quark() -> int: ...
    @staticmethod
    def param_spec_duplicate(pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    @staticmethod
    def reset_properties(object: GObject.Object): ...
    @staticmethod
    def reset_property(object: GObject.Object, property_name: str): ...
    @staticmethod
    def serialize_value(value: GObject.Value, str: GLib.String, escaped: bool) -> bool: ...
    @staticmethod
    def string_append_escaped(string: GLib.String, val: str): ...
    @staticmethod
    def sync(src: GObject.Object, dest: GObject.Object, flags: GObject.ParamFlags) -> bool: ...
    @staticmethod
    def type_register(parent_type: GType, type_name: str, pspecs: list) -> GType: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    __gsignals__: Incomplete

class ColorConfig(__gi_overrides_GObject.Object, ConfigInterface):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    @staticmethod
    def build_data_path(name: str) -> str: ...
    @staticmethod
    def build_plug_in_path(name: str) -> str: ...
    @staticmethod
    def build_system_path(name: str) -> str: ...
    @staticmethod
    def build_writable_path(name: str) -> str: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    @staticmethod
    def deserialize_return(scanner: GLib.Scanner, expected_token: GLib.TokenType, nest_level: int) -> bool: ...
    @staticmethod
    def diff(a: GObject.Object, b: GObject.Object, flags: GObject.ParamFlags) -> list: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    @staticmethod
    def error_quark() -> int: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_cmyk_color_profile(self) -> Gimp.ColorProfile: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_display_bpc(self) -> bool: ...
    def get_display_color_profile(self) -> Gimp.ColorProfile: ...
    def get_display_intent(self) -> Gimp.ColorRenderingIntent: ...
    def get_display_optimize(self) -> bool: ...
    def get_display_profile_from_gdk(self) -> bool: ...
    def get_gray_color_profile(self) -> Gimp.ColorProfile: ...
    def get_mode(self) -> Gimp.ColorManagementMode: ...
    def get_out_of_gamut_color(self, color: Gimp.RGB): ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_rgb_color_profile(self) -> Gimp.ColorProfile: ...
    def get_simulation_bpc(self) -> bool: ...
    def get_simulation_color_profile(self) -> Gimp.ColorProfile: ...
    def get_simulation_gamut_check(self) -> bool: ...
    def get_simulation_intent(self) -> Gimp.ColorRenderingIntent: ...
    def get_simulation_optimize(self) -> bool: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    @staticmethod
    def param_spec_duplicate(pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    @staticmethod
    def reset_properties(object: GObject.Object): ...
    @staticmethod
    def reset_property(object: GObject.Object, property_name: str): ...
    def run_dispose(self) -> None: ...
    @staticmethod
    def serialize_value(value: GObject.Value, str: GLib.String, escaped: bool) -> bool: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    @staticmethod
    def string_append_escaped(string: GLib.String, val: str): ...
    @staticmethod
    def sync(src: GObject.Object, dest: GObject.Object, flags: GObject.ParamFlags) -> bool: ...
    def thaw_notify(self) -> None: ...
    @staticmethod
    def type_register(parent_type: GType, type_name: str, pspecs: list) -> GType: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorConfigClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ColorConfigPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorManaged(__gobject.GInterface):
    def get_color_profile(self) -> Gimp.ColorProfile: ...
    def get_icc_profile(self) -> tuple[list, None]: ...
    def get_simulation_bpc(self) -> bool: ...
    def get_simulation_intent(self) -> Gimp.ColorRenderingIntent: ...
    def get_simulation_profile(self) -> Gimp.ColorProfile: ...
    def profile_changed(self) -> None: ...
    def simulation_bpc_changed(self) -> None: ...
    def simulation_intent_changed(self) -> None: ...
    def simulation_profile_changed(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    __gsignals__: Incomplete

class ColorManagedInterface(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    base_iface: Incomplete
    get_color_profile: Incomplete
    get_icc_profile: Incomplete
    get_simulation_bpc: Incomplete
    get_simulation_intent: Incomplete
    get_simulation_profile: Incomplete
    profile_changed: Incomplete
    simulation_bpc_changed: Incomplete
    simulation_intent_changed: Incomplete
    simulation_profile_changed: Incomplete

class ColorManagementMode(__gobject.GEnum):
    GIMP_COLOR_MANAGEMENT_OFF: int
    GIMP_COLOR_MANAGEMENT_DISPLAY: int
    GIMP_COLOR_MANAGEMENT_SOFTPROOF: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    DISPLAY: int
    OFF: int
    SOFTPROOF: int

class ColorProfile(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_copyright(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_description(self) -> str: ...
    def get_format(self, format: Babl.Object, intent: Gimp.ColorRenderingIntent) -> Babl.Object: ...
    def get_icc_profile(self) -> tuple[list, None]: ...
    def get_label(self) -> str: ...
    @staticmethod
    def get_lcms_format(format: Babl.Object, lcms_format: int) -> Union[Babl.Object, None]: ...
    def get_lcms_profile(self) -> None: ...
    def get_manufacturer(self) -> str: ...
    def get_model(self) -> str: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_space(self, intent: Gimp.ColorRenderingIntent) -> Babl.Object: ...
    def get_summary(self) -> str: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_cmyk(self) -> bool: ...
    def is_equal(self, profile2: Gimp.ColorProfile) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_gray(self) -> bool: ...
    def is_linear(self) -> bool: ...
    def is_rgb(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_d50_gray_lab_trc() -> Gimp.ColorProfile: ...
    @staticmethod
    def new_d65_gray_linear() -> Gimp.ColorProfile: ...
    @staticmethod
    def new_d65_gray_srgb_trc() -> Gimp.ColorProfile: ...
    @staticmethod
    def new_from_file(file: Gio.File) -> Union[Gimp.ColorProfile, None]: ...
    @staticmethod
    def new_from_icc_profile(data: list) -> Union[Gimp.ColorProfile, None]: ...
    @staticmethod
    def new_from_lcms_profile(lcms_profile: Incomplete | None = ...) -> Union[Gimp.ColorProfile, None]: ...
    def new_linear_from_color_profile(self) -> Union[Gimp.ColorProfile, None]: ...
    @staticmethod
    def new_rgb_adobe() -> Gimp.ColorProfile: ...
    @staticmethod
    def new_rgb_srgb() -> Gimp.ColorProfile: ...
    @staticmethod
    def new_rgb_srgb_linear() -> Gimp.ColorProfile: ...
    def new_srgb_trc_from_color_profile(self) -> Union[Gimp.ColorProfile, None]: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def save_to_file(self, file: Gio.File) -> bool: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorProfileClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ColorProfilePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorRenderingIntent(__gobject.GEnum):
    GIMP_COLOR_RENDERING_INTENT_PERCEPTUAL: int
    GIMP_COLOR_RENDERING_INTENT_RELATIVE_COLORIMETRIC: int
    GIMP_COLOR_RENDERING_INTENT_SATURATION: int
    GIMP_COLOR_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ABSOLUTE_COLORIMETRIC: int
    PERCEPTUAL: int
    RELATIVE_COLORIMETRIC: int
    SATURATION: int

class ColorTag(__gobject.GEnum):
    GIMP_COLOR_TAG_NONE: int
    GIMP_COLOR_TAG_BLUE: int
    GIMP_COLOR_TAG_GREEN: int
    GIMP_COLOR_TAG_YELLOW: int
    GIMP_COLOR_TAG_ORANGE: int
    GIMP_COLOR_TAG_BROWN: int
    GIMP_COLOR_TAG_RED: int
    GIMP_COLOR_TAG_VIOLET: int
    GIMP_COLOR_TAG_GRAY: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BLUE: int
    BROWN: int
    GRAY: int
    GREEN: int
    NONE: int
    ORANGE: int
    RED: int
    VIOLET: int
    YELLOW: int

class ColorTransform(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    @staticmethod
    def can_gegl_copy(src_profile: Gimp.ColorProfile, dest_profile: Gimp.ColorProfile) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_progress(self, fraction: float): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(src_profile: Gimp.ColorProfile, src_format: Babl.Object, dest_profile: Gimp.ColorProfile, dest_format: Babl.Object, rendering_intent: Gimp.ColorRenderingIntent, flags: Gimp.ColorTransformFlags) -> Union[Gimp.ColorTransform, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_proofing(src_profile: Gimp.ColorProfile, src_format: Babl.Object, dest_profile: Gimp.ColorProfile, dest_format: Babl.Object, proof_profile: Gimp.ColorProfile, proof_intent: Gimp.ColorRenderingIntent, display_intent: Gimp.ColorRenderingIntent, flags: Gimp.ColorTransformFlags) -> Union[Gimp.ColorTransform, None]: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def process_buffer(self, src_buffer: Gegl.Buffer, src_rect: Gegl.Rectangle, dest_buffer: Gegl.Buffer, dest_rect: Gegl.Rectangle): ...
    def process_pixels(self, src_format: Babl.Object, src_pixels, dest_format: Babl.Object, dest_pixels, length: int): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorTransformClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    progress: Incomplete

class ColorTransformFlags(__gobject.GEnum):
    GIMP_COLOR_TRANSFORM_FLAGS_NOOPTIMIZE: int
    GIMP_COLOR_TRANSFORM_FLAGS_GAMUT_CHECK: int
    GIMP_COLOR_TRANSFORM_FLAGS_BLACK_POINT_COMPENSATION: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BLACK_POINT_COMPENSATION: int
    GAMUT_CHECK: int
    NOOPTIMIZE: int

class ColorTransformPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ComponentType(__gobject.GEnum):
    GIMP_COMPONENT_TYPE_U8: int
    GIMP_COMPONENT_TYPE_U16: int
    GIMP_COMPONENT_TYPE_U32: int
    GIMP_COMPONENT_TYPE_HALF: int
    GIMP_COMPONENT_TYPE_FLOAT: int
    GIMP_COMPONENT_TYPE_DOUBLE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    DOUBLE: int
    FLOAT: int
    HALF: int
    U16: int
    U32: int
    U8: int

class Config(__gi.Struct):
    def copy(self, dest: Gimp.Config, flags: GObject.ParamFlags) -> bool: ...
    def deserialize(self, scanner: GLib.Scanner, nest_level: int, data) -> bool: ...
    def deserialize_file(self, file: Gio.File, data) -> bool: ...
    def deserialize_parasite(self, parasite: Gimp.Parasite, data) -> bool: ...
    def deserialize_properties(self, scanner: GLib.Scanner, nest_level: int) -> bool: ...
    def deserialize_property(self, scanner: GLib.Scanner, nest_level: int) -> GLib.TokenType: ...
    def deserialize_stream(self, input: Gio.InputStream, data) -> bool: ...
    def deserialize_string(self, text: list, data) -> bool: ...
    def duplicate(self) -> None: ...
    def is_equal_to(self, b: Gimp.Config) -> bool: ...
    def reset(self) -> None: ...
    def serialize(self, writer: Gimp.ConfigWriter, data) -> bool: ...
    def serialize_changed_properties(self, writer: Gimp.ConfigWriter) -> bool: ...
    def serialize_properties(self, writer: Gimp.ConfigWriter) -> bool: ...
    def serialize_property(self, param_spec: GObject.ParamSpec, writer: Gimp.ConfigWriter) -> bool: ...
    def serialize_property_by_name(self, prop_name: str, writer: Gimp.ConfigWriter) -> bool: ...
    def serialize_to_fd(self, fd: int, data) -> bool: ...
    def serialize_to_file(self, file: Gio.File, header: str, footer: str, data) -> bool: ...
    def serialize_to_parasite(self, parasite_name: str, parasite_flags: int, data) -> Gimp.Parasite: ...
    def serialize_to_stream(self, output: Gio.OutputStream, header: str, footer: str, data) -> bool: ...
    def serialize_to_string(self, data) -> str: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ConfigError(__gobject.GEnum):
    GIMP_CONFIG_ERROR_OPEN: int
    GIMP_CONFIG_ERROR_OPEN_ENOENT: int
    GIMP_CONFIG_ERROR_WRITE: int
    GIMP_CONFIG_ERROR_PARSE: int
    GIMP_CONFIG_ERROR_VERSION: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    OPEN: int
    OPEN_ENOENT: int
    PARSE: int
    VERSION: int
    WRITE: int

class ConfigPath:
    @staticmethod
    def expand(path: str, recode: bool) -> str: ...
    @staticmethod
    def expand_to_files(path: str) -> list: ...
    @staticmethod
    def unexpand(path: str, recode: bool) -> str: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    __gsignals__: Incomplete

class ConfigPathType(__gobject.GEnum):
    GIMP_CONFIG_PATH_FILE: int
    GIMP_CONFIG_PATH_FILE_LIST: int
    GIMP_CONFIG_PATH_DIR: int
    GIMP_CONFIG_PATH_DIR_LIST: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    DIR: int
    DIR_LIST: int
    FILE: int
    FILE_LIST: int

class ConfigWriter(__gi.Boxed):
    def close(self) -> None: ...
    def comment(self, comment: str): ...
    def comment_mode(self, enable: bool): ...
    def copy(self, *args, **kwargs) -> None: ...
    def data(self, length: int, data: int): ...
    def finish(self, footer: str) -> bool: ...
    def identifier(self, identifier: str): ...
    def linefeed(self) -> None: ...
    @staticmethod
    def new_from_fd(fd: int) -> Union[Gimp.ConfigWriter, None]: ...
    @staticmethod
    def new_from_file(file: Gio.File, atomic: bool, header: str) -> Union[Gimp.ConfigWriter, None]: ...
    @staticmethod
    def new_from_stream(output: Gio.OutputStream, header: str) -> Union[Gimp.ConfigWriter, None]: ...
    @staticmethod
    def new_from_string(string: GLib.String) -> Union[Gimp.ConfigWriter, None]: ...
    def open(self, name: str): ...
    def print_(self, string: str, len: int): ...
    def ref(self) -> Gimp.ConfigWriter: ...
    def revert(self) -> None: ...
    def string(self, string: str): ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ConvertDitherType(__gobject.GEnum):
    GIMP_CONVERT_DITHER_NONE: int
    GIMP_CONVERT_DITHER_FS: int
    GIMP_CONVERT_DITHER_FS_LOWBLEED: int
    GIMP_CONVERT_DITHER_FIXED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    FIXED: int
    FS: int
    FS_LOWBLEED: int
    NONE: int

class ConvertPaletteType(__gobject.GEnum):
    GIMP_CONVERT_PALETTE_GENERATE: int
    GIMP_CONVERT_PALETTE_WEB: int
    GIMP_CONVERT_PALETTE_MONO: int
    GIMP_CONVERT_PALETTE_CUSTOM: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CUSTOM: int
    GENERATE: int
    MONO: int
    WEB: int

class ConvolveType(__gobject.GEnum):
    GIMP_CONVOLVE_BLUR: int
    GIMP_CONVOLVE_SHARPEN: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BLUR: int
    SHARPEN: int

class DesaturateMode(__gobject.GEnum):
    GIMP_DESATURATE_LIGHTNESS: int
    GIMP_DESATURATE_LUMA: int
    GIMP_DESATURATE_AVERAGE: int
    GIMP_DESATURATE_LUMINANCE: int
    GIMP_DESATURATE_VALUE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    AVERAGE: int
    LIGHTNESS: int
    LUMA: int
    LUMINANCE: int
    VALUE: int

class Display(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def delete(self) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    @staticmethod
    def get_by_id(display_id: int) -> Union[Gimp.Display, None]: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_id(self) -> int: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_window_handle(self) -> int: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    @staticmethod
    def id_is_valid(display_id: int) -> bool: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def name() -> str: ...
    @staticmethod
    def new(image: Gimp.Image) -> Gimp.Display: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def present(self) -> bool: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class DisplayClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class DisplayPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class DodgeBurnType(__gobject.GEnum):
    GIMP_DODGE_BURN_TYPE_DODGE: int
    GIMP_DODGE_BURN_TYPE_BURN: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BURN: int
    DODGE: int

class DrawableClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class EnumDesc(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    value: Incomplete
    value_desc: Incomplete
    value_help: Incomplete

class FileProcedure(Procedure):
    def add_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_aux_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_aux_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_menu_path(self, menu_path: str): ...
    def add_return_value(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_return_value_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def create_config(self) -> Gimp.ProcedureConfig: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_install(self) -> None: ...
    def do_run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def do_set_sensitivity(self, sensitivity_mask: int) -> bool: ...
    def do_uninstall(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def extension_ready(self) -> None: ...
    def find_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_aux_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_return_value(self, name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_arguments(self) -> tuple[list, None]: ...
    def get_argument_sync(self, arg_name: str) -> Gimp.ArgumentSync: ...
    def get_authors(self) -> str: ...
    def get_aux_arguments(self) -> tuple[list, None]: ...
    def get_blurb(self) -> str: ...
    def get_copyright(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_date(self) -> str: ...
    def get_extensions(self) -> str: ...
    def get_format_name(self) -> str: ...
    def get_handles_remote(self) -> bool: ...
    def get_help(self) -> str: ...
    def get_help_id(self) -> str: ...
    def get_icon_file(self) -> Union[Gio.File, None]: ...
    def get_icon_name(self) -> Union[str, None]: ...
    def get_icon_pixbuf(self) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_type(self) -> Gimp.IconType: ...
    def get_image_types(self) -> str: ...
    def get_magics(self) -> str: ...
    def get_menu_label(self) -> str: ...
    def get_menu_paths(self) -> list: ...
    def get_mime_types(self) -> str: ...
    def get_name(self) -> str: ...
    def get_plug_in(self) -> Gimp.PlugIn: ...
    def get_prefixes(self) -> str: ...
    def get_priority(self) -> int: ...
    def get_proc_type(self) -> Gimp.PDBProcType: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_return_values(self) -> tuple[list, None]: ...
    def get_sensitivity_mask(self) -> int: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(plug_in: Gimp.PlugIn, name: str, proc_type: Gimp.PDBProcType, run_func: Gimp.RunFunc, run_data) -> Gimp.Procedure: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def new_arguments(self) -> Gimp.ValueArray: ...
    def new_return_values(self, status: Gimp.PDBStatusType, error: error) -> Gimp.ValueArray: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def run_dispose(self) -> None: ...
    def set_argument_sync(self, arg_name: str, sync: Gimp.ArgumentSync): ...
    def set_attribution(self, authors: str, copyright: str, date: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_documentation(self, blurb: str, help: str, help_id: str): ...
    def set_extensions(self, extensions: str): ...
    def set_format_name(self, format_name: str): ...
    def set_handles_remote(self, handles_remote: bool): ...
    def set_icon_file(self, file: Gio.File = ...): ...
    def set_icon_name(self, icon_name: str = ...): ...
    def set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf = ...): ...
    def set_image_types(self, image_types: str): ...
    def set_magics(self, magics: str): ...
    def set_menu_label(self, menu_label: str): ...
    def set_mime_types(self, mime_types: str): ...
    def set_prefixes(self, prefixes: str): ...
    def set_priority(self, priority: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_sensitivity_mask(self, sensitivity_mask: int): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class FileProcedureClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class FileProcedurePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class FillType(__gobject.GEnum):
    GIMP_FILL_FOREGROUND: int
    GIMP_FILL_BACKGROUND: int
    GIMP_FILL_WHITE: int
    GIMP_FILL_TRANSPARENT: int
    GIMP_FILL_PATTERN: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BACKGROUND: int
    FOREGROUND: int
    PATTERN: int
    TRANSPARENT: int
    WHITE: int

class FlagsDesc(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    value: Incomplete
    value_desc: Incomplete
    value_help: Incomplete

class FloatArray(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ForegroundExtractMode(__gobject.GEnum):
    GIMP_FOREGROUND_EXTRACT_MATTING: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    MATTING: int

class GradientBlendColorSpace(__gobject.GEnum):
    GIMP_GRADIENT_BLEND_RGB_PERCEPTUAL: int
    GIMP_GRADIENT_BLEND_RGB_LINEAR: int
    GIMP_GRADIENT_BLEND_CIE_LAB: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CIE_LAB: int
    RGB_LINEAR: int
    RGB_PERCEPTUAL: int

class GradientSegmentColor(__gobject.GEnum):
    GIMP_GRADIENT_SEGMENT_RGB: int
    GIMP_GRADIENT_SEGMENT_HSV_CCW: int
    GIMP_GRADIENT_SEGMENT_HSV_CW: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    HSV_CCW: int
    HSV_CW: int
    RGB: int

class GradientSegmentType(__gobject.GEnum):
    GIMP_GRADIENT_SEGMENT_LINEAR: int
    GIMP_GRADIENT_SEGMENT_CURVED: int
    GIMP_GRADIENT_SEGMENT_SINE: int
    GIMP_GRADIENT_SEGMENT_SPHERE_INCREASING: int
    GIMP_GRADIENT_SEGMENT_SPHERE_DECREASING: int
    GIMP_GRADIENT_SEGMENT_STEP: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CURVED: int
    LINEAR: int
    SINE: int
    SPHERE_DECREASING: int
    SPHERE_INCREASING: int
    STEP: int

class GradientType(__gobject.GEnum):
    GIMP_GRADIENT_LINEAR: int
    GIMP_GRADIENT_BILINEAR: int
    GIMP_GRADIENT_RADIAL: int
    GIMP_GRADIENT_SQUARE: int
    GIMP_GRADIENT_CONICAL_SYMMETRIC: int
    GIMP_GRADIENT_CONICAL_ASYMMETRIC: int
    GIMP_GRADIENT_SHAPEBURST_ANGULAR: int
    GIMP_GRADIENT_SHAPEBURST_SPHERICAL: int
    GIMP_GRADIENT_SHAPEBURST_DIMPLED: int
    GIMP_GRADIENT_SPIRAL_CLOCKWISE: int
    GIMP_GRADIENT_SPIRAL_ANTICLOCKWISE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BILINEAR: int
    CONICAL_ASYMMETRIC: int
    CONICAL_SYMMETRIC: int
    LINEAR: int
    RADIAL: int
    SHAPEBURST_ANGULAR: int
    SHAPEBURST_DIMPLED: int
    SHAPEBURST_SPHERICAL: int
    SPIRAL_ANTICLOCKWISE: int
    SPIRAL_CLOCKWISE: int
    SQUARE: int

class GridStyle(__gobject.GEnum):
    GIMP_GRID_DOTS: int
    GIMP_GRID_INTERSECTIONS: int
    GIMP_GRID_ON_OFF_DASH: int
    GIMP_GRID_DOUBLE_DASH: int
    GIMP_GRID_SOLID: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    DOTS: int
    DOUBLE_DASH: int
    INTERSECTIONS: int
    ON_OFF_DASH: int
    SOLID: int

class HistogramChannel(__gobject.GEnum):
    GIMP_HISTOGRAM_VALUE: int
    GIMP_HISTOGRAM_RED: int
    GIMP_HISTOGRAM_GREEN: int
    GIMP_HISTOGRAM_BLUE: int
    GIMP_HISTOGRAM_ALPHA: int
    GIMP_HISTOGRAM_LUMINANCE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ALPHA: int
    BLUE: int
    GREEN: int
    LUMINANCE: int
    RED: int
    VALUE: int

class HSL(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def set(self, h: float, s: float, l: float): ...
    def set_alpha(self, a: float): ...
    def to_rgb(self) -> Gimp.RGB: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    a: Incomplete
    h: Incomplete
    l: Incomplete
    s: Incomplete

class HSV(__gi.Boxed):
    def clamp(self) -> None: ...
    def copy(self, *args, **kwargs) -> None: ...
    def set(self, hue: float, saturation: float, value: float): ...
    def to_rgb(self) -> Gimp.RGB: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    a: Incomplete
    h: Incomplete
    s: Incomplete
    v: Incomplete

class HueRange(__gobject.GEnum):
    GIMP_HUE_RANGE_ALL: int
    GIMP_HUE_RANGE_RED: int
    GIMP_HUE_RANGE_YELLOW: int
    GIMP_HUE_RANGE_GREEN: int
    GIMP_HUE_RANGE_CYAN: int
    GIMP_HUE_RANGE_BLUE: int
    GIMP_HUE_RANGE_MAGENTA: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ALL: int
    BLUE: int
    CYAN: int
    GREEN: int
    MAGENTA: int
    RED: int
    YELLOW: int

class IconType(__gobject.GEnum):
    GIMP_ICON_TYPE_ICON_NAME: int
    GIMP_ICON_TYPE_PIXBUF: int
    GIMP_ICON_TYPE_IMAGE_FILE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ICON_NAME: int
    IMAGE_FILE: int
    PIXBUF: int

class Image(__gi_overrides_GObject.Object):
    def add_hguide(self, yposition: int) -> int: ...
    def add_sample_point(self, position_x: int, position_y: int) -> int: ...
    def add_vguide(self, xposition: int) -> int: ...
    def attach_parasite(self, parasite: Gimp.Parasite) -> bool: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def clean_all(self) -> bool: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def convert_color_profile(self, profile: Gimp.ColorProfile, intent: Gimp.ColorRenderingIntent, bpc: bool) -> bool: ...
    def convert_color_profile_from_file(self, file: Gio.File, intent: Gimp.ColorRenderingIntent, bpc: bool) -> bool: ...
    def convert_grayscale(self) -> bool: ...
    def convert_indexed(self, dither_type: Gimp.ConvertDitherType, palette_type: Gimp.ConvertPaletteType, num_cols: int, alpha_dither: bool, remove_unused: bool, palette: str) -> bool: ...
    def convert_precision(self, precision: Gimp.Precision) -> bool: ...
    def convert_rgb(self) -> bool: ...
    @staticmethod
    def convert_set_dither_matrix(width: int, height: int, matrix: list) -> bool: ...
    def crop(self, new_width: int, new_height: int, offx: int, offy: int) -> bool: ...
    def delete(self) -> bool: ...
    def delete_guide(self, guide: int) -> bool: ...
    def delete_sample_point(self, sample_point: int) -> bool: ...
    def detach_parasite(self, name: str) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def duplicate(self) -> Gimp.Image: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_next_guide(self, guide: int) -> int: ...
    def find_next_sample_point(self, sample_point: int) -> int: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def flatten(self) -> Gimp.Layer: ...
    def flip(self, flip_type: Gimp.OrientationType) -> bool: ...
    def floating_sel_attached_to(self) -> Gimp.Drawable: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_channels(self) -> bool: ...
    def freeze_layers(self) -> bool: ...
    def freeze_notify(self) -> None: ...
    def freeze_vectors(self) -> bool: ...
    def getv(self, names: list, values: list): ...
    def get_base_type(self) -> Gimp.ImageBaseType: ...
    @staticmethod
    def get_by_id(image_id: int) -> Union[Gimp.Image, None]: ...
    def get_channel_by_name(self, name: str) -> Gimp.Channel: ...
    def get_channel_by_tattoo(self, tattoo: int) -> Gimp.Channel: ...
    def get_colormap(self) -> tuple[list, None]: ...
    def get_color_profile(self) -> Gimp.ColorProfile: ...
    def get_component_active(self, component: Gimp.ChannelType) -> bool: ...
    def get_component_visible(self, component: Gimp.ChannelType) -> bool: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_default_new_layer_mode(self) -> Gimp.LayerMode: ...
    def get_effective_color_profile(self) -> Gimp.ColorProfile: ...
    def get_exported_file(self) -> Gio.File: ...
    def get_file(self) -> Gio.File: ...
    def get_floating_sel(self) -> Gimp.Layer: ...
    def get_guide_orientation(self, guide: int) -> Gimp.OrientationType: ...
    def get_guide_position(self, guide: int) -> int: ...
    def get_height(self) -> int: ...
    def get_id(self) -> int: ...
    def get_imported_file(self) -> Gio.File: ...
    def get_item_position(self, item: Gimp.Item) -> int: ...
    def get_layer_by_name(self, name: str) -> Gimp.Layer: ...
    def get_layer_by_tattoo(self, tattoo: int) -> Gimp.Layer: ...
    def get_metadata(self) -> Union[Gimp.Metadata, None]: ...
    def get_name(self) -> str: ...
    def get_parasite(self, name: str) -> Gimp.Parasite: ...
    def get_parasite_list(self) -> list: ...
    def get_precision(self) -> Gimp.Precision: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_resolution(self) -> tuple[bool, None, None]: ...
    def get_sample_point_position(self, sample_point: int) -> tuple[int, None]: ...
    def get_selected_drawables(self) -> tuple[list, None]: ...
    def get_selection(self) -> Gimp.Selection: ...
    def get_simulation_bpc(self) -> bool: ...
    def get_simulation_intent(self) -> Gimp.ColorRenderingIntent: ...
    def get_simulation_profile(self) -> Gimp.ColorProfile: ...
    def get_tattoo_state(self) -> int: ...
    def get_thumbnail(self, width: int, height: int, alpha: Gimp.PixbufTransparency) -> GdkPixbuf.Pixbuf: ...
    def get_thumbnail_data(self, width: int, height: int) -> tuple[list, None, None, None]: ...
    def get_unit(self) -> Gimp.Unit: ...
    def get_vectors_by_name(self, name: str) -> Gimp.Vectors: ...
    def get_vectors_by_tattoo(self, tattoo: int) -> Gimp.Vectors: ...
    def get_width(self) -> int: ...
    def get_xcf_file(self) -> Gio.File: ...
    def grid_get_background_color(self) -> tuple[bool, None]: ...
    def grid_get_foreground_color(self) -> tuple[bool, None]: ...
    def grid_get_offset(self) -> tuple[bool, None, None]: ...
    def grid_get_spacing(self) -> tuple[bool, None, None]: ...
    def grid_get_style(self) -> Gimp.GridStyle: ...
    def grid_set_background_color(self, bgcolor: Gimp.RGB) -> bool: ...
    def grid_set_foreground_color(self, fgcolor: Gimp.RGB) -> bool: ...
    def grid_set_offset(self, xoffset: float, yoffset: float) -> bool: ...
    def grid_set_spacing(self, xspacing: float, yspacing: float) -> bool: ...
    def grid_set_style(self, style: Gimp.GridStyle) -> bool: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    @staticmethod
    def id_is_valid(image_id: int) -> bool: ...
    def insert_channel(self, channel: Gimp.Channel, parent: Gimp.Channel, position: int) -> bool: ...
    def insert_layer(self, layer: Gimp.Layer, parent: Gimp.Layer, position: int) -> bool: ...
    def insert_vectors(self, vectors: Gimp.Vectors, parent: Gimp.Vectors, position: int) -> bool: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_dirty(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def list_channels(self) -> list: ...
    def list_layers(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_selected_layers(self) -> list: ...
    def list_vectors(self) -> list: ...
    def lower_item(self, item: Gimp.Item) -> bool: ...
    def lower_item_to_bottom(self, item: Gimp.Item) -> bool: ...
    def merge_down(self, merge_layer: Gimp.Layer, merge_type: Gimp.MergeType) -> Gimp.Layer: ...
    def merge_layer_group(self, layer_group: Gimp.Layer) -> Gimp.Layer: ...
    def merge_visible_layers(self, merge_type: Gimp.MergeType) -> Gimp.Layer: ...
    def metadata_load_finish(self, mime_type: str, metadata: Gimp.Metadata, flags: Gimp.MetadataLoadFlags): ...
    def metadata_load_prepare(self, mime_type: str, file: Gio.File) -> Gimp.Metadata: ...
    @staticmethod
    def metadata_load_thumbnail(file: Gio.File) -> Union[Gimp.Image, None]: ...
    def metadata_save_filter(self, mime_type: str, metadata: Gimp.Metadata, flags: Gimp.MetadataSaveFlags, file: Gio.File) -> Gimp.Metadata: ...
    def metadata_save_finish(self, mime_type: str, metadata: Gimp.Metadata, flags: Gimp.MetadataSaveFlags, file: Gio.File) -> bool: ...
    def metadata_save_prepare(self, mime_type: str, suggested_flags: Gimp.MetadataSaveFlags) -> Gimp.Metadata: ...
    @staticmethod
    def new(width: int, height: int, type: Gimp.ImageBaseType) -> Gimp.Image: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_precision(width: int, height: int, type: Gimp.ImageBaseType, precision: Gimp.Precision) -> Gimp.Image: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def pick_color(self, drawables: list, x: float, y: float, sample_merged: bool, sample_average: bool, average_radius: float) -> tuple[bool, None]: ...
    def pick_correlate_layer(self, x: int, y: int) -> Gimp.Layer: ...
    def policy_color_profile(self, interactive: bool) -> bool: ...
    def policy_rotate(self, interactive: bool) -> bool: ...
    def raise_item(self, item: Gimp.Item) -> bool: ...
    def raise_item_to_top(self, item: Gimp.Item) -> bool: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def remove_channel(self, channel: Gimp.Channel) -> bool: ...
    def remove_layer(self, layer: Gimp.Layer) -> bool: ...
    def remove_vectors(self, vectors: Gimp.Vectors) -> bool: ...
    def reorder_item(self, item: Gimp.Item, parent: Gimp.Item, position: int) -> bool: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def resize(self, new_width: int, new_height: int, offx: int, offy: int) -> bool: ...
    def resize_to_layers(self) -> bool: ...
    def rotate(self, rotate_type: Gimp.RotationType) -> bool: ...
    def run_dispose(self) -> None: ...
    def scale(self, new_width: int, new_height: int) -> bool: ...
    def select_color(self, operation: Gimp.ChannelOps, drawable: Gimp.Drawable, color: Gimp.RGB) -> bool: ...
    def select_contiguous_color(self, operation: Gimp.ChannelOps, drawable: Gimp.Drawable, x: float, y: float) -> bool: ...
    def select_ellipse(self, operation: Gimp.ChannelOps, x: float, y: float, width: float, height: float) -> bool: ...
    def select_item(self, operation: Gimp.ChannelOps, item: Gimp.Item) -> bool: ...
    def select_polygon(self, operation: Gimp.ChannelOps, segs: list) -> bool: ...
    def select_rectangle(self, operation: Gimp.ChannelOps, x: float, y: float, width: float, height: float) -> bool: ...
    def select_round_rectangle(self, operation: Gimp.ChannelOps, x: float, y: float, width: float, height: float, corner_radius_x: float, corner_radius_y: float) -> bool: ...
    def set_colormap(self, colormap: list, num_colors: int) -> bool: ...
    def set_color_profile(self, profile: Gimp.ColorProfile) -> bool: ...
    def set_color_profile_from_file(self, file: Gio.File) -> bool: ...
    def set_component_active(self, component: Gimp.ChannelType, active: bool) -> bool: ...
    def set_component_visible(self, component: Gimp.ChannelType, visible: bool) -> bool: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_file(self, file: Gio.File) -> bool: ...
    def set_metadata(self, metadata: Gimp.Metadata) -> bool: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_resolution(self, xresolution: float, yresolution: float) -> bool: ...
    def set_selected_layers(self, layers: list) -> bool: ...
    def set_simulation_bpc(self, bpc: bool) -> bool: ...
    def set_simulation_intent(self, intent: Gimp.ColorRenderingIntent) -> bool: ...
    def set_simulation_profile(self, profile: Gimp.ColorProfile) -> bool: ...
    def set_simulation_profile_from_file(self, file: Gio.File) -> bool: ...
    def set_tattoo_state(self, tattoo_state: int) -> bool: ...
    def set_unit(self, unit: Gimp.Unit) -> bool: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def take_selected_layers(self, layers: list) -> bool: ...
    def thaw_channels(self) -> bool: ...
    def thaw_layers(self) -> bool: ...
    def thaw_notify(self) -> None: ...
    def thaw_vectors(self) -> bool: ...
    def undo_disable(self) -> bool: ...
    def undo_enable(self) -> bool: ...
    def undo_freeze(self) -> bool: ...
    def undo_group_end(self) -> bool: ...
    def undo_group_start(self) -> bool: ...
    def undo_is_enabled(self) -> bool: ...
    def undo_thaw(self) -> bool: ...
    def unref(self, *args, **kargs) -> None: ...
    def unset_active_channel(self) -> bool: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ImageBaseType(__gobject.GEnum):
    GIMP_RGB: int
    GIMP_GRAY: int
    GIMP_INDEXED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    GRAY: int
    INDEXED: int
    RGB: int

class ImageClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ImageProcedure(Procedure):
    def add_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_aux_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_aux_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_menu_path(self, menu_path: str): ...
    def add_return_value(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_return_value_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def create_config(self) -> Gimp.ProcedureConfig: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_install(self) -> None: ...
    def do_run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def do_set_sensitivity(self, sensitivity_mask: int) -> bool: ...
    def do_uninstall(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def extension_ready(self) -> None: ...
    def find_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_aux_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_return_value(self, name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_arguments(self) -> tuple[list, None]: ...
    def get_argument_sync(self, arg_name: str) -> Gimp.ArgumentSync: ...
    def get_authors(self) -> str: ...
    def get_aux_arguments(self) -> tuple[list, None]: ...
    def get_blurb(self) -> str: ...
    def get_copyright(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_date(self) -> str: ...
    def get_help(self) -> str: ...
    def get_help_id(self) -> str: ...
    def get_icon_file(self) -> Union[Gio.File, None]: ...
    def get_icon_name(self) -> Union[str, None]: ...
    def get_icon_pixbuf(self) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_type(self) -> Gimp.IconType: ...
    def get_image_types(self) -> str: ...
    def get_menu_label(self) -> str: ...
    def get_menu_paths(self) -> list: ...
    def get_name(self) -> str: ...
    def get_plug_in(self) -> Gimp.PlugIn: ...
    def get_proc_type(self) -> Gimp.PDBProcType: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_return_values(self) -> tuple[list, None]: ...
    def get_sensitivity_mask(self) -> int: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(plug_in: Gimp.PlugIn, name: str, proc_type: Gimp.PDBProcType, run_func: Gimp.RunImageFunc) -> Gimp.Procedure: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def new_arguments(self) -> Gimp.ValueArray: ...
    def new_return_values(self, status: Gimp.PDBStatusType, error: error) -> Gimp.ValueArray: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def run_dispose(self) -> None: ...
    def set_argument_sync(self, arg_name: str, sync: Gimp.ArgumentSync): ...
    def set_attribution(self, authors: str, copyright: str, date: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_documentation(self, blurb: str, help: str, help_id: str): ...
    def set_icon_file(self, file: Gio.File = ...): ...
    def set_icon_name(self, icon_name: str = ...): ...
    def set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf = ...): ...
    def set_image_types(self, image_types: str): ...
    def set_menu_label(self, menu_label: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_sensitivity_mask(self, sensitivity_mask: int): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ImageProcedureClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ImageProcedurePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ImageType(__gobject.GEnum):
    GIMP_RGB_IMAGE: int
    GIMP_RGBA_IMAGE: int
    GIMP_GRAY_IMAGE: int
    GIMP_GRAYA_IMAGE: int
    GIMP_INDEXED_IMAGE: int
    GIMP_INDEXEDA_IMAGE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    GRAYA_IMAGE: int
    GRAY_IMAGE: int
    INDEXEDA_IMAGE: int
    INDEXED_IMAGE: int
    RGBA_IMAGE: int
    RGB_IMAGE: int

class InkBlobType(__gobject.GEnum):
    GIMP_INK_BLOB_TYPE_CIRCLE: int
    GIMP_INK_BLOB_TYPE_SQUARE: int
    GIMP_INK_BLOB_TYPE_DIAMOND: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CIRCLE: int
    DIAMOND: int
    SQUARE: int

class Int32Array(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class InterpolationType(__gobject.GEnum):
    GIMP_INTERPOLATION_NONE: int
    GIMP_INTERPOLATION_LINEAR: int
    GIMP_INTERPOLATION_CUBIC: int
    GIMP_INTERPOLATION_NOHALO: int
    GIMP_INTERPOLATION_LOHALO: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CUBIC: int
    LINEAR: int
    LOHALO: int
    NOHALO: int
    NONE: int

class ItemClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class JoinStyle(__gobject.GEnum):
    GIMP_JOIN_MITER: int
    GIMP_JOIN_ROUND: int
    GIMP_JOIN_BEVEL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BEVEL: int
    MITER: int
    ROUND: int

class Layer(Drawable):
    def add_alpha(self) -> bool: ...
    def add_mask(self, mask: Gimp.LayerMask) -> bool: ...
    def attach_parasite(self, parasite: Gimp.Parasite) -> bool: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def brightness_contrast(self, brightness: float, contrast: float) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def colorize_hsl(self, hue: float, saturation: float, lightness: float) -> bool: ...
    def color_balance(self, transfer_mode: Gimp.TransferMode, preserve_lum: bool, cyan_red: float, magenta_green: float, yellow_blue: float) -> bool: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def copy(self) -> Gimp.Layer: ...
    def create_mask(self, mask_type: Gimp.AddMaskType) -> Gimp.LayerMask: ...
    def curves_explicit(self, channel: Gimp.HistogramChannel, values: list) -> bool: ...
    def curves_spline(self, channel: Gimp.HistogramChannel, points: list) -> bool: ...
    def delete(self) -> bool: ...
    def desaturate(self, desaturate_mode: Gimp.DesaturateMode) -> bool: ...
    def detach_parasite(self, name: str) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def edit_bucket_fill(self, fill_type: Gimp.FillType, x: float, y: float) -> bool: ...
    def edit_clear(self) -> bool: ...
    def edit_fill(self, fill_type: Gimp.FillType) -> bool: ...
    def edit_gradient_fill(self, gradient_type: Gimp.GradientType, offset: float, supersample: bool, supersample_max_depth: int, supersample_threshold: float, dither: bool, x1: float, y1: float, x2: float, y2: float) -> bool: ...
    def edit_stroke_item(self, item: Gimp.Item) -> bool: ...
    def edit_stroke_selection(self) -> bool: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def equalize(self, mask_only: bool) -> bool: ...
    def fill(self, fill_type: Gimp.FillType) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def flatten(self) -> bool: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreground_extract(self, mode: Gimp.ForegroundExtractMode, mask: Gimp.Drawable) -> bool: ...
    def freeze_notify(self) -> None: ...
    def free_shadow(self) -> bool: ...
    @staticmethod
    def from_mask(mask: Gimp.LayerMask) -> Gimp.Layer: ...
    def getv(self, names: list, values: list): ...
    def get_apply_mask(self) -> bool: ...
    def get_blend_space(self) -> Gimp.LayerColorSpace: ...
    def get_bpp(self) -> int: ...
    def get_buffer(self) -> Gegl.Buffer: ...
    @staticmethod
    def get_by_id(layer_id: int) -> Union[Gimp.Layer, None]: ...
    def get_color_tag(self) -> Gimp.ColorTag: ...
    def get_composite_mode(self) -> Gimp.LayerCompositeMode: ...
    def get_composite_space(self) -> Gimp.LayerColorSpace: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_edit_mask(self) -> bool: ...
    def get_expanded(self) -> bool: ...
    def get_format(self) -> Babl.Object: ...
    def get_height(self) -> int: ...
    def get_id(self) -> int: ...
    def get_image(self) -> Gimp.Image: ...
    def get_lock_alpha(self) -> bool: ...
    def get_lock_content(self) -> bool: ...
    def get_lock_position(self) -> bool: ...
    def get_lock_visibility(self) -> bool: ...
    def get_mask(self) -> Gimp.LayerMask: ...
    def get_mode(self) -> Gimp.LayerMode: ...
    def get_name(self) -> str: ...
    def get_offsets(self) -> tuple[bool, None, None]: ...
    def get_opacity(self) -> float: ...
    def get_parasite(self, name: str) -> Gimp.Parasite: ...
    def get_parasite_list(self) -> list: ...
    def get_parent(self) -> Gimp.Item: ...
    def get_pixel(self, x_coord: int, y_coord: int) -> tuple[list, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_shadow_buffer(self) -> Gegl.Buffer: ...
    def get_show_mask(self) -> bool: ...
    def get_sub_thumbnail(self, src_x: int, src_y: int, src_width: int, src_height: int, dest_width: int, dest_height: int, alpha: Gimp.PixbufTransparency) -> GdkPixbuf.Pixbuf: ...
    def get_sub_thumbnail_data(self, src_x: int, src_y: int, src_width: int, src_height: int, dest_width: int, dest_height: int) -> Union[list, tuple[None, None, None, None]]: ...
    def get_tattoo(self) -> int: ...
    def get_thumbnail(self, width: int, height: int, alpha: Gimp.PixbufTransparency) -> GdkPixbuf.Pixbuf: ...
    def get_thumbnail_data(self, width: int, height: int) -> Union[list, tuple[None, None, None, None]]: ...
    def get_thumbnail_format(self) -> Babl.Object: ...
    def get_visible(self) -> bool: ...
    def get_width(self) -> int: ...
    @staticmethod
    def group_new(image: Gimp.Image) -> Gimp.Layer: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_alpha(self) -> bool: ...
    def histogram(self, channel: Gimp.HistogramChannel, start_range: float, end_range: float) -> tuple[bool, None, None, None, None, None, None]: ...
    def hue_saturation(self, hue_range: Gimp.HueRange, hue_offset: float, lightness: float, saturation: float, overlap: float) -> bool: ...
    @staticmethod
    def id_is_channel(item_id: int) -> bool: ...
    @staticmethod
    def id_is_drawable(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer_mask(item_id: int) -> bool: ...
    @staticmethod
    def id_is_selection(item_id: int) -> bool: ...
    @staticmethod
    def id_is_text_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_valid(item_id: int) -> bool: ...
    @staticmethod
    def id_is_vectors(item_id: int) -> bool: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def invert(self, linear: bool) -> bool: ...
    def is_channel(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_floating_sel(self) -> bool: ...
    def is_gray(self) -> bool: ...
    def is_group(self) -> bool: ...
    def is_indexed(self) -> bool: ...
    def is_layer(self) -> bool: ...
    def is_layer_mask(self) -> bool: ...
    def is_rgb(self) -> bool: ...
    def is_selection(self) -> bool: ...
    def is_text_layer(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def is_vectors(self) -> bool: ...
    def levels(self, channel: Gimp.HistogramChannel, low_input: float, high_input: float, clamp_input: bool, gamma: float, low_output: float, high_output: float, clamp_output: bool) -> bool: ...
    def levels_stretch(self) -> bool: ...
    def list_children(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def mask_bounds(self) -> tuple[bool, None, None, None, None]: ...
    def mask_intersect(self) -> tuple[bool, None, None, None, None]: ...
    def merge_shadow(self, undo: bool) -> bool: ...
    @staticmethod
    def new(image: Gimp.Image, name: str, width: int, height: int, type: Gimp.ImageType, opacity: float, mode: Gimp.LayerMode) -> Gimp.Layer: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_drawable(drawable: Gimp.Drawable, dest_image: Gimp.Image) -> Gimp.Layer: ...
    @staticmethod
    def new_from_pixbuf(image: Gimp.Image, name: str, pixbuf: GdkPixbuf.Pixbuf, opacity: float, mode: Gimp.LayerMode, progress_start: float, progress_end: float) -> Gimp.Layer: ...
    @staticmethod
    def new_from_surface(image: Gimp.Image, name: str, surface: cairo.Surface, progress_start: float, progress_end: float) -> Gimp.Layer: ...
    @staticmethod
    def new_from_visible(image: Gimp.Image, dest_image: Gimp.Image, name: str) -> Gimp.Layer: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def offset(self, wrap_around: bool, fill_type: Gimp.OffsetType, offset_x: int, offset_y: int) -> bool: ...
    def override_property(self, property_id: int, name: str): ...
    def posterize(self, levels: int) -> bool: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def remove_mask(self, mode: Gimp.MaskApplyMode) -> bool: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def resize(self, new_width: int, new_height: int, offx: int, offy: int) -> bool: ...
    def resize_to_image_size(self) -> bool: ...
    def run_dispose(self) -> None: ...
    def scale(self, new_width: int, new_height: int, local_origin: bool) -> bool: ...
    def set_apply_mask(self, apply_mask: bool) -> bool: ...
    def set_blend_space(self, blend_space: Gimp.LayerColorSpace) -> bool: ...
    def set_color_tag(self, color_tag: Gimp.ColorTag) -> bool: ...
    def set_composite_mode(self, composite_mode: Gimp.LayerCompositeMode) -> bool: ...
    def set_composite_space(self, composite_space: Gimp.LayerColorSpace) -> bool: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_edit_mask(self, edit_mask: bool) -> bool: ...
    def set_expanded(self, expanded: bool) -> bool: ...
    def set_lock_alpha(self, lock_alpha: bool) -> bool: ...
    def set_lock_content(self, lock_content: bool) -> bool: ...
    def set_lock_position(self, lock_position: bool) -> bool: ...
    def set_lock_visibility(self, lock_visibility: bool) -> bool: ...
    def set_mode(self, mode: Gimp.LayerMode) -> bool: ...
    def set_name(self, name: str) -> bool: ...
    def set_offsets(self, offx: int, offy: int) -> bool: ...
    def set_opacity(self, opacity: float) -> bool: ...
    def set_pixel(self, x_coord: int, y_coord: int, pixel: list) -> bool: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_show_mask(self, show_mask: bool) -> bool: ...
    def set_tattoo(self, tattoo: int) -> bool: ...
    def set_visible(self, visible: bool) -> bool: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def threshold(self, channel: Gimp.HistogramChannel, low_threshold: float, high_threshold: float) -> bool: ...
    def transform_2d(self, source_x: float, source_y: float, scale_x: float, scale_y: float, angle: float, dest_x: float, dest_y: float) -> Gimp.Item: ...
    def transform_flip(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_flip_simple(self, flip_type: Gimp.OrientationType, auto_center: bool, axis: float) -> Gimp.Item: ...
    def transform_matrix(self, coeff_0_0: float, coeff_0_1: float, coeff_0_2: float, coeff_1_0: float, coeff_1_1: float, coeff_1_2: float, coeff_2_0: float, coeff_2_1: float, coeff_2_2: float) -> Gimp.Item: ...
    def transform_perspective(self, x0: float, y0: float, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float) -> Gimp.Item: ...
    def transform_rotate(self, angle: float, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_rotate_simple(self, rotate_type: Gimp.RotationType, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_scale(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_shear(self, shear_type: Gimp.OrientationType, magnitude: float) -> Gimp.Item: ...
    def transform_translate(self, off_x: float, off_y: float) -> Gimp.Item: ...
    def type(self) -> Gimp.ImageType: ...
    def type_with_alpha(self) -> Gimp.ImageType: ...
    def unref(self, *args, **kargs) -> None: ...
    def update(self, x: int, y: int, width: int, height: int) -> bool: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class LayerClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class LayerColorSpace(__gobject.GEnum):
    GIMP_LAYER_COLOR_SPACE_AUTO: int
    GIMP_LAYER_COLOR_SPACE_RGB_LINEAR: int
    GIMP_LAYER_COLOR_SPACE_RGB_PERCEPTUAL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    AUTO: int
    RGB_LINEAR: int
    RGB_PERCEPTUAL: int

class LayerCompositeMode(__gobject.GEnum):
    GIMP_LAYER_COMPOSITE_AUTO: int
    GIMP_LAYER_COMPOSITE_UNION: int
    GIMP_LAYER_COMPOSITE_CLIP_TO_BACKDROP: int
    GIMP_LAYER_COMPOSITE_CLIP_TO_LAYER: int
    GIMP_LAYER_COMPOSITE_INTERSECTION: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    AUTO: int
    CLIP_TO_BACKDROP: int
    CLIP_TO_LAYER: int
    INTERSECTION: int
    UNION: int

class LayerMask(Channel):
    def attach_parasite(self, parasite: Gimp.Parasite) -> bool: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def brightness_contrast(self, brightness: float, contrast: float) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def colorize_hsl(self, hue: float, saturation: float, lightness: float) -> bool: ...
    def color_balance(self, transfer_mode: Gimp.TransferMode, preserve_lum: bool, cyan_red: float, magenta_green: float, yellow_blue: float) -> bool: ...
    def combine_masks(self, channel2: Gimp.Channel, operation: Gimp.ChannelOps, offx: int, offy: int) -> bool: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def copy(self) -> Gimp.Channel: ...
    def curves_explicit(self, channel: Gimp.HistogramChannel, values: list) -> bool: ...
    def curves_spline(self, channel: Gimp.HistogramChannel, points: list) -> bool: ...
    def delete(self) -> bool: ...
    def desaturate(self, desaturate_mode: Gimp.DesaturateMode) -> bool: ...
    def detach_parasite(self, name: str) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def edit_bucket_fill(self, fill_type: Gimp.FillType, x: float, y: float) -> bool: ...
    def edit_clear(self) -> bool: ...
    def edit_fill(self, fill_type: Gimp.FillType) -> bool: ...
    def edit_gradient_fill(self, gradient_type: Gimp.GradientType, offset: float, supersample: bool, supersample_max_depth: int, supersample_threshold: float, dither: bool, x1: float, y1: float, x2: float, y2: float) -> bool: ...
    def edit_stroke_item(self, item: Gimp.Item) -> bool: ...
    def edit_stroke_selection(self) -> bool: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def equalize(self, mask_only: bool) -> bool: ...
    def fill(self, fill_type: Gimp.FillType) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreground_extract(self, mode: Gimp.ForegroundExtractMode, mask: Gimp.Drawable) -> bool: ...
    def freeze_notify(self) -> None: ...
    def free_shadow(self) -> bool: ...
    def getv(self, names: list, values: list): ...
    def get_bpp(self) -> int: ...
    def get_buffer(self) -> Gegl.Buffer: ...
    @staticmethod
    def get_by_id(layer_mask_id: int) -> Union[Gimp.LayerMask, None]: ...
    def get_color(self) -> tuple[bool, None]: ...
    def get_color_tag(self) -> Gimp.ColorTag: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_expanded(self) -> bool: ...
    def get_format(self) -> Babl.Object: ...
    def get_height(self) -> int: ...
    def get_id(self) -> int: ...
    def get_image(self) -> Gimp.Image: ...
    def get_lock_content(self) -> bool: ...
    def get_lock_position(self) -> bool: ...
    def get_lock_visibility(self) -> bool: ...
    def get_name(self) -> str: ...
    def get_offsets(self) -> tuple[bool, None, None]: ...
    def get_opacity(self) -> float: ...
    def get_parasite(self, name: str) -> Gimp.Parasite: ...
    def get_parasite_list(self) -> list: ...
    def get_parent(self) -> Gimp.Item: ...
    def get_pixel(self, x_coord: int, y_coord: int) -> tuple[list, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_shadow_buffer(self) -> Gegl.Buffer: ...
    def get_show_masked(self) -> bool: ...
    def get_sub_thumbnail(self, src_x: int, src_y: int, src_width: int, src_height: int, dest_width: int, dest_height: int, alpha: Gimp.PixbufTransparency) -> GdkPixbuf.Pixbuf: ...
    def get_sub_thumbnail_data(self, src_x: int, src_y: int, src_width: int, src_height: int, dest_width: int, dest_height: int) -> Union[list, tuple[None, None, None, None]]: ...
    def get_tattoo(self) -> int: ...
    def get_thumbnail(self, width: int, height: int, alpha: Gimp.PixbufTransparency) -> GdkPixbuf.Pixbuf: ...
    def get_thumbnail_data(self, width: int, height: int) -> Union[list, tuple[None, None, None, None]]: ...
    def get_thumbnail_format(self) -> Babl.Object: ...
    def get_visible(self) -> bool: ...
    def get_width(self) -> int: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_alpha(self) -> bool: ...
    def histogram(self, channel: Gimp.HistogramChannel, start_range: float, end_range: float) -> tuple[bool, None, None, None, None, None, None]: ...
    def hue_saturation(self, hue_range: Gimp.HueRange, hue_offset: float, lightness: float, saturation: float, overlap: float) -> bool: ...
    @staticmethod
    def id_is_channel(item_id: int) -> bool: ...
    @staticmethod
    def id_is_drawable(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer_mask(item_id: int) -> bool: ...
    @staticmethod
    def id_is_selection(item_id: int) -> bool: ...
    @staticmethod
    def id_is_text_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_valid(item_id: int) -> bool: ...
    @staticmethod
    def id_is_vectors(item_id: int) -> bool: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def invert(self, linear: bool) -> bool: ...
    def is_channel(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_gray(self) -> bool: ...
    def is_group(self) -> bool: ...
    def is_indexed(self) -> bool: ...
    def is_layer(self) -> bool: ...
    def is_layer_mask(self) -> bool: ...
    def is_rgb(self) -> bool: ...
    def is_selection(self) -> bool: ...
    def is_text_layer(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def is_vectors(self) -> bool: ...
    def levels(self, channel: Gimp.HistogramChannel, low_input: float, high_input: float, clamp_input: bool, gamma: float, low_output: float, high_output: float, clamp_output: bool) -> bool: ...
    def levels_stretch(self) -> bool: ...
    def list_children(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def mask_bounds(self) -> tuple[bool, None, None, None, None]: ...
    def mask_intersect(self) -> tuple[bool, None, None, None, None]: ...
    def merge_shadow(self, undo: bool) -> bool: ...
    @staticmethod
    def new(image: Gimp.Image, name: str, width: int, height: int, opacity: float, color: Gimp.RGB) -> Gimp.Channel: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_component(image: Gimp.Image, component: Gimp.ChannelType, name: str) -> Gimp.Channel: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def offset(self, wrap_around: bool, fill_type: Gimp.OffsetType, offset_x: int, offset_y: int) -> bool: ...
    def override_property(self, property_id: int, name: str): ...
    def posterize(self, levels: int) -> bool: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_color(self, color: Gimp.RGB) -> bool: ...
    def set_color_tag(self, color_tag: Gimp.ColorTag) -> bool: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_expanded(self, expanded: bool) -> bool: ...
    def set_lock_content(self, lock_content: bool) -> bool: ...
    def set_lock_position(self, lock_position: bool) -> bool: ...
    def set_lock_visibility(self, lock_visibility: bool) -> bool: ...
    def set_name(self, name: str) -> bool: ...
    def set_opacity(self, opacity: float) -> bool: ...
    def set_pixel(self, x_coord: int, y_coord: int, pixel: list) -> bool: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_show_masked(self, show_masked: bool) -> bool: ...
    def set_tattoo(self, tattoo: int) -> bool: ...
    def set_visible(self, visible: bool) -> bool: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def threshold(self, channel: Gimp.HistogramChannel, low_threshold: float, high_threshold: float) -> bool: ...
    def transform_2d(self, source_x: float, source_y: float, scale_x: float, scale_y: float, angle: float, dest_x: float, dest_y: float) -> Gimp.Item: ...
    def transform_flip(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_flip_simple(self, flip_type: Gimp.OrientationType, auto_center: bool, axis: float) -> Gimp.Item: ...
    def transform_matrix(self, coeff_0_0: float, coeff_0_1: float, coeff_0_2: float, coeff_1_0: float, coeff_1_1: float, coeff_1_2: float, coeff_2_0: float, coeff_2_1: float, coeff_2_2: float) -> Gimp.Item: ...
    def transform_perspective(self, x0: float, y0: float, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float) -> Gimp.Item: ...
    def transform_rotate(self, angle: float, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_rotate_simple(self, rotate_type: Gimp.RotationType, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_scale(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_shear(self, shear_type: Gimp.OrientationType, magnitude: float) -> Gimp.Item: ...
    def transform_translate(self, off_x: float, off_y: float) -> Gimp.Item: ...
    def type(self) -> Gimp.ImageType: ...
    def type_with_alpha(self) -> Gimp.ImageType: ...
    def unref(self, *args, **kargs) -> None: ...
    def update(self, x: int, y: int, width: int, height: int) -> bool: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class LayerMaskClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class LayerMode(__gobject.GEnum):
    GIMP_LAYER_MODE_NORMAL_LEGACY: int
    GIMP_LAYER_MODE_DISSOLVE: int
    GIMP_LAYER_MODE_BEHIND_LEGACY: int
    GIMP_LAYER_MODE_MULTIPLY_LEGACY: int
    GIMP_LAYER_MODE_SCREEN_LEGACY: int
    GIMP_LAYER_MODE_OVERLAY_LEGACY: int
    GIMP_LAYER_MODE_DIFFERENCE_LEGACY: int
    GIMP_LAYER_MODE_ADDITION_LEGACY: int
    GIMP_LAYER_MODE_SUBTRACT_LEGACY: int
    GIMP_LAYER_MODE_DARKEN_ONLY_LEGACY: int
    GIMP_LAYER_MODE_LIGHTEN_ONLY_LEGACY: int
    GIMP_LAYER_MODE_HSV_HUE_LEGACY: int
    GIMP_LAYER_MODE_HSV_SATURATION_LEGACY: int
    GIMP_LAYER_MODE_HSL_COLOR_LEGACY: int
    GIMP_LAYER_MODE_HSV_VALUE_LEGACY: int
    GIMP_LAYER_MODE_DIVIDE_LEGACY: int
    GIMP_LAYER_MODE_DODGE_LEGACY: int
    GIMP_LAYER_MODE_BURN_LEGACY: int
    GIMP_LAYER_MODE_HARDLIGHT_LEGACY: int
    GIMP_LAYER_MODE_SOFTLIGHT_LEGACY: int
    GIMP_LAYER_MODE_GRAIN_EXTRACT_LEGACY: int
    GIMP_LAYER_MODE_GRAIN_MERGE_LEGACY: int
    GIMP_LAYER_MODE_COLOR_ERASE_LEGACY: int
    GIMP_LAYER_MODE_OVERLAY: int
    GIMP_LAYER_MODE_LCH_HUE: int
    GIMP_LAYER_MODE_LCH_CHROMA: int
    GIMP_LAYER_MODE_LCH_COLOR: int
    GIMP_LAYER_MODE_LCH_LIGHTNESS: int
    GIMP_LAYER_MODE_NORMAL: int
    GIMP_LAYER_MODE_BEHIND: int
    GIMP_LAYER_MODE_MULTIPLY: int
    GIMP_LAYER_MODE_SCREEN: int
    GIMP_LAYER_MODE_DIFFERENCE: int
    GIMP_LAYER_MODE_ADDITION: int
    GIMP_LAYER_MODE_SUBTRACT: int
    GIMP_LAYER_MODE_DARKEN_ONLY: int
    GIMP_LAYER_MODE_LIGHTEN_ONLY: int
    GIMP_LAYER_MODE_HSV_HUE: int
    GIMP_LAYER_MODE_HSV_SATURATION: int
    GIMP_LAYER_MODE_HSL_COLOR: int
    GIMP_LAYER_MODE_HSV_VALUE: int
    GIMP_LAYER_MODE_DIVIDE: int
    GIMP_LAYER_MODE_DODGE: int
    GIMP_LAYER_MODE_BURN: int
    GIMP_LAYER_MODE_HARDLIGHT: int
    GIMP_LAYER_MODE_SOFTLIGHT: int
    GIMP_LAYER_MODE_GRAIN_EXTRACT: int
    GIMP_LAYER_MODE_GRAIN_MERGE: int
    GIMP_LAYER_MODE_VIVID_LIGHT: int
    GIMP_LAYER_MODE_PIN_LIGHT: int
    GIMP_LAYER_MODE_LINEAR_LIGHT: int
    GIMP_LAYER_MODE_HARD_MIX: int
    GIMP_LAYER_MODE_EXCLUSION: int
    GIMP_LAYER_MODE_LINEAR_BURN: int
    GIMP_LAYER_MODE_LUMA_DARKEN_ONLY: int
    GIMP_LAYER_MODE_LUMA_LIGHTEN_ONLY: int
    GIMP_LAYER_MODE_LUMINANCE: int
    GIMP_LAYER_MODE_COLOR_ERASE: int
    GIMP_LAYER_MODE_ERASE: int
    GIMP_LAYER_MODE_MERGE: int
    GIMP_LAYER_MODE_SPLIT: int
    GIMP_LAYER_MODE_PASS_THROUGH: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ADDITION: int
    ADDITION_LEGACY: int
    BEHIND: int
    BEHIND_LEGACY: int
    BURN: int
    BURN_LEGACY: int
    COLOR_ERASE: int
    COLOR_ERASE_LEGACY: int
    DARKEN_ONLY: int
    DARKEN_ONLY_LEGACY: int
    DIFFERENCE: int
    DIFFERENCE_LEGACY: int
    DISSOLVE: int
    DIVIDE: int
    DIVIDE_LEGACY: int
    DODGE: int
    DODGE_LEGACY: int
    ERASE: int
    EXCLUSION: int
    GRAIN_EXTRACT: int
    GRAIN_EXTRACT_LEGACY: int
    GRAIN_MERGE: int
    GRAIN_MERGE_LEGACY: int
    HARDLIGHT: int
    HARDLIGHT_LEGACY: int
    HARD_MIX: int
    HSL_COLOR: int
    HSL_COLOR_LEGACY: int
    HSV_HUE: int
    HSV_HUE_LEGACY: int
    HSV_SATURATION: int
    HSV_SATURATION_LEGACY: int
    HSV_VALUE: int
    HSV_VALUE_LEGACY: int
    LCH_CHROMA: int
    LCH_COLOR: int
    LCH_HUE: int
    LCH_LIGHTNESS: int
    LIGHTEN_ONLY: int
    LIGHTEN_ONLY_LEGACY: int
    LINEAR_BURN: int
    LINEAR_LIGHT: int
    LUMA_DARKEN_ONLY: int
    LUMA_LIGHTEN_ONLY: int
    LUMINANCE: int
    MERGE: int
    MULTIPLY: int
    MULTIPLY_LEGACY: int
    NORMAL: int
    NORMAL_LEGACY: int
    OVERLAY: int
    OVERLAY_LEGACY: int
    PASS_THROUGH: int
    PIN_LIGHT: int
    SCREEN: int
    SCREEN_LEGACY: int
    SOFTLIGHT: int
    SOFTLIGHT_LEGACY: int
    SPLIT: int
    SUBTRACT: int
    SUBTRACT_LEGACY: int
    VIVID_LIGHT: int

class LoadProcedure(FileProcedure):
    def add_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_aux_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_aux_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_menu_path(self, menu_path: str): ...
    def add_return_value(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_return_value_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def create_config(self) -> Gimp.ProcedureConfig: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_install(self) -> None: ...
    def do_run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def do_set_sensitivity(self, sensitivity_mask: int) -> bool: ...
    def do_uninstall(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def extension_ready(self) -> None: ...
    def find_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_aux_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_return_value(self, name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_arguments(self) -> tuple[list, None]: ...
    def get_argument_sync(self, arg_name: str) -> Gimp.ArgumentSync: ...
    def get_authors(self) -> str: ...
    def get_aux_arguments(self) -> tuple[list, None]: ...
    def get_blurb(self) -> str: ...
    def get_copyright(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_date(self) -> str: ...
    def get_extensions(self) -> str: ...
    def get_format_name(self) -> str: ...
    def get_handles_raw(self) -> bool: ...
    def get_handles_remote(self) -> bool: ...
    def get_help(self) -> str: ...
    def get_help_id(self) -> str: ...
    def get_icon_file(self) -> Union[Gio.File, None]: ...
    def get_icon_name(self) -> Union[str, None]: ...
    def get_icon_pixbuf(self) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_type(self) -> Gimp.IconType: ...
    def get_image_types(self) -> str: ...
    def get_magics(self) -> str: ...
    def get_menu_label(self) -> str: ...
    def get_menu_paths(self) -> list: ...
    def get_mime_types(self) -> str: ...
    def get_name(self) -> str: ...
    def get_plug_in(self) -> Gimp.PlugIn: ...
    def get_prefixes(self) -> str: ...
    def get_priority(self) -> int: ...
    def get_proc_type(self) -> Gimp.PDBProcType: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_return_values(self) -> tuple[list, None]: ...
    def get_sensitivity_mask(self) -> int: ...
    def get_thumbnail_loader(self) -> str: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(plug_in: Gimp.PlugIn, name: str, proc_type: Gimp.PDBProcType, run_func: Gimp.RunLoadFunc, run_data) -> Gimp.Procedure: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def new_arguments(self) -> Gimp.ValueArray: ...
    def new_return_values(self, status: Gimp.PDBStatusType, error: error) -> Gimp.ValueArray: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def run_dispose(self) -> None: ...
    def set_argument_sync(self, arg_name: str, sync: Gimp.ArgumentSync): ...
    def set_attribution(self, authors: str, copyright: str, date: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_documentation(self, blurb: str, help: str, help_id: str): ...
    def set_extensions(self, extensions: str): ...
    def set_format_name(self, format_name: str): ...
    def set_handles_raw(self, handles_raw: bool): ...
    def set_handles_remote(self, handles_remote: bool): ...
    def set_icon_file(self, file: Gio.File = ...): ...
    def set_icon_name(self, icon_name: str = ...): ...
    def set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf = ...): ...
    def set_image_types(self, image_types: str): ...
    def set_magics(self, magics: str): ...
    def set_menu_label(self, menu_label: str): ...
    def set_mime_types(self, mime_types: str): ...
    def set_prefixes(self, prefixes: str): ...
    def set_priority(self, priority: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_sensitivity_mask(self, sensitivity_mask: int): ...
    def set_thumbnail_loader(self, thumbnail_proc: str): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class LoadProcedureClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class LoadProcedurePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class MaskApplyMode(__gobject.GEnum):
    GIMP_MASK_APPLY: int
    GIMP_MASK_DISCARD: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    APPLY: int
    DISCARD: int

class Matrix2(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def determinant(self) -> float: ...
    def identity(self) -> None: ...
    def invert(self) -> None: ...
    def mult(self, matrix2: Gimp.Matrix2): ...
    def transform_point(self, x: float, y: float) -> tuple[None, None]: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    coeff: Incomplete

class Matrix3(__gi.Boxed):
    def affine(self, a: float, b: float, c: float, d: float, e: float, f: float): ...
    def copy(self, *args, **kwargs) -> None: ...
    def determinant(self) -> float: ...
    def equal(self, matrix2: Gimp.Matrix3) -> bool: ...
    def identity(self) -> None: ...
    def invert(self) -> None: ...
    def is_affine(self) -> bool: ...
    def is_diagonal(self) -> bool: ...
    def is_identity(self) -> bool: ...
    def is_simple(self) -> bool: ...
    def mult(self, matrix2: Gimp.Matrix3): ...
    def rotate(self, theta: float): ...
    def scale(self, x: float, y: float): ...
    def transform_point(self, x: float, y: float, newx: float, newy: float): ...
    def translate(self, x: float, y: float): ...
    def xshear(self, amount: float): ...
    def yshear(self, amount: float): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    coeff: Incomplete

class Matrix4(__gi.Struct):
    def identity(self) -> None: ...
    def mult(self, matrix2: Gimp.Matrix4): ...
    def to_deg(self) -> tuple[None, None, None]: ...
    def transform_point(self, x: float, y: float, z: float) -> tuple[float, None, None, None]: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    coeff: Incomplete

class Memsize:
    @staticmethod
    def deserialize(string: str, memsize: int) -> bool: ...
    @staticmethod
    def serialize(memsize: int) -> str: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    __gsignals__: Incomplete

class MergeType(__gobject.GEnum):
    GIMP_EXPAND_AS_NECESSARY: int
    GIMP_CLIP_TO_IMAGE: int
    GIMP_CLIP_TO_BOTTOM_LAYER: int
    GIMP_FLATTEN_IMAGE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CLIP_TO_BOTTOM_LAYER: int
    CLIP_TO_IMAGE: int
    EXPAND_AS_NECESSARY: int
    FLATTEN_IMAGE: int

class MessageHandlerType(__gobject.GEnum):
    GIMP_MESSAGE_BOX: int
    GIMP_CONSOLE: int
    GIMP_ERROR_CONSOLE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CONSOLE: int
    ERROR_CONSOLE: int
    MESSAGE_BOX: int

class Metadata(__gi_overrides_GObject.Object):
    def add_xmp_history(self, state_status: str): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    @staticmethod
    def deserialize(metadata_xml: str) -> Gimp.Metadata: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def duplicate(self) -> Gimp.Metadata: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_colorspace(self) -> Gimp.MetadataColorspace: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_guid() -> str: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_resolution(self) -> tuple[bool, None, None, None]: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    @staticmethod
    def is_tag_supported(tag: str, mime_type: str) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def load_from_file(file: Gio.File) -> Gimp.Metadata: ...
    @staticmethod
    def new() -> Gimp.Metadata: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def save_to_file(self, file: Gio.File) -> bool: ...
    def serialize(self) -> str: ...
    def set_bits_per_sample(self, bits_per_sample: int): ...
    def set_colorspace(self, colorspace: Gimp.MetadataColorspace): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_from_exif(self, exif_data: list) -> bool: ...
    def set_from_iptc(self, iptc_data: list) -> bool: ...
    def set_from_xmp(self, xmp_data: list) -> bool: ...
    def set_pixel_size(self, width: int, height: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_resolution(self, xres: float, yres: float, unit: Gimp.Unit): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class MetadataColorspace(__gobject.GEnum):
    GIMP_METADATA_COLORSPACE_UNSPECIFIED: int
    GIMP_METADATA_COLORSPACE_UNCALIBRATED: int
    GIMP_METADATA_COLORSPACE_SRGB: int
    GIMP_METADATA_COLORSPACE_ADOBERGB: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ADOBERGB: int
    SRGB: int
    UNCALIBRATED: int
    UNSPECIFIED: int

class MetadataLoadFlags(__gobject.GFlags):
    GIMP_METADATA_LOAD_COMMENT: int
    GIMP_METADATA_LOAD_RESOLUTION: int
    GIMP_METADATA_LOAD_ORIENTATION: int
    GIMP_METADATA_LOAD_COLORSPACE: int
    GIMP_METADATA_LOAD_ALL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    ALL: int
    COLORSPACE: int
    COMMENT: int
    ORIENTATION: int
    RESOLUTION: int

class MetadataSaveFlags(__gobject.GFlags):
    GIMP_METADATA_SAVE_EXIF: int
    GIMP_METADATA_SAVE_XMP: int
    GIMP_METADATA_SAVE_IPTC: int
    GIMP_METADATA_SAVE_THUMBNAIL: int
    GIMP_METADATA_SAVE_COLOR_PROFILE: int
    GIMP_METADATA_SAVE_COMMENT: int
    GIMP_METADATA_SAVE_ALL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    ALL: int
    COLOR_PROFILE: int
    COMMENT: int
    EXIF: int
    IPTC: int
    THUMBNAIL: int
    XMP: int

class Module(__gi_repository_GObject.TypeModule):
    def add_interface(self, instance_type: GType, interface_type: GType, interface_info: GObject.InterfaceInfo): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def complete_interface_info(self, instance_type: GType, interface_type: GType, info: GObject.InterfaceInfo): ...
    def complete_type_info(self, g_type: GType, info: GObject.TypeInfo, value_table: GObject.TypeValueTable): ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_load(self) -> bool: ...
    def do_modified(self) -> None: ...
    def do_unload(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    @staticmethod
    def error_quark() -> int: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_auto_load(self) -> bool: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_file(self) -> Gio.File: ...
    def get_info(self) -> Gimp.ModuleInfo: ...
    def get_last_error(self) -> str: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_state(self) -> Gimp.ModuleState: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def is_loaded(self) -> bool: ...
    def is_on_disk(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(file: Gio.File, auto_load: bool, verbose: bool) -> Gimp.Module: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    @staticmethod
    def query(module: GObject.TypeModule) -> Gimp.ModuleInfo: ...
    def query_module(self) -> bool: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    @staticmethod
    def register(module: GObject.TypeModule) -> bool: ...
    def register_enum(self, name: str, const_static_values: GObject.EnumValue) -> GType: ...
    def register_flags(self, name: str, const_static_values: GObject.FlagsValue) -> GType: ...
    def register_type(self, parent_type: GType, type_name: str, type_info: GObject.TypeInfo, flags: GObject.TypeFlags) -> GType: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_auto_load(self, auto_load: bool): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_name(self, name: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unuse(self) -> None: ...
    def use(self) -> bool: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    interface_infos: Incomplete
    name: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    type_infos: Incomplete
    use_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ModuleClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    modified: Incomplete
    parent_class: Incomplete

class ModuleDB(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, module: Gimp.Module): ...
    def do_module_modified(self, module: Gimp.Module): ...
    def do_remove(self, module: Gimp.Module): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_load_inhibit(self) -> str: ...
    def get_modules(self) -> list: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_verbose(self) -> bool: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    def load(self, module_path: str): ...
    @staticmethod
    def new(verbose: bool) -> Gimp.ModuleDB: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def refresh(self, module_path: str): ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_load_inhibit(self, load_inhibit: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_verbose(self, verbose: bool): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ModuleDBClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    add: Incomplete
    module_modified: Incomplete
    parent_class: Incomplete
    remove: Incomplete

class ModuleDBPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ModuleError(__gobject.GEnum):
    GIMP_MODULE_FAILED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    MODULE_FAILED: int

class ModuleInfo(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    abi_version: Incomplete
    author: Incomplete
    copyright: Incomplete
    date: Incomplete
    purpose: Incomplete
    version: Incomplete

class ModulePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ModuleState(__gobject.GEnum):
    GIMP_MODULE_STATE_ERROR: int
    GIMP_MODULE_STATE_LOADED: int
    GIMP_MODULE_STATE_LOAD_FAILED: int
    GIMP_MODULE_STATE_NOT_LOADED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ERROR: int
    LOADED: int
    LOAD_FAILED: int
    NOT_LOADED: int

class ObjectArray(__gi.Boxed):
    def copy(self) -> Gimp.ObjectArray: ...
    def free(self) -> None: ...
    @staticmethod
    def new(object_type: GType, data: list, static_data: bool) -> Gimp.ObjectArray: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    data: Incomplete
    length: Incomplete
    object_type: Incomplete
    static_data: Incomplete

class OffsetType(__gobject.GEnum):
    GIMP_OFFSET_BACKGROUND: int
    GIMP_OFFSET_TRANSPARENT: int
    GIMP_OFFSET_WRAP_AROUND: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BACKGROUND: int
    TRANSPARENT: int
    WRAP_AROUND: int

class OrientationType(__gobject.GEnum):
    GIMP_ORIENTATION_HORIZONTAL: int
    GIMP_ORIENTATION_VERTICAL: int
    GIMP_ORIENTATION_UNKNOWN: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    HORIZONTAL: int
    UNKNOWN: int
    VERTICAL: int

class PaintApplicationMode(__gobject.GEnum):
    GIMP_PAINT_CONSTANT: int
    GIMP_PAINT_INCREMENTAL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CONSTANT: int
    INCREMENTAL: int

class ParamArray(__gi_repository_GObject.ParamSpecBoxed):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamItem(__gi_repository_GObject.ParamSpecObject):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamDrawable(ParamItem):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamChannel(ParamDrawable):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamConfigPath(__gi_repository_GObject.ParamSpecString):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    cset_first: Incomplete
    cset_nth: Incomplete
    default_value: Incomplete
    ensure_non_null: Incomplete
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    null_fold_if_empty: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    substitutor: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamDisplay(__gi_repository_GObject.ParamSpecObject):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamFloatArray(ParamArray):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamImage(__gi_repository_GObject.ParamSpecObject):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamInt32Array(ParamArray):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamLayer(ParamDrawable):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamLayerMask(ParamChannel):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamMatrix2(__gi_repository_GObject.ParamSpecBoxed):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamMatrix3(__gi_repository_GObject.ParamSpecBoxed):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamMemsize(__gi_repository_GObject.ParamSpecUInt64):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    default_value: Incomplete
    flags: Incomplete
    g_type_instance: Incomplete
    maximum: Incomplete
    minimum: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamObjectArray(__gi_repository_GObject.ParamSpecBoxed):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamParasite(__gi_repository_GObject.ParamSpecBoxed):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamRGB(__gi_repository_GObject.ParamSpecBoxed):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamRGBArray(__gi_repository_GObject.ParamSpecBoxed):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamSelection(ParamChannel):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamSpecArray(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete

class ParamSpecChannel(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete

class ParamSpecDisplay(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    none_ok: Incomplete
    parent_instance: Incomplete

class ParamSpecDrawable(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete

class ParamSpecFloatArray(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete

class ParamSpecImage(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    none_ok: Incomplete
    parent_instance: Incomplete

class ParamSpecInt32Array(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete

class ParamSpecItem(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    none_ok: Incomplete
    parent_instance: Incomplete

class ParamSpecLayer(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete

class ParamSpecLayerMask(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete

class ParamSpecObjectArray(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    object_type: Incomplete
    parent_instance: Incomplete

class ParamSpecParasite(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ParamSpecRGB(__gi.Struct):
    @staticmethod
    def get_default(pspec: GObject.ParamSpec, default_value: Gimp.RGB): ...
    @staticmethod
    def has_alpha(pspec: GObject.ParamSpec) -> bool: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ParamSpecRGBArray(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete

class ParamSpecSelection(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete

class ParamSpecUInt8Array(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete

class ParamSpecUnit(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    allow_percent: Incomplete
    parent_instance: Incomplete

class ParamSpecValueArray(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    element_spec: Incomplete
    fixed_n_elements: Incomplete
    parent_instance: Incomplete

class ParamSpecVectors(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete

class ParamUInt8Array(ParamArray):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamUnit(__gi_repository_GObject.ParamSpecInt):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    default_value: Incomplete
    flags: Incomplete
    g_type_instance: Incomplete
    maximum: Incomplete
    minimum: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamValueArray(__gi_repository_GObject.ParamSpecBoxed):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamVectors(ParamItem):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class Parasite(__gi.Boxed):
    def compare(self, b: Gimp.Parasite) -> bool: ...
    def copy(self) -> Gimp.Parasite: ...
    def free(self) -> None: ...
    def get_data(self) -> tuple[list, None]: ...
    def get_flags(self) -> int: ...
    def get_name(self) -> str: ...
    def has_flag(self, flag: int) -> bool: ...
    def is_persistent(self) -> bool: ...
    def is_type(self, name: str) -> bool: ...
    def is_undoable(self) -> bool: ...
    @staticmethod
    def new(name: str, flags: int, data: list) -> Gimp.Parasite: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    data: Incomplete
    flags: Incomplete
    name: Incomplete
    size: Incomplete

class PDB(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def dump_to_file(self, file: Gio.File) -> bool: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    @staticmethod
    def get_data(identifier: str, data) -> bool: ...
    @staticmethod
    def get_data_size(identifier: str) -> int: ...
    def get_last_error(self) -> str: ...
    def get_last_status(self) -> Gimp.PDBStatusType: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    def lookup_procedure(self, procedure_name: str) -> Union[Gimp.Procedure, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def procedure_exists(self, procedure_name: str) -> bool: ...
    def query_procedures(self, name: str, blurb: str, help: str, help_id: str, authors: str, copyright: str, date: str, proc_type: str) -> list: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def run_procedure(self, procedure_name: str, arguments: list) -> Gimp.ValueArray: ...
    def run_procedure_array(self, procedure_name: str, arguments: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def run_procedure_config(self, procedure_name: str, config: Gimp.ProcedureConfig) -> Gimp.ValueArray: ...
    @staticmethod
    def set_data(identifier: str, data, bytes: int) -> bool: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def temp_procedure_name(self) -> str: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class PDBClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class PDBErrorHandler(__gobject.GEnum):
    GIMP_PDB_ERROR_HANDLER_INTERNAL: int
    GIMP_PDB_ERROR_HANDLER_PLUGIN: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    INTERNAL: int
    PLUGIN: int

class PDBPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class PDBProcType(__gobject.GEnum):
    GIMP_PDB_PROC_TYPE_INTERNAL: int
    GIMP_PDB_PROC_TYPE_PLUGIN: int
    GIMP_PDB_PROC_TYPE_EXTENSION: int
    GIMP_PDB_PROC_TYPE_TEMPORARY: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    EXTENSION: int
    INTERNAL: int
    PLUGIN: int
    TEMPORARY: int

class PDBStatusType(__gobject.GEnum):
    GIMP_PDB_EXECUTION_ERROR: int
    GIMP_PDB_CALLING_ERROR: int
    GIMP_PDB_PASS_THROUGH: int
    GIMP_PDB_SUCCESS: int
    GIMP_PDB_CANCEL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CALLING_ERROR: int
    CANCEL: int
    EXECUTION_ERROR: int
    PASS_THROUGH: int
    SUCCESS: int

class PixbufTransparency(__gobject.GEnum):
    GIMP_PIXBUF_KEEP_ALPHA: int
    GIMP_PIXBUF_SMALL_CHECKS: int
    GIMP_PIXBUF_LARGE_CHECKS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    KEEP_ALPHA: int
    LARGE_CHECKS: int
    SMALL_CHECKS: int

class PixPipeParams(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    cellheight: Incomplete
    cellwidth: Incomplete
    cols: Incomplete
    dim: Incomplete
    ncells: Incomplete
    placement: Incomplete
    rank: Incomplete
    rows: Incomplete
    selection: Incomplete
    step: Incomplete

class PlugIn(__gi_overrides_GObject.Object):
    def add_menu_branch(self, menu_path: str, menu_label: str): ...
    def add_temp_procedure(self, procedure: Gimp.Procedure): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    @staticmethod
    def directory() -> str: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_create_procedure(self, procedure_name: str) -> Gimp.Procedure: ...
    def do_init_procedures(self) -> list: ...
    def do_query_procedures(self) -> list: ...
    def do_quit(self) -> None: ...
    def do_set_i18n(self, procedure_name: str) -> tuple[bool, None, None]: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    @staticmethod
    def error_quark() -> int: ...
    def extension_enable(self) -> None: ...
    def extension_process(self, timeout: int): ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_pdb_error_handler(self) -> Gimp.PDBErrorHandler: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_temp_procedure(self, procedure_name: str) -> Union[Gimp.Procedure, None]: ...
    def get_temp_procedures(self) -> list: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def remove_temp_procedure(self, procedure_name: str): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_help_domain(self, domain_name: str, domain_uri: Gio.File): ...
    def set_pdb_error_handler(self, handler: Gimp.PDBErrorHandler): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class PlugInClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    create_procedure: Incomplete
    init_procedures: Incomplete
    parent_class: Incomplete
    query_procedures: Incomplete
    quit: Incomplete
    set_i18n: Incomplete

class PlugInPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Precision(__gobject.GEnum):
    GIMP_PRECISION_U8_LINEAR: int
    GIMP_PRECISION_U8_NON_LINEAR: int
    GIMP_PRECISION_U8_PERCEPTUAL: int
    GIMP_PRECISION_U16_LINEAR: int
    GIMP_PRECISION_U16_NON_LINEAR: int
    GIMP_PRECISION_U16_PERCEPTUAL: int
    GIMP_PRECISION_U32_LINEAR: int
    GIMP_PRECISION_U32_NON_LINEAR: int
    GIMP_PRECISION_U32_PERCEPTUAL: int
    GIMP_PRECISION_HALF_LINEAR: int
    GIMP_PRECISION_HALF_NON_LINEAR: int
    GIMP_PRECISION_HALF_PERCEPTUAL: int
    GIMP_PRECISION_FLOAT_LINEAR: int
    GIMP_PRECISION_FLOAT_NON_LINEAR: int
    GIMP_PRECISION_FLOAT_PERCEPTUAL: int
    GIMP_PRECISION_DOUBLE_LINEAR: int
    GIMP_PRECISION_DOUBLE_NON_LINEAR: int
    GIMP_PRECISION_DOUBLE_PERCEPTUAL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    DOUBLE_GAMMA: int
    DOUBLE_LINEAR: int
    DOUBLE_NON_LINEAR: int
    DOUBLE_PERCEPTUAL: int
    FLOAT_GAMMA: int
    FLOAT_LINEAR: int
    FLOAT_NON_LINEAR: int
    FLOAT_PERCEPTUAL: int
    HALF_GAMMA: int
    HALF_LINEAR: int
    HALF_NON_LINEAR: int
    HALF_PERCEPTUAL: int
    U16_GAMMA: int
    U16_LINEAR: int
    U16_NON_LINEAR: int
    U16_PERCEPTUAL: int
    U32_GAMMA: int
    U32_LINEAR: int
    U32_NON_LINEAR: int
    U32_PERCEPTUAL: int
    U8_GAMMA: int
    U8_LINEAR: int
    U8_NON_LINEAR: int
    U8_PERCEPTUAL: int

class ProcedureClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    create_config: Incomplete
    install: Incomplete
    parent_class: Incomplete
    run: Incomplete
    set_sensitivity: Incomplete
    uninstall: Incomplete

class ProcedureConfig(__gi_overrides_GObject.Object):
    def begin_export(self, original_image: Gimp.Image, run_mode: Gimp.RunMode, args: Gimp.ValueArray, mime_type: str = ...) -> Union[Gimp.Metadata, None]: ...
    def begin_run(self, image: Gimp.Image, run_mode: Gimp.RunMode, args: Gimp.ValueArray): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def end_export(self, exported_image: Gimp.Image, file: Gio.File, status: Gimp.PDBStatusType): ...
    def end_run(self, status: Gimp.PDBStatusType): ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_procedure(self) -> Gimp.Procedure: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_values(self, values: Gimp.ValueArray): ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def save_metadata(self, exported_image: Gimp.Image, file: Gio.File): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_values(self, values: Gimp.ValueArray): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ProcedureConfigClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ProcedureConfigPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ProcedurePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ProcedureSensitivityMask(__gobject.GFlags):
    GIMP_PROCEDURE_SENSITIVE_DRAWABLE: int
    GIMP_PROCEDURE_SENSITIVE_DRAWABLES: int
    GIMP_PROCEDURE_SENSITIVE_NO_DRAWABLES: int
    GIMP_PROCEDURE_SENSITIVE_NO_IMAGE: int
    GIMP_PROCEDURE_SENSITIVE_ALWAYS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    ALWAYS: int
    DRAWABLE: int
    DRAWABLES: int
    NO_DRAWABLES: int
    NO_IMAGE: int

class ProgressCommand(__gobject.GEnum):
    GIMP_PROGRESS_COMMAND_START: int
    GIMP_PROGRESS_COMMAND_END: int
    GIMP_PROGRESS_COMMAND_SET_TEXT: int
    GIMP_PROGRESS_COMMAND_SET_VALUE: int
    GIMP_PROGRESS_COMMAND_PULSE: int
    GIMP_PROGRESS_COMMAND_GET_WINDOW: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    END: int
    GET_WINDOW: int
    PULSE: int
    SET_TEXT: int
    SET_VALUE: int
    START: int

class ProgressVtable(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    end: Incomplete
    get_window: Incomplete
    pulse: Incomplete
    set_text: Incomplete
    set_value: Incomplete
    start: Incomplete

class RepeatMode(__gobject.GEnum):
    GIMP_REPEAT_NONE: int
    GIMP_REPEAT_SAWTOOTH: int
    GIMP_REPEAT_TRIANGULAR: int
    GIMP_REPEAT_TRUNCATE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    NONE: int
    SAWTOOTH: int
    TRIANGULAR: int
    TRUNCATE: int

class RGB(__gi.Boxed):
    def add(self, rgb2: Gimp.RGB): ...
    def clamp(self) -> None: ...
    def composite(self, color2: Gimp.RGB, mode: Gimp.RGBCompositeMode): ...
    def copy(self, *args, **kwargs) -> None: ...
    def distance(self, rgb2: Gimp.RGB) -> float: ...
    def gamma(self, gamma: float): ...
    def get_pixel(self, format: Babl.Object) -> pixel: ...
    def get_uchar(self) -> tuple[None, None, None]: ...
    @staticmethod
    def list_names() -> tuple[None, None]: ...
    def luminance(self) -> float: ...
    def luminance_uchar(self) -> int: ...
    def max(self) -> float: ...
    def min(self) -> float: ...
    def multiply(self, factor: float): ...
    def parse_css(self, css: list) -> bool: ...
    def parse_hex(self, hex: list) -> bool: ...
    def parse_name(self, name: list) -> bool: ...
    def set(self, red: float, green: float, blue: float): ...
    def set_alpha(self, alpha: float): ...
    def set_pixel(self, format: Babl.Object, pixel: Incomplete | None = ...): ...
    def set_uchar(self, red: int, green: int, blue: int): ...
    def subtract(self, rgb2: Gimp.RGB): ...
    def to_cmyk(self, pullout: float) -> Gimp.CMYK: ...
    def to_hsl(self) -> Gimp.HSL: ...
    def to_hsv(self) -> Gimp.HSV: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    a: Incomplete
    b: Incomplete
    g: Incomplete
    r: Incomplete

class RGBArray(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class RGBCompositeMode(__gobject.GEnum):
    GIMP_RGB_COMPOSITE_NONE: int
    GIMP_RGB_COMPOSITE_NORMAL: int
    GIMP_RGB_COMPOSITE_BEHIND: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BEHIND: int
    NONE: int
    NORMAL: int

class RotationType(__gobject.GEnum):
    GIMP_ROTATE_90: int
    GIMP_ROTATE_180: int
    GIMP_ROTATE_270: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete

class RunMode(__gobject.GEnum):
    GIMP_RUN_INTERACTIVE: int
    GIMP_RUN_NONINTERACTIVE: int
    GIMP_RUN_WITH_LAST_VALS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    INTERACTIVE: int
    NONINTERACTIVE: int
    WITH_LAST_VALS: int

class SaveProcedure(FileProcedure):
    def add_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_aux_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_aux_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_menu_path(self, menu_path: str): ...
    def add_return_value(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_return_value_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def create_config(self) -> Gimp.ProcedureConfig: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_install(self) -> None: ...
    def do_run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def do_set_sensitivity(self, sensitivity_mask: int) -> bool: ...
    def do_uninstall(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def extension_ready(self) -> None: ...
    def find_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_aux_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_return_value(self, name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_arguments(self) -> tuple[list, None]: ...
    def get_argument_sync(self, arg_name: str) -> Gimp.ArgumentSync: ...
    def get_authors(self) -> str: ...
    def get_aux_arguments(self) -> tuple[list, None]: ...
    def get_blurb(self) -> str: ...
    def get_copyright(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_date(self) -> str: ...
    def get_extensions(self) -> str: ...
    def get_format_name(self) -> str: ...
    def get_handles_remote(self) -> bool: ...
    def get_help(self) -> str: ...
    def get_help_id(self) -> str: ...
    def get_icon_file(self) -> Union[Gio.File, None]: ...
    def get_icon_name(self) -> Union[str, None]: ...
    def get_icon_pixbuf(self) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_type(self) -> Gimp.IconType: ...
    def get_image_types(self) -> str: ...
    def get_magics(self) -> str: ...
    def get_menu_label(self) -> str: ...
    def get_menu_paths(self) -> list: ...
    def get_mime_types(self) -> str: ...
    def get_name(self) -> str: ...
    def get_plug_in(self) -> Gimp.PlugIn: ...
    def get_prefixes(self) -> str: ...
    def get_priority(self) -> int: ...
    def get_proc_type(self) -> Gimp.PDBProcType: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_return_values(self) -> tuple[list, None]: ...
    def get_sensitivity_mask(self) -> int: ...
    def get_support_comment(self) -> bool: ...
    def get_support_exif(self) -> bool: ...
    def get_support_iptc(self) -> bool: ...
    def get_support_profile(self) -> bool: ...
    def get_support_thumbnail(self) -> bool: ...
    def get_support_xmp(self) -> bool: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(plug_in: Gimp.PlugIn, name: str, proc_type: Gimp.PDBProcType, run_func: Gimp.RunSaveFunc, run_data) -> Gimp.Procedure: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def new_arguments(self) -> Gimp.ValueArray: ...
    def new_return_values(self, status: Gimp.PDBStatusType, error: error) -> Gimp.ValueArray: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def run_dispose(self) -> None: ...
    def set_argument_sync(self, arg_name: str, sync: Gimp.ArgumentSync): ...
    def set_attribution(self, authors: str, copyright: str, date: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_documentation(self, blurb: str, help: str, help_id: str): ...
    def set_extensions(self, extensions: str): ...
    def set_format_name(self, format_name: str): ...
    def set_handles_remote(self, handles_remote: bool): ...
    def set_icon_file(self, file: Gio.File = ...): ...
    def set_icon_name(self, icon_name: str = ...): ...
    def set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf = ...): ...
    def set_image_types(self, image_types: str): ...
    def set_magics(self, magics: str): ...
    def set_menu_label(self, menu_label: str): ...
    def set_mime_types(self, mime_types: str): ...
    def set_prefixes(self, prefixes: str): ...
    def set_priority(self, priority: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_sensitivity_mask(self, sensitivity_mask: int): ...
    def set_support_comment(self, supports: bool): ...
    def set_support_exif(self, supports: bool): ...
    def set_support_iptc(self, supports: bool): ...
    def set_support_profile(self, supports: bool): ...
    def set_support_thumbnail(self, supports: bool): ...
    def set_support_xmp(self, supports: bool): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class SaveProcedureClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class SaveProcedurePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Scanner(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    @staticmethod
    def new_file(file: Gio.File) -> Gimp.Scanner: ...
    @staticmethod
    def new_stream(input: Gio.InputStream) -> Gimp.Scanner: ...
    @staticmethod
    def new_string(text: list) -> Gimp.Scanner: ...
    def parse_boolean(self) -> tuple[bool, None]: ...
    def parse_color(self) -> tuple[bool, None]: ...
    def parse_data(self) -> tuple[bool, None]: ...
    def parse_float(self) -> tuple[bool, None]: ...
    def parse_identifier(self) -> tuple[bool, None]: ...
    def parse_int(self) -> tuple[bool, None]: ...
    def parse_int64(self) -> tuple[bool, None]: ...
    def parse_matrix2(self) -> tuple[bool, None]: ...
    def parse_string(self) -> tuple[bool, None]: ...
    def parse_string_no_validate(self) -> tuple[bool, None]: ...
    def parse_token(self, token: GLib.TokenType) -> bool: ...
    def ref(self) -> Gimp.Scanner: ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class SelectCriterion(__gobject.GEnum):
    GIMP_SELECT_CRITERION_COMPOSITE: int
    GIMP_SELECT_CRITERION_RGB_RED: int
    GIMP_SELECT_CRITERION_RGB_GREEN: int
    GIMP_SELECT_CRITERION_RGB_BLUE: int
    GIMP_SELECT_CRITERION_HSV_HUE: int
    GIMP_SELECT_CRITERION_HSV_SATURATION: int
    GIMP_SELECT_CRITERION_HSV_VALUE: int
    GIMP_SELECT_CRITERION_LCH_LIGHTNESS: int
    GIMP_SELECT_CRITERION_LCH_CHROMA: int
    GIMP_SELECT_CRITERION_LCH_HUE: int
    GIMP_SELECT_CRITERION_ALPHA: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ALPHA: int
    COMPOSITE: int
    HSV_HUE: int
    HSV_SATURATION: int
    HSV_VALUE: int
    LCH_CHROMA: int
    LCH_HUE: int
    LCH_LIGHTNESS: int
    RGB_BLUE: int
    RGB_GREEN: int
    RGB_RED: int

class Selection(Channel):
    @staticmethod
    def all(image: Gimp.Image) -> bool: ...
    def attach_parasite(self, parasite: Gimp.Parasite) -> bool: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    @staticmethod
    def border(image: Gimp.Image, radius: int) -> bool: ...
    @staticmethod
    def bounds(image: Gimp.Image) -> tuple[bool, None, None, None, None, None]: ...
    def brightness_contrast(self, brightness: float, contrast: float) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def colorize_hsl(self, hue: float, saturation: float, lightness: float) -> bool: ...
    def color_balance(self, transfer_mode: Gimp.TransferMode, preserve_lum: bool, cyan_red: float, magenta_green: float, yellow_blue: float) -> bool: ...
    def combine_masks(self, channel2: Gimp.Channel, operation: Gimp.ChannelOps, offx: int, offy: int) -> bool: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def copy(self) -> Gimp.Channel: ...
    def curves_explicit(self, channel: Gimp.HistogramChannel, values: list) -> bool: ...
    def curves_spline(self, channel: Gimp.HistogramChannel, points: list) -> bool: ...
    def delete(self) -> bool: ...
    def desaturate(self, desaturate_mode: Gimp.DesaturateMode) -> bool: ...
    def detach_parasite(self, name: str) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def edit_bucket_fill(self, fill_type: Gimp.FillType, x: float, y: float) -> bool: ...
    def edit_clear(self) -> bool: ...
    def edit_fill(self, fill_type: Gimp.FillType) -> bool: ...
    def edit_gradient_fill(self, gradient_type: Gimp.GradientType, offset: float, supersample: bool, supersample_max_depth: int, supersample_threshold: float, dither: bool, x1: float, y1: float, x2: float, y2: float) -> bool: ...
    def edit_stroke_item(self, item: Gimp.Item) -> bool: ...
    def edit_stroke_selection(self) -> bool: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def equalize(self, mask_only: bool) -> bool: ...
    @staticmethod
    def feather(image: Gimp.Image, radius: float) -> bool: ...
    def fill(self, fill_type: Gimp.FillType) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    @staticmethod
    def float(image: Gimp.Image, drawables: list, offx: int, offy: int) -> Gimp.Layer: ...
    @staticmethod
    def flood(image: Gimp.Image) -> bool: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreground_extract(self, mode: Gimp.ForegroundExtractMode, mask: Gimp.Drawable) -> bool: ...
    def freeze_notify(self) -> None: ...
    def free_shadow(self) -> bool: ...
    def getv(self, names: list, values: list): ...
    def get_bpp(self) -> int: ...
    def get_buffer(self) -> Gegl.Buffer: ...
    @staticmethod
    def get_by_id(selection_id: int) -> Union[Gimp.Selection, None]: ...
    def get_color(self) -> tuple[bool, None]: ...
    def get_color_tag(self) -> Gimp.ColorTag: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_expanded(self) -> bool: ...
    def get_format(self) -> Babl.Object: ...
    def get_height(self) -> int: ...
    def get_id(self) -> int: ...
    def get_image(self) -> Gimp.Image: ...
    def get_lock_content(self) -> bool: ...
    def get_lock_position(self) -> bool: ...
    def get_lock_visibility(self) -> bool: ...
    def get_name(self) -> str: ...
    def get_offsets(self) -> tuple[bool, None, None]: ...
    def get_opacity(self) -> float: ...
    def get_parasite(self, name: str) -> Gimp.Parasite: ...
    def get_parasite_list(self) -> list: ...
    def get_parent(self) -> Gimp.Item: ...
    def get_pixel(self, x_coord: int, y_coord: int) -> tuple[list, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_shadow_buffer(self) -> Gegl.Buffer: ...
    def get_show_masked(self) -> bool: ...
    def get_sub_thumbnail(self, src_x: int, src_y: int, src_width: int, src_height: int, dest_width: int, dest_height: int, alpha: Gimp.PixbufTransparency) -> GdkPixbuf.Pixbuf: ...
    def get_sub_thumbnail_data(self, src_x: int, src_y: int, src_width: int, src_height: int, dest_width: int, dest_height: int) -> Union[list, tuple[None, None, None, None]]: ...
    def get_tattoo(self) -> int: ...
    def get_thumbnail(self, width: int, height: int, alpha: Gimp.PixbufTransparency) -> GdkPixbuf.Pixbuf: ...
    def get_thumbnail_data(self, width: int, height: int) -> Union[list, tuple[None, None, None, None]]: ...
    def get_thumbnail_format(self) -> Babl.Object: ...
    def get_visible(self) -> bool: ...
    def get_width(self) -> int: ...
    @staticmethod
    def grow(image: Gimp.Image, steps: int) -> bool: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_alpha(self) -> bool: ...
    def histogram(self, channel: Gimp.HistogramChannel, start_range: float, end_range: float) -> tuple[bool, None, None, None, None, None, None]: ...
    def hue_saturation(self, hue_range: Gimp.HueRange, hue_offset: float, lightness: float, saturation: float, overlap: float) -> bool: ...
    @staticmethod
    def id_is_channel(item_id: int) -> bool: ...
    @staticmethod
    def id_is_drawable(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer_mask(item_id: int) -> bool: ...
    @staticmethod
    def id_is_selection(item_id: int) -> bool: ...
    @staticmethod
    def id_is_text_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_valid(item_id: int) -> bool: ...
    @staticmethod
    def id_is_vectors(item_id: int) -> bool: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    @staticmethod
    def invert(image: Gimp.Image) -> bool: ...
    def is_channel(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    @staticmethod
    def is_empty(image: Gimp.Image) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_gray(self) -> bool: ...
    def is_group(self) -> bool: ...
    def is_indexed(self) -> bool: ...
    def is_layer(self) -> bool: ...
    def is_layer_mask(self) -> bool: ...
    def is_rgb(self) -> bool: ...
    def is_selection(self) -> bool: ...
    def is_text_layer(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def is_vectors(self) -> bool: ...
    def levels(self, channel: Gimp.HistogramChannel, low_input: float, high_input: float, clamp_input: bool, gamma: float, low_output: float, high_output: float, clamp_output: bool) -> bool: ...
    def levels_stretch(self) -> bool: ...
    def list_children(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def mask_bounds(self) -> tuple[bool, None, None, None, None]: ...
    def mask_intersect(self) -> tuple[bool, None, None, None, None]: ...
    def merge_shadow(self, undo: bool) -> bool: ...
    @staticmethod
    def new(image: Gimp.Image, name: str, width: int, height: int, opacity: float, color: Gimp.RGB) -> Gimp.Channel: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_component(image: Gimp.Image, component: Gimp.ChannelType, name: str) -> Gimp.Channel: ...
    @staticmethod
    def none(image: Gimp.Image) -> bool: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def offset(self, wrap_around: bool, fill_type: Gimp.OffsetType, offset_x: int, offset_y: int) -> bool: ...
    def override_property(self, property_id: int, name: str): ...
    def posterize(self, levels: int) -> bool: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    @staticmethod
    def save(image: Gimp.Image) -> Gimp.Channel: ...
    def set_color(self, color: Gimp.RGB) -> bool: ...
    def set_color_tag(self, color_tag: Gimp.ColorTag) -> bool: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_expanded(self, expanded: bool) -> bool: ...
    def set_lock_content(self, lock_content: bool) -> bool: ...
    def set_lock_position(self, lock_position: bool) -> bool: ...
    def set_lock_visibility(self, lock_visibility: bool) -> bool: ...
    def set_name(self, name: str) -> bool: ...
    def set_opacity(self, opacity: float) -> bool: ...
    def set_pixel(self, x_coord: int, y_coord: int, pixel: list) -> bool: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_show_masked(self, show_masked: bool) -> bool: ...
    def set_tattoo(self, tattoo: int) -> bool: ...
    def set_visible(self, visible: bool) -> bool: ...
    @staticmethod
    def sharpen(image: Gimp.Image) -> bool: ...
    @staticmethod
    def shrink(image: Gimp.Image, steps: int) -> bool: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def threshold(self, channel: Gimp.HistogramChannel, low_threshold: float, high_threshold: float) -> bool: ...
    def transform_2d(self, source_x: float, source_y: float, scale_x: float, scale_y: float, angle: float, dest_x: float, dest_y: float) -> Gimp.Item: ...
    def transform_flip(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_flip_simple(self, flip_type: Gimp.OrientationType, auto_center: bool, axis: float) -> Gimp.Item: ...
    def transform_matrix(self, coeff_0_0: float, coeff_0_1: float, coeff_0_2: float, coeff_1_0: float, coeff_1_1: float, coeff_1_2: float, coeff_2_0: float, coeff_2_1: float, coeff_2_2: float) -> Gimp.Item: ...
    def transform_perspective(self, x0: float, y0: float, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float) -> Gimp.Item: ...
    def transform_rotate(self, angle: float, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_rotate_simple(self, rotate_type: Gimp.RotationType, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_scale(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_shear(self, shear_type: Gimp.OrientationType, magnitude: float) -> Gimp.Item: ...
    def transform_translate(self, off_x: float, off_y: float) -> Gimp.Item: ...
    @staticmethod
    def translate(image: Gimp.Image, offx: int, offy: int) -> bool: ...
    def type(self) -> Gimp.ImageType: ...
    def type_with_alpha(self) -> Gimp.ImageType: ...
    def unref(self, *args, **kargs) -> None: ...
    def update(self, x: int, y: int, width: int, height: int) -> bool: ...
    @staticmethod
    def value(image: Gimp.Image, x: int, y: int) -> int: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class SelectionClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class SizeType(__gobject.GEnum):
    GIMP_PIXELS: int
    GIMP_POINTS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    PIXELS: int
    POINTS: int

class StackTraceMode(__gobject.GEnum):
    GIMP_STACK_TRACE_NEVER: int
    GIMP_STACK_TRACE_QUERY: int
    GIMP_STACK_TRACE_ALWAYS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ALWAYS: int
    NEVER: int
    QUERY: int

class StrokeMethod(__gobject.GEnum):
    GIMP_STROKE_LINE: int
    GIMP_STROKE_PAINT_METHOD: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    LINE: int
    PAINT_METHOD: int

class TextDirection(__gobject.GEnum):
    GIMP_TEXT_DIRECTION_LTR: int
    GIMP_TEXT_DIRECTION_RTL: int
    GIMP_TEXT_DIRECTION_TTB_RTL: int
    GIMP_TEXT_DIRECTION_TTB_RTL_UPRIGHT: int
    GIMP_TEXT_DIRECTION_TTB_LTR: int
    GIMP_TEXT_DIRECTION_TTB_LTR_UPRIGHT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    LTR: int
    RTL: int
    TTB_LTR: int
    TTB_LTR_UPRIGHT: int
    TTB_RTL: int
    TTB_RTL_UPRIGHT: int

class TextHintStyle(__gobject.GEnum):
    GIMP_TEXT_HINT_STYLE_NONE: int
    GIMP_TEXT_HINT_STYLE_SLIGHT: int
    GIMP_TEXT_HINT_STYLE_MEDIUM: int
    GIMP_TEXT_HINT_STYLE_FULL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    FULL: int
    MEDIUM: int
    NONE: int
    SLIGHT: int

class TextJustification(__gobject.GEnum):
    GIMP_TEXT_JUSTIFY_LEFT: int
    GIMP_TEXT_JUSTIFY_RIGHT: int
    GIMP_TEXT_JUSTIFY_CENTER: int
    GIMP_TEXT_JUSTIFY_FILL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CENTER: int
    FILL: int
    LEFT: int
    RIGHT: int

class ThumbnailProcedure(Procedure):
    def add_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_aux_argument(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_aux_argument_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def add_menu_path(self, menu_path: str): ...
    def add_return_value(self, pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def add_return_value_from_property(self, config: GObject.Object, prop_name: str) -> GObject.ParamSpec: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def create_config(self) -> Gimp.ProcedureConfig: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_install(self) -> None: ...
    def do_run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def do_set_sensitivity(self, sensitivity_mask: int) -> bool: ...
    def do_uninstall(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def extension_ready(self) -> None: ...
    def find_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_aux_argument(self, name: str) -> GObject.ParamSpec: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_return_value(self, name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_arguments(self) -> tuple[list, None]: ...
    def get_argument_sync(self, arg_name: str) -> Gimp.ArgumentSync: ...
    def get_authors(self) -> str: ...
    def get_aux_arguments(self) -> tuple[list, None]: ...
    def get_blurb(self) -> str: ...
    def get_copyright(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_date(self) -> str: ...
    def get_help(self) -> str: ...
    def get_help_id(self) -> str: ...
    def get_icon_file(self) -> Union[Gio.File, None]: ...
    def get_icon_name(self) -> Union[str, None]: ...
    def get_icon_pixbuf(self) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_type(self) -> Gimp.IconType: ...
    def get_image_types(self) -> str: ...
    def get_menu_label(self) -> str: ...
    def get_menu_paths(self) -> list: ...
    def get_name(self) -> str: ...
    def get_plug_in(self) -> Gimp.PlugIn: ...
    def get_proc_type(self) -> Gimp.PDBProcType: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_return_values(self) -> tuple[list, None]: ...
    def get_sensitivity_mask(self) -> int: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(plug_in: Gimp.PlugIn, name: str, proc_type: Gimp.PDBProcType, run_func: Gimp.RunThumbnailFunc, run_data) -> Gimp.Procedure: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def new_arguments(self) -> Gimp.ValueArray: ...
    def new_return_values(self, status: Gimp.PDBStatusType, error: error) -> Gimp.ValueArray: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run(self, args: Gimp.ValueArray) -> Gimp.ValueArray: ...
    def run_dispose(self) -> None: ...
    def set_argument_sync(self, arg_name: str, sync: Gimp.ArgumentSync): ...
    def set_attribution(self, authors: str, copyright: str, date: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_documentation(self, blurb: str, help: str, help_id: str): ...
    def set_icon_file(self, file: Gio.File = ...): ...
    def set_icon_name(self, icon_name: str = ...): ...
    def set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf = ...): ...
    def set_image_types(self, image_types: str): ...
    def set_menu_label(self, menu_label: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_sensitivity_mask(self, sensitivity_mask: int): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ThumbnailProcedureClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ThumbnailProcedurePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class TransferMode(__gobject.GEnum):
    GIMP_TRANSFER_SHADOWS: int
    GIMP_TRANSFER_MIDTONES: int
    GIMP_TRANSFER_HIGHLIGHTS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    HIGHLIGHTS: int
    MIDTONES: int
    SHADOWS: int

class TransformDirection(__gobject.GEnum):
    GIMP_TRANSFORM_FORWARD: int
    GIMP_TRANSFORM_BACKWARD: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BACKWARD: int
    FORWARD: int

class TransformResize(__gobject.GEnum):
    GIMP_TRANSFORM_RESIZE_ADJUST: int
    GIMP_TRANSFORM_RESIZE_CLIP: int
    GIMP_TRANSFORM_RESIZE_CROP: int
    GIMP_TRANSFORM_RESIZE_CROP_WITH_ASPECT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ADJUST: int
    CLIP: int
    CROP: int
    CROP_WITH_ASPECT: int

class Uint8Array(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Unit:
    @staticmethod
    def format_string(format: str, unit: Gimp.Unit) -> str: ...
    def get_abbreviation(self) -> str: ...
    def get_deletion_flag(self) -> bool: ...
    def get_digits(self) -> int: ...
    def get_factor(self) -> float: ...
    def get_identifier(self) -> str: ...
    @staticmethod
    def get_number_of_built_in_units() -> int: ...
    @staticmethod
    def get_number_of_units() -> int: ...
    def get_plural(self) -> str: ...
    def get_scaled_digits(self, resolution: float) -> int: ...
    def get_singular(self) -> str: ...
    def get_symbol(self) -> str: ...
    def is_metric(self) -> bool: ...
    @staticmethod
    def new(identifier: str, factor: float, digits: int, symbol: str, abbreviation: str, singular: str, plural: str) -> Gimp.Unit: ...
    def set_deletion_flag(self, deletion_flag: bool): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    __gsignals__: Incomplete

class ValueArray(__gi.Boxed):
    def append(self, value: GObject.Value) -> Gimp.ValueArray: ...
    def copy(self, *args, **kwargs) -> None: ...
    def index(self, index: int) -> GObject.Value: ...
    def insert(self, index: int, value: GObject.Value) -> Gimp.ValueArray: ...
    def length(self) -> int: ...
    @staticmethod
    def new(n_prealloced: int) -> Gimp.ValueArray: ...
    @staticmethod
    def new_from_values(values: list) -> Gimp.ValueArray: ...
    def prepend(self, value: GObject.Value) -> Gimp.ValueArray: ...
    def ref(self) -> Gimp.ValueArray: ...
    def remove(self, index: int) -> Gimp.ValueArray: ...
    def truncate(self, n_values: int): ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(n_prealloced: int) -> Gimp.ValueArray: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Vector2(__gi.Boxed):
    @staticmethod
    def add(vector1: Gimp.Vector2, vector2: Gimp.Vector2) -> Gimp.Vector2: ...
    def add_val(self, vector2: Gimp.Vector2) -> Gimp.Vector2: ...
    def copy(self, *args, **kwargs) -> None: ...
    def cross_product(self, vector2: Gimp.Vector2) -> Gimp.Vector2: ...
    def cross_product_val(self, vector2: Gimp.Vector2) -> Gimp.Vector2: ...
    def inner_product(self, vector2: Gimp.Vector2) -> float: ...
    def inner_product_val(self, vector2: Gimp.Vector2) -> float: ...
    def length(self) -> float: ...
    def length_val(self) -> float: ...
    def mul(self, factor: float): ...
    def mul_val(self, factor: float) -> Gimp.Vector2: ...
    def neg(self) -> None: ...
    def neg_val(self) -> Gimp.Vector2: ...
    @staticmethod
    def new(x: float, y: float) -> Gimp.Vector2: ...
    def normal(self) -> Gimp.Vector2: ...
    def normalize(self) -> None: ...
    def normalize_val(self) -> Gimp.Vector2: ...
    def normal_val(self) -> Gimp.Vector2: ...
    def rotate(self, alpha: float): ...
    def rotate_val(self, alpha: float) -> Gimp.Vector2: ...
    def set(self, x: float, y: float): ...
    @staticmethod
    def sub(vector1: Gimp.Vector2, vector2: Gimp.Vector2) -> Gimp.Vector2: ...
    def sub_val(self, vector2: Gimp.Vector2) -> Gimp.Vector2: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    x: Incomplete
    y: Incomplete

class Vector3(__gi.Boxed):
    @staticmethod
    def add(vector1: Gimp.Vector3, vector2: Gimp.Vector3) -> Gimp.Vector3: ...
    def add_val(self, vector2: Gimp.Vector3) -> Gimp.Vector3: ...
    def copy(self, *args, **kwargs) -> None: ...
    def cross_product(self, vector2: Gimp.Vector3) -> Gimp.Vector3: ...
    def cross_product_val(self, vector2: Gimp.Vector3) -> Gimp.Vector3: ...
    def inner_product(self, vector2: Gimp.Vector3) -> float: ...
    def inner_product_val(self, vector2: Gimp.Vector3) -> float: ...
    def length(self) -> float: ...
    def length_val(self) -> float: ...
    def mul(self, factor: float): ...
    def mul_val(self, factor: float) -> Gimp.Vector3: ...
    def neg(self) -> None: ...
    def neg_val(self) -> Gimp.Vector3: ...
    @staticmethod
    def new(x: float, y: float, z: float) -> Gimp.Vector3: ...
    def normalize(self) -> None: ...
    def normalize_val(self) -> Gimp.Vector3: ...
    def rotate(self, alpha: float, beta: float, gamma: float): ...
    def rotate_val(self, alpha: float, beta: float, gamma: float) -> Gimp.Vector3: ...
    def set(self, x: float, y: float, z: float): ...
    @staticmethod
    def sub(vector1: Gimp.Vector3, vector2: Gimp.Vector3) -> Gimp.Vector3: ...
    def sub_val(self, vector2: Gimp.Vector3) -> Gimp.Vector3: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    x: Incomplete
    y: Incomplete
    z: Incomplete

class Vector4(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    w: Incomplete
    x: Incomplete
    y: Incomplete
    z: Incomplete

class Vectors(Item):
    def attach_parasite(self, parasite: Gimp.Parasite) -> bool: ...
    def bezier_stroke_conicto(self, stroke_id: int, x0: float, y0: float, x1: float, y1: float) -> bool: ...
    def bezier_stroke_cubicto(self, stroke_id: int, x0: float, y0: float, x1: float, y1: float, x2: float, y2: float) -> bool: ...
    def bezier_stroke_lineto(self, stroke_id: int, x0: float, y0: float) -> bool: ...
    def bezier_stroke_new_ellipse(self, x0: float, y0: float, radius_x: float, radius_y: float, angle: float) -> int: ...
    def bezier_stroke_new_moveto(self, x0: float, y0: float) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def copy(self) -> Gimp.Vectors: ...
    def delete(self) -> bool: ...
    def detach_parasite(self, name: str) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    @staticmethod
    def export_to_file(image: Gimp.Image, file: Gio.File, vectors: Gimp.Vectors) -> bool: ...
    @staticmethod
    def export_to_string(image: Gimp.Image, vectors: Gimp.Vectors) -> str: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    @staticmethod
    def get_by_id(vectors_id: int) -> Union[Gimp.Vectors, None]: ...
    def get_color_tag(self) -> Gimp.ColorTag: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_expanded(self) -> bool: ...
    def get_id(self) -> int: ...
    def get_image(self) -> Gimp.Image: ...
    def get_lock_content(self) -> bool: ...
    def get_lock_position(self) -> bool: ...
    def get_lock_visibility(self) -> bool: ...
    def get_name(self) -> str: ...
    def get_parasite(self, name: str) -> Gimp.Parasite: ...
    def get_parasite_list(self) -> list: ...
    def get_parent(self) -> Gimp.Item: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_strokes(self) -> tuple[list, None]: ...
    def get_tattoo(self) -> int: ...
    def get_visible(self) -> bool: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    @staticmethod
    def id_is_channel(item_id: int) -> bool: ...
    @staticmethod
    def id_is_drawable(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_layer_mask(item_id: int) -> bool: ...
    @staticmethod
    def id_is_selection(item_id: int) -> bool: ...
    @staticmethod
    def id_is_text_layer(item_id: int) -> bool: ...
    @staticmethod
    def id_is_valid(item_id: int) -> bool: ...
    @staticmethod
    def id_is_vectors(item_id: int) -> bool: ...
    @staticmethod
    def import_from_file(image: Gimp.Image, file: Gio.File, merge: bool, scale: bool) -> tuple[bool, None]: ...
    @staticmethod
    def import_from_string(image: Gimp.Image, string: str, length: int, merge: bool, scale: bool) -> tuple[bool, None]: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_channel(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_group(self) -> bool: ...
    def is_layer(self) -> bool: ...
    def is_layer_mask(self) -> bool: ...
    def is_selection(self) -> bool: ...
    def is_text_layer(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def is_vectors(self) -> bool: ...
    def list_children(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(image: Gimp.Image, name: str) -> Gimp.Vectors: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_text_layer(image: Gimp.Image, layer: Gimp.Layer) -> Gimp.Vectors: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def remove_stroke(self, stroke_id: int) -> bool: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_color_tag(self, color_tag: Gimp.ColorTag) -> bool: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_expanded(self, expanded: bool) -> bool: ...
    def set_lock_content(self, lock_content: bool) -> bool: ...
    def set_lock_position(self, lock_position: bool) -> bool: ...
    def set_lock_visibility(self, lock_visibility: bool) -> bool: ...
    def set_name(self, name: str) -> bool: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_tattoo(self, tattoo: int) -> bool: ...
    def set_visible(self, visible: bool) -> bool: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def stroke_close(self, stroke_id: int) -> bool: ...
    def stroke_flip(self, stroke_id: int, flip_type: Gimp.OrientationType, axis: float) -> bool: ...
    def stroke_flip_free(self, stroke_id: int, x1: float, y1: float, x2: float, y2: float) -> bool: ...
    def stroke_get_length(self, stroke_id: int, precision: float) -> float: ...
    def stroke_get_points(self, stroke_id: int) -> tuple[Gimp.VectorsStrokeType, None, None]: ...
    def stroke_get_point_at_dist(self, stroke_id: int, dist: float, precision: float) -> tuple[bool, None, None, None, None]: ...
    def stroke_interpolate(self, stroke_id: int, precision: float) -> tuple[list, None, None]: ...
    def stroke_new_from_points(self, type: Gimp.VectorsStrokeType, controlpoints: list, closed: bool) -> int: ...
    def stroke_reverse(self, stroke_id: int) -> bool: ...
    def stroke_rotate(self, stroke_id: int, center_x: float, center_y: float, angle: float) -> bool: ...
    def stroke_scale(self, stroke_id: int, scale_x: float, scale_y: float) -> bool: ...
    def stroke_translate(self, stroke_id: int, off_x: int, off_y: int) -> bool: ...
    def thaw_notify(self) -> None: ...
    def transform_2d(self, source_x: float, source_y: float, scale_x: float, scale_y: float, angle: float, dest_x: float, dest_y: float) -> Gimp.Item: ...
    def transform_flip(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_flip_simple(self, flip_type: Gimp.OrientationType, auto_center: bool, axis: float) -> Gimp.Item: ...
    def transform_matrix(self, coeff_0_0: float, coeff_0_1: float, coeff_0_2: float, coeff_1_0: float, coeff_1_1: float, coeff_1_2: float, coeff_2_0: float, coeff_2_1: float, coeff_2_2: float) -> Gimp.Item: ...
    def transform_perspective(self, x0: float, y0: float, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float) -> Gimp.Item: ...
    def transform_rotate(self, angle: float, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_rotate_simple(self, rotate_type: Gimp.RotationType, auto_center: bool, center_x: float, center_y: float) -> Gimp.Item: ...
    def transform_scale(self, x0: float, y0: float, x1: float, y1: float) -> Gimp.Item: ...
    def transform_shear(self, shear_type: Gimp.OrientationType, magnitude: float) -> Gimp.Item: ...
    def transform_translate(self, off_x: float, off_y: float) -> Gimp.Item: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class VectorsClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class VectorsStrokeType(__gobject.GEnum):
    GIMP_VECTORS_STROKE_TYPE_BEZIER: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BEZIER: int

class __class__:
    def __delattr__(self, name) -> None: ...
    def __dir__(self) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getattr__(self, name) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, namespace, version: Incomplete | None = ...) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

__loader__: Incomplete
__path__: Incomplete
__spec__: Incomplete
