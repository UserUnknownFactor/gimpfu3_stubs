import gi as __gi
import gi.overrides.GObject as __gi_overrides_GObject
import gi.overrides.Gtk as __gi_overrides_Gtk
import gi.repository.Gimp as __gi_repository_Gimp
import gi.repository.Gtk as __gi_repository_Gtk
import gobject as __gobject
from _typeshed import Incomplete


COLOR_SELECTOR_BAR_SIZE: int
COLOR_SELECTOR_SIZE: int
ICON_APPLICATION_EXIT: str
ICON_ASPECT_LANDSCAPE: str
ICON_ASPECT_PORTRAIT: str
ICON_ATTACH: str
ICON_BUSINESS_CARD: str
ICON_CAP_BUTT: str
ICON_CAP_ROUND: str
ICON_CAP_SQUARE: str
ICON_CENTER: str
ICON_CENTER_HORIZONTAL: str
ICON_CENTER_VERTICAL: str
ICON_CHAIN_HORIZONTAL: str
ICON_CHAIN_HORIZONTAL_BROKEN: str
ICON_CHAIN_VERTICAL: str
ICON_CHAIN_VERTICAL_BROKEN: str
ICON_CHANNEL: str
ICON_CHANNEL_ALPHA: str
ICON_CHANNEL_BLUE: str
ICON_CHANNEL_GRAY: str
ICON_CHANNEL_GREEN: str
ICON_CHANNEL_INDEXED: str
ICON_CHANNEL_RED: str
ICON_CHAR_PICKER: str
ICON_CLOSE: str
ICON_CLOSE_ALL: str
ICON_COLORMAP: str
ICON_COLORS_DEFAULT: str
ICON_COLORS_SWAP: str
ICON_COLOR_PICKER_BLACK: str
ICON_COLOR_PICKER_GRAY: str
ICON_COLOR_PICKER_WHITE: str
ICON_COLOR_PICK_FROM_SCREEN: str
ICON_COLOR_SELECTOR_CMYK: str
ICON_COLOR_SELECTOR_TRIANGLE: str
ICON_COLOR_SELECTOR_WATER: str
ICON_COLOR_SPACE_LINEAR: str
ICON_COLOR_SPACE_NON_LINEAR: str
ICON_COLOR_SPACE_PERCEPTUAL: str
ICON_CONTROLLER: str
ICON_CONTROLLER_KEYBOARD: str
ICON_CONTROLLER_LINUX_INPUT: str
ICON_CONTROLLER_MIDI: str
ICON_CONTROLLER_WHEEL: str
ICON_CONVERT_GRAYSCALE: str
ICON_CONVERT_INDEXED: str
ICON_CONVERT_RGB: str
ICON_CURSOR: str
ICON_CURVE_FREE: str
ICON_CURVE_SMOOTH: str
ICON_DETACH: str
ICON_DIALOG_CHANNELS: str
ICON_DIALOG_DASHBOARD: str
ICON_DIALOG_DEVICE_STATUS: str
ICON_DIALOG_ERROR: str
ICON_DIALOG_IMAGES: str
ICON_DIALOG_INFORMATION: str
ICON_DIALOG_LAYERS: str
ICON_DIALOG_NAVIGATION: str
ICON_DIALOG_PATHS: str
ICON_DIALOG_QUESTION: str
ICON_DIALOG_RESHOW_FILTER: str
ICON_DIALOG_TOOLS: str
ICON_DIALOG_TOOL_OPTIONS: str
ICON_DIALOG_UNDO_HISTORY: str
ICON_DIALOG_WARNING: str
ICON_DISPLAY: str
ICON_DISPLAY_FILTER: str
ICON_DISPLAY_FILTER_CLIP_WARNING: str
ICON_DISPLAY_FILTER_COLORBLIND: str
ICON_DISPLAY_FILTER_CONTRAST: str
ICON_DISPLAY_FILTER_GAMMA: str
ICON_DISPLAY_FILTER_LCMS: str
ICON_DISPLAY_FILTER_PROOF: str
ICON_DOCUMENT_NEW: str
ICON_DOCUMENT_OPEN: str
ICON_DOCUMENT_OPEN_RECENT: str
ICON_DOCUMENT_PAGE_SETUP: str
ICON_DOCUMENT_PRINT: str
ICON_DOCUMENT_PRINT_RESOLUTION: str
ICON_DOCUMENT_PROPERTIES: str
ICON_DOCUMENT_REVERT: str
ICON_DOCUMENT_SAVE: str
ICON_DOCUMENT_SAVE_AS: str
ICON_DYNAMICS: str
ICON_EDIT: str
ICON_EDIT_CLEAR: str
ICON_EDIT_COPY: str
ICON_EDIT_CUT: str
ICON_EDIT_DELETE: str
ICON_EDIT_FIND: str
ICON_EDIT_PASTE: str
ICON_EDIT_PASTE_AS_NEW: str
ICON_EDIT_PASTE_INTO: str
ICON_EDIT_REDO: str
ICON_EDIT_UNDO: str
ICON_FILE_MANAGER: str
ICON_FILL_HORIZONTAL: str
ICON_FILL_VERTICAL: str
ICON_FOLDER_NEW: str
ICON_FONT: str
ICON_FORMAT_INDENT_LESS: str
ICON_FORMAT_INDENT_MORE: str
ICON_FORMAT_JUSTIFY_CENTER: str
ICON_FORMAT_JUSTIFY_FILL: str
ICON_FORMAT_JUSTIFY_LEFT: str
ICON_FORMAT_JUSTIFY_RIGHT: str
ICON_FORMAT_TEXT_BOLD: str
ICON_FORMAT_TEXT_DIRECTION_LTR: str
ICON_FORMAT_TEXT_DIRECTION_RTL: str
ICON_FORMAT_TEXT_DIRECTION_TTB_LTR: str
ICON_FORMAT_TEXT_DIRECTION_TTB_LTR_UPRIGHT: str
ICON_FORMAT_TEXT_DIRECTION_TTB_RTL: str
ICON_FORMAT_TEXT_DIRECTION_TTB_RTL_UPRIGHT: str
ICON_FORMAT_TEXT_ITALIC: str
ICON_FORMAT_TEXT_SPACING_LETTER: str
ICON_FORMAT_TEXT_SPACING_LINE: str
ICON_FORMAT_TEXT_STRIKETHROUGH: str
ICON_FORMAT_TEXT_UNDERLINE: str
ICON_FRAME: str
ICON_GEGL: str
ICON_GO_BOTTOM: str
ICON_GO_DOWN: str
ICON_GO_FIRST: str
ICON_GO_HOME: str
ICON_GO_LAST: str
ICON_GO_NEXT: str
ICON_GO_PREVIOUS: str
ICON_GO_TOP: str
ICON_GO_UP: str
ICON_GRADIENT_BILINEAR: str
ICON_GRADIENT_CONICAL_ASYMMETRIC: str
ICON_GRADIENT_CONICAL_SYMMETRIC: str
ICON_GRADIENT_LINEAR: str
ICON_GRADIENT_RADIAL: str
ICON_GRADIENT_SHAPEBURST_ANGULAR: str
ICON_GRADIENT_SHAPEBURST_DIMPLED: str
ICON_GRADIENT_SHAPEBURST_SPHERICAL: str
ICON_GRADIENT_SPIRAL_ANTICLOCKWISE: str
ICON_GRADIENT_SPIRAL_CLOCKWISE: str
ICON_GRADIENT_SQUARE: str
ICON_GRAVITY_EAST: str
ICON_GRAVITY_NORTH: str
ICON_GRAVITY_NORTH_EAST: str
ICON_GRAVITY_NORTH_WEST: str
ICON_GRAVITY_SOUTH: str
ICON_GRAVITY_SOUTH_EAST: str
ICON_GRAVITY_SOUTH_WEST: str
ICON_GRAVITY_WEST: str
ICON_GRID: str
ICON_HELP: str
ICON_HELP_ABOUT: str
ICON_HELP_USER_MANUAL: str
ICON_HISTOGRAM: str
ICON_HISTOGRAM_LINEAR: str
ICON_HISTOGRAM_LOGARITHMIC: str
ICON_IMAGE: str
ICON_IMAGE_OPEN: str
ICON_IMAGE_RELOAD: str
ICON_INPUT_DEVICE: str
ICON_INVERT: str
ICON_JOIN_BEVEL: str
ICON_JOIN_MITER: str
ICON_JOIN_ROUND: str
ICON_LAYER: str
ICON_LAYER_ANCHOR: str
ICON_LAYER_FLOATING_SELECTION: str
ICON_LAYER_MASK: str
ICON_LAYER_MERGE_DOWN: str
ICON_LAYER_TEXT_LAYER: str
ICON_LAYER_TO_IMAGESIZE: str
ICON_LINKED: str
ICON_LIST: str
ICON_LIST_ADD: str
ICON_LIST_REMOVE: str
ICON_LOCK: str
ICON_LOCK_ALPHA: str
ICON_LOCK_CONTENT: str
ICON_LOCK_MULTI: str
ICON_LOCK_POSITION: str
ICON_LOCK_VISIBILITY: str
ICON_MARKER: str
ICON_MENU_LEFT: str
ICON_MENU_RIGHT: str
ICON_OBJECT_DUPLICATE: str
ICON_OBJECT_FLIP_HORIZONTAL: str
ICON_OBJECT_FLIP_VERTICAL: str
ICON_OBJECT_RESIZE: str
ICON_OBJECT_ROTATE_180: str
ICON_OBJECT_ROTATE_270: str
ICON_OBJECT_ROTATE_90: str
ICON_OBJECT_SCALE: str
ICON_PALETTE: str
ICON_PATH: str
ICON_PATH_STROKE: str
ICON_PATTERN: str
ICON_PIVOT_CENTER: str
ICON_PIVOT_EAST: str
ICON_PIVOT_NORTH: str
ICON_PIVOT_NORTH_EAST: str
ICON_PIVOT_NORTH_WEST: str
ICON_PIVOT_SOUTH: str
ICON_PIVOT_SOUTH_EAST: str
ICON_PIVOT_SOUTH_WEST: str
ICON_PIVOT_WEST: str
ICON_PLUGIN: str
ICON_PREFERENCES_SYSTEM: str
ICON_PROCESS_STOP: str
ICON_QUICK_MASK_OFF: str
ICON_QUICK_MASK_ON: str
ICON_RECORD: str
ICON_RESET: str
ICON_SAMPLE_POINT: str
ICON_SELECTION: str
ICON_SELECTION_ADD: str
ICON_SELECTION_ALL: str
ICON_SELECTION_BORDER: str
ICON_SELECTION_GROW: str
ICON_SELECTION_INTERSECT: str
ICON_SELECTION_NONE: str
ICON_SELECTION_REPLACE: str
ICON_SELECTION_SHRINK: str
ICON_SELECTION_STROKE: str
ICON_SELECTION_SUBTRACT: str
ICON_SELECTION_TO_CHANNEL: str
ICON_SELECTION_TO_PATH: str
ICON_SHAPE_CIRCLE: str
ICON_SHAPE_DIAMOND: str
ICON_SHAPE_SQUARE: str
ICON_SHRED: str
ICON_SMARTPHONE: str
ICON_SYMMETRY: str
ICON_SYSTEM_RUN: str
ICON_TEMPLATE: str
ICON_TEXTURE: str
ICON_TOOL_AIRBRUSH: str
ICON_TOOL_ALIGN: str
ICON_TOOL_BLUR: str
ICON_TOOL_BRIGHTNESS_CONTRAST: str
ICON_TOOL_BUCKET_FILL: str
ICON_TOOL_BY_COLOR_SELECT: str
ICON_TOOL_CAGE: str
ICON_TOOL_CLONE: str
ICON_TOOL_COLORIZE: str
ICON_TOOL_COLOR_BALANCE: str
ICON_TOOL_COLOR_PICKER: str
ICON_TOOL_COLOR_TEMPERATURE: str
ICON_TOOL_CROP: str
ICON_TOOL_CURVES: str
ICON_TOOL_DESATURATE: str
ICON_TOOL_DODGE: str
ICON_TOOL_ELLIPSE_SELECT: str
ICON_TOOL_ERASER: str
ICON_TOOL_EXPOSURE: str
ICON_TOOL_FLIP: str
ICON_TOOL_FOREGROUND_SELECT: str
ICON_TOOL_FREE_SELECT: str
ICON_TOOL_FUZZY_SELECT: str
ICON_TOOL_GRADIENT: str
ICON_TOOL_HANDLE_TRANSFORM: str
ICON_TOOL_HEAL: str
ICON_TOOL_HUE_SATURATION: str
ICON_TOOL_INK: str
ICON_TOOL_ISCISSORS: str
ICON_TOOL_LEVELS: str
ICON_TOOL_MEASURE: str
ICON_TOOL_MOVE: str
ICON_TOOL_MYPAINT_BRUSH: str
ICON_TOOL_N_POINT_DEFORMATION: str
ICON_TOOL_OFFSET: str
ICON_TOOL_PAINTBRUSH: str
ICON_TOOL_PAINT_SELECT: str
ICON_TOOL_PATH: str
ICON_TOOL_PENCIL: str
ICON_TOOL_PERSPECTIVE: str
ICON_TOOL_PERSPECTIVE_CLONE: str
ICON_TOOL_POSTERIZE: str
ICON_TOOL_PRESET: str
ICON_TOOL_RECT_SELECT: str
ICON_TOOL_ROTATE: str
ICON_TOOL_SCALE: str
ICON_TOOL_SEAMLESS_CLONE: str
ICON_TOOL_SHADOWS_HIGHLIGHTS: str
ICON_TOOL_SHEAR: str
ICON_TOOL_SMUDGE: str
ICON_TOOL_TEXT: str
ICON_TOOL_THRESHOLD: str
ICON_TOOL_TRANSFORM_3D: str
ICON_TOOL_UNIFIED_TRANSFORM: str
ICON_TOOL_WARP: str
ICON_TOOL_ZOOM: str
ICON_TRANSFORM_3D_CAMERA: str
ICON_TRANSFORM_3D_MOVE: str
ICON_TRANSFORM_3D_ROTATE: str
ICON_TRANSPARENCY: str
ICON_VIDEO: str
ICON_VIEW_FULLSCREEN: str
ICON_VIEW_REFRESH: str
ICON_VISIBLE: str
ICON_WEB: str
ICON_WILBER: str
ICON_WILBER_EEK: str
ICON_WINDOW_CLOSE: str
ICON_WINDOW_MOVE_TO_SCREEN: str
ICON_WINDOW_NEW: str
ICON_ZOOM_FIT_BEST: str
ICON_ZOOM_FOLLOW_WINDOW: str
ICON_ZOOM_IN: str
ICON_ZOOM_ORIGINAL: str
ICON_ZOOM_OUT: str

def cairo_set_focus_line_pattern(cr: cairo.Context, widget: Gtk.Widget) -> bool: ...
def cairo_surface_create_from_pixbuf(pixbuf: GdkPixbuf.Pixbuf) -> cairo.Surface: ...
def context_help(widget: Gtk.Widget): ...
def coordinates_new(unit: Gimp.Unit, unit_format: str, menu_show_pixels: bool, menu_show_percent: bool, spinbutton_width: int, update_policy: GimpUi.SizeEntryUpdatePolicy, chainbutton_active: bool, chain_constrains_ratio: bool, xlabel: str, x: float, xres: float, lower_boundary_x: float, upper_boundary_x: float, xsize_0: float, xsize_100: float, ylabel: str, y: float, yres: float, lower_boundary_y: float, upper_boundary_y: float, ysize_0: float, ysize_100: float) -> Gtk.Widget: ...
def double_adjustment_update(adjustment: Gtk.Adjustment, data: Incomplete | None = ...): ...
def enum_icon_box_new(enum_type: GType, icon_prefix: str, icon_size: Gtk.IconSize, callback: GObject.Callback, callback_data) -> tuple[Gtk.Widget, None]: ...
def enum_icon_box_new_with_range(enum_type: GType, minimum: int, maximum: int, icon_prefix: str, icon_size: Gtk.IconSize, callback: GObject.Callback, callback_data) -> tuple[Gtk.Widget, None]: ...
def enum_icon_box_set_child_padding(icon_box: Gtk.Widget, xpad: int, ypad: int): ...
def enum_radio_box_new(enum_type: GType, callback: GObject.Callback, callback_data) -> tuple[Gtk.Widget, None]: ...
def enum_radio_box_new_with_range(enum_type: GType, minimum: int, maximum: int, callback: GObject.Callback, callback_data) -> tuple[Gtk.Widget, None]: ...
def enum_radio_frame_new(enum_type: GType, label_widget: Gtk.Widget, callback: GObject.Callback, callback_data) -> tuple[Gtk.Widget, None]: ...
def enum_radio_frame_new_with_range(enum_type: GType, minimum: int, maximum: int, label_widget: Gtk.Widget, callback: GObject.Callback, callback_data) -> tuple[Gtk.Widget, None]: ...
def event_triggers_context_menu(event: Gdk.Event, on_release: bool) -> bool: ...
def export_dialog_get_content_area(dialog: Gtk.Widget) -> Gtk.Widget: ...
def export_dialog_new(format_name: str, role: str, help_id: str) -> Gtk.Widget: ...
def export_image(image: Gimp.Image, drawables: list, format_name: str, capabilities: GimpUi.ExportCapabilities) -> GimpUi.ExportReturn: ...
def float_adjustment_update(adjustment: Gtk.Adjustment, data: Incomplete | None = ...): ...
def get_display_window(display: Gimp.Display) -> Union[Gdk.Window, None]: ...
def get_monitor_at_pointer() -> Gdk.Monitor: ...
def get_progress_window() -> Gdk.Window: ...
def grid_attach_aligned(grid: Gtk.Grid, left: int, top: int, label_text: str, xalign: float, yalign: float, widget: Gtk.Widget, columns: int) -> Gtk.Widget: ...
def help_connect(widget: Gtk.Widget, help_func: GimpUi.HelpFunc, help_id: str, help_data: Incomplete | None = ...): ...
def help_id_quark() -> int: ...
def help_set_help_data(widget: Gtk.Widget, tooltip: str, help_id: str): ...
def help_set_help_data_with_markup(widget: Gtk.Widget, tooltip: str, help_id: str): ...
def icons_init() -> None: ...
def icons_set_icon_theme(path: Gio.File): ...
def init(prog_name: str): ...
def int_adjustment_update(adjustment: Gtk.Adjustment, data: Incomplete | None = ...): ...
def int_radio_group_set_active(radio_button: Gtk.RadioButton, item_data: int): ...
def monitor_get_color_profile(monitor: Gdk.Monitor) -> Union[Gimp.ColorProfile, None]: ...
def proc_view_new(procedure_name: str) -> Gtk.Widget: ...
def prop_boolean_combo_box_new(config: GObject.Object, property_name: str, true_text: str, false_text: str) -> Gtk.Widget: ...
def prop_boolean_radio_frame_new(config: GObject.Object, property_name: str, title: str, true_text: str, false_text: str) -> Gtk.Widget: ...
def prop_check_button_new(config: GObject.Object, property_name: str, label: str) -> Gtk.Widget: ...
def prop_color_area_new(config: GObject.Object, property_name: str, width: int, height: int, type: GimpUi.ColorAreaType) -> Gtk.Widget: ...
def prop_color_select_new(config: GObject.Object, property_name: str, width: int, height: int, type: GimpUi.ColorAreaType) -> Gtk.Widget: ...
def prop_coordinates_connect(config: GObject.Object, x_property_name: str, y_property_name: str, unit_property_name: str, sizeentry: Gtk.Widget, chainbutton: Gtk.Widget, xresolution: float, yresolution: float) -> bool: ...
def prop_coordinates_new(config: GObject.Object, x_property_name: str, y_property_name: str, unit_property_name: str, unit_format: str, update_policy: GimpUi.SizeEntryUpdatePolicy, xresolution: float, yresolution: float, has_chainbutton: bool) -> Gtk.Widget: ...
def prop_entry_new(config: GObject.Object, property_name: str, max_len: int) -> Gtk.Widget: ...
def prop_enum_check_button_new(config: GObject.Object, property_name: str, label: str, false_value: int, true_value: int) -> Gtk.Widget: ...
def prop_enum_combo_box_new(config: GObject.Object, property_name: str, minimum: int, maximum: int) -> Gtk.Widget: ...
def prop_enum_icon_box_new(config: GObject.Object, property_name: str, icon_prefix: str, minimum: int, maximum: int) -> Gtk.Widget: ...
def prop_enum_label_new(config: GObject.Object, property_name: str) -> Gtk.Widget: ...
def prop_enum_radio_box_new(config: GObject.Object, property_name: str, minimum: int, maximum: int) -> Gtk.Widget: ...
def prop_enum_radio_frame_new(config: GObject.Object, property_name: str, title: str, minimum: int, maximum: int) -> Gtk.Widget: ...
def prop_expander_new(config: GObject.Object, property_name: str, label: str) -> Gtk.Widget: ...
def prop_file_chooser_button_new(config: GObject.Object, property_name: str, title: str, action: Gtk.FileChooserAction) -> Gtk.Widget: ...
def prop_file_chooser_button_new_with_dialog(config: GObject.Object, property_name: str, dialog: Gtk.Widget) -> Gtk.Widget: ...
def prop_hscale_new(config: GObject.Object, property_name: str, step_increment: float, page_increment: float, digits: int) -> Gtk.Widget: ...
def prop_icon_image_new(config: GObject.Object, property_name: str, icon_size: Gtk.IconSize) -> Gtk.Widget: ...
def prop_int_combo_box_new(config: GObject.Object, property_name: str, store: GimpUi.IntStore) -> Gtk.Widget: ...
def prop_int_radio_frame_new(config: GObject.Object, property_name: str, title: str, store: GimpUi.IntStore) -> Gtk.Widget: ...
def prop_label_color_new(config: GObject.Object, property_name: str, editable: bool) -> Gtk.Widget: ...
def prop_label_entry_new(config: GObject.Object, property_name: str, max_len: int) -> Gtk.Widget: ...
def prop_label_new(config: GObject.Object, property_name: str) -> Gtk.Widget: ...
def prop_label_spin_new(config: GObject.Object, property_name: str, digits: int) -> Gtk.Widget: ...
def prop_memsize_entry_new(config: GObject.Object, property_name: str) -> Gtk.Widget: ...
def prop_path_editor_new(config: GObject.Object, path_property_name: str, writable_property_name: str, filechooser_title: str) -> Gtk.Widget: ...
def prop_pointer_combo_box_new(config: GObject.Object, property_name: str, store: GimpUi.IntStore) -> Gtk.Widget: ...
def prop_scale_entry_new(config: GObject.Object, property_name: str, label: str, factor: float, limit_scale: bool, lower_limit: float, upper_limit: float) -> Gtk.Widget: ...
def prop_size_entry_new(config: GObject.Object, property_name: str, property_is_pixel: bool, unit_property_name: str, unit_format: str, update_policy: GimpUi.SizeEntryUpdatePolicy, resolution: float) -> Gtk.Widget: ...
def prop_spin_button_new(config: GObject.Object, property_name: str, step_increment: float, page_increment: float, digits: int) -> Gtk.Widget: ...
def prop_spin_scale_new(config: GObject.Object, property_name: str, step_increment: float, page_increment: float, digits: int) -> Gtk.Widget: ...
def prop_string_combo_box_new(config: GObject.Object, property_name: str, model: Gtk.TreeModel, id_column: int, label_column: int) -> Gtk.Widget: ...
def prop_switch_new(config: GObject.Object, property_name: str, label: str) -> tuple[Gtk.Widget, None, None]: ...
def prop_text_buffer_new(config: GObject.Object, property_name: str, max_len: int) -> Gtk.TextBuffer: ...
def prop_unit_combo_box_new(config: GObject.Object, property_name: str) -> Gtk.Widget: ...
def prop_widget_set_factor(widget: Gtk.Widget, factor: float, step_increment: float, page_increment: float, digits: int): ...
def query_boolean_box(title: str, parent: Gtk.Widget, help_func: GimpUi.HelpFunc, help_id: str, icon_name: str, message: str, true_button: str, false_button: str, object: GObject.Object, signal: str, callback: GimpUi.QueryBooleanCallback, data) -> Gtk.Widget: ...
def query_double_box(title: str, parent: Gtk.Widget, help_func: GimpUi.HelpFunc, help_id: str, message: str, initial: float, lower: float, upper: float, digits: int, object: GObject.Object, signal: str, callback: GimpUi.QueryDoubleCallback, data) -> Gtk.Widget: ...
def query_int_box(title: str, parent: Gtk.Widget, help_func: GimpUi.HelpFunc, help_id: str, message: str, initial: int, lower: int, upper: int, object: GObject.Object, signal: str, callback: GimpUi.QueryIntCallback, data) -> Gtk.Widget: ...
def query_size_box(title: str, parent: Gtk.Widget, help_func: GimpUi.HelpFunc, help_id: str, message: str, initial: float, lower: float, upper: float, digits: int, unit: Gimp.Unit, resolution: float, dot_for_dot: bool, object: GObject.Object, signal: str, callback: GimpUi.QuerySizeCallback, data) -> Gtk.Widget: ...
def query_string_box(title: str, parent: Gtk.Widget, help_func: GimpUi.HelpFunc, help_id: str, message: str, initial: str, object: GObject.Object, signal: str, callback: GimpUi.QueryStringCallback, data) -> Gtk.Widget: ...
def radio_button_update(widget: Gtk.Widget, data: Incomplete | None = ...): ...
def random_seed_new(seed: int, random_seed: bool) -> Gtk.Widget: ...
def scroll_adjustment_values(sevent: Gdk.EventScroll, hadj: Gtk.Adjustment, vadj: Gtk.Adjustment) -> tuple[None, None]: ...
def standard_help_func(help_id: str, help_data: Incomplete | None = ...): ...
def toggle_button_update(widget: Gtk.Widget, data: Incomplete | None = ...): ...
def uint_adjustment_update(adjustment: Gtk.Adjustment, data: Incomplete | None = ...): ...
def widgets_error_quark() -> int: ...
def widget_get_color_profile(widget: Gtk.Widget) -> Union[Gimp.ColorProfile, None]: ...
def widget_get_color_transform(widget: Gtk.Widget, config: Gimp.ColorConfig, src_profile: Gimp.ColorProfile, src_format: Babl.Object, dest_format: Babl.Object, softproof_profile: Gimp.ColorProfile, proof_intent: Gimp.ColorRenderingIntent, proof_bpc: bool) -> Union[Gimp.ColorTransform, None]: ...
def widget_get_monitor(widget: Gtk.Widget) -> Gdk.Monitor: ...
def widget_track_monitor(widget: Gtk.Widget, monitor_changed_callback: GObject.Callback, user_data: Incomplete | None = ...): ...
def window_set_transient(window: Gtk.Window): ...
def window_set_transient_for_display(window: Gtk.Window, display: Gimp.Display): ...
def zoom_button_new(model: GimpUi.ZoomModel, zoom_type: GimpUi.ZoomType, icon_size: Gtk.IconSize) -> Gtk.Widget: ...


class Preview(__gi_overrides_Gtk.Box):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self) -> None: ...
    def do_draw_buffer(self, buffer: list, rowstride: int): ...
    def do_draw_thumb(self, area: GimpUi.PreviewArea, width: int, height: int): ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_invalidated(self) -> None: ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_cursor(self) -> None: ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_transform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_untransform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self) -> None: ...
    def draw_buffer(self, buffer: list, rowstride: int): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> GimpUi.PreviewArea: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_bounds(self) -> tuple[None, None, None, None]: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_controls(self) -> Gtk.Box: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_default_cursor(self) -> Gdk.Cursor: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame(self) -> Gtk.AspectFrame: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_grid(self) -> Gtk.Grid: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_offsets(self) -> tuple[None, None]: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size(self) -> tuple[None, None]: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_update(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def invalidate(self) -> None: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(orientation: Gtk.Orientation, spacing: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_bounds(self, xmin: int, ymin: int, xmax: int, ymax: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_default_cursor(self, cursor: Gdk.Cursor): ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_offsets(self, xoff: int, yoff: int): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size(self, width: int, height: int): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_update(self, update: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def transform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def untransform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> GimpUi.Preview: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> GimpUi.Preview: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class AspectPreview(Preview):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self) -> None: ...
    def do_draw_buffer(self, buffer: list, rowstride: int): ...
    def do_draw_thumb(self, area: GimpUi.PreviewArea, width: int, height: int): ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_invalidated(self) -> None: ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_cursor(self) -> None: ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_transform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_untransform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self) -> None: ...
    def draw_buffer(self, buffer: list, rowstride: int): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> GimpUi.PreviewArea: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_bounds(self) -> tuple[None, None, None, None]: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_controls(self) -> Gtk.Box: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_default_cursor(self) -> Gdk.Cursor: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame(self) -> Gtk.AspectFrame: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_grid(self) -> Gtk.Grid: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_offsets(self) -> tuple[None, None]: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size(self) -> tuple[None, None]: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_update(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def invalidate(self) -> None: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(orientation: Gtk.Orientation, spacing: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_drawable(drawable: Gimp.Drawable) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_bounds(self, xmin: int, ymin: int, xmax: int, ymax: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_default_cursor(self, cursor: Gdk.Cursor): ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_offsets(self, xoff: int, yoff: int): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size(self, width: int, height: int): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_update(self, update: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def transform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def untransform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> GimpUi.AspectPreview: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> GimpUi.AspectPreview: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class AspectPreviewClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class AspectPreviewPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class AspectType(__gobject.GEnum):
    GIMP_ASPECT_SQUARE: int
    GIMP_ASPECT_PORTRAIT: int
    GIMP_ASPECT_LANDSCAPE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    LANDSCAPE: int
    PORTRAIT: int
    SQUARE: int

class Browser(__gi_overrides_Gtk.Paned):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add1(self, child: Gtk.Widget): ...
    def add2(self, child: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_accept_position(self) -> bool: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_cancel_position(self) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_cycle_child_focus(self, reverse: bool) -> bool: ...
    def do_cycle_handle_focus(self, reverse: bool) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_move_handle(self, scroll: Gtk.ScrollType) -> bool: ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_search(self, search_string: str, search_type: int): ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_toggle_handle_focus(self) -> bool: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child1(self) -> Union[Gtk.Widget, None]: ...
    def get_child2(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_handle_window(self) -> Gdk.Window: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_left_vbox(self) -> Gtk.Box: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> int: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_right_vbox(self) -> Gtk.Box: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_wide_handle(self) -> bool: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack1(self, child, resize: bool = ..., shrink: bool = ...) -> None: ...
    def pack2(self, child, resize: bool = ..., shrink: bool = ...) -> None: ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_position(self, position: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_search_summary(self, summary: str): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_wide_handle(self, wide: bool): ...
    def set_widget(self, widget: Gtk.Widget): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_message(self, message: str): ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class BrowserClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    search: Incomplete

class BrowserPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class SelectButton(__gi_overrides_Gtk.Box):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def close_popup(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(orientation: Gtk.Orientation, spacing: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    temp_callback: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class BrushSelectButton(SelectButton):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def close_popup(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_brush_set(self, brush_name: str, opacity: float, spacing: int, paint_mode: Gimp.LayerMode, width: int, height: int, mask_data: int, dialog_closing: bool): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_brush(self) -> tuple[str, None, None, None]: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(title: str, brush_name: str, opacity: float, spacing: int, paint_mode: Gimp.LayerMode) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_brush(self, brush_name: str, opacity: float, spacing: int, paint_mode: Gimp.LayerMode): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    temp_callback: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class BrushSelectButtonClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    brush_set: Incomplete
    parent_class: Incomplete

class BrushSelectButtonPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class BusyBox(__gi_overrides_Gtk.Box):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_message(self) -> str: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(message: str) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_message(self, message: str): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class BusyBoxClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class BusyBoxPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Button(__gi_overrides_Gtk.Button):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clicked(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate(self) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_clicked(self) -> None: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter(self) -> None: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_extended_clicked(self, modifier_state: Gdk.ModifierType): ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave(self) -> None: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_pressed(self) -> None: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_released(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_set_related_action(self, action: Gtk.Action): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def enter(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def extended_clicked(self, modifier_state: Gdk.ModifierType): ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_action_name(self) -> Union[str, None]: ...
    def get_action_target_value(self) -> GLib.Variant: ...
    def get_alignment(self) -> tuple[None, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_always_show_image(self) -> bool: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_event_window(self) -> Gdk.Window: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self, *args, **kwargs) -> None: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_image(self) -> Union[Gtk.Widget, None]: ...
    def get_image_position(self) -> Gtk.PositionType: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> str: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_related_action(self) -> Gtk.Action: ...
    def get_relief(self) -> Gtk.ReliefStyle: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_use_action_appearance(self) -> bool: ...
    def get_use_stock(self) -> bool: ...
    def get_use_underline(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def leave(self) -> None: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_icon_name(icon_name: str, size: int) -> Gtk.Widget: ...
    @staticmethod
    def new_from_stock(stock_id: str) -> Gtk.Widget: ...
    @staticmethod
    def new_with_label(label: str) -> Gtk.Widget: ...
    @staticmethod
    def new_with_mnemonic(label: str) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def pressed(self) -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def released(self) -> None: ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_action_name(self, action_name: str = ...): ...
    def set_action_target_value(self, target_value: GLib.Variant = ...): ...
    def set_alignment(self, xalign: float, yalign: float): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_always_show_image(self, always_show: bool): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_detailed_action_name(self, detailed_action_name: str): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, *args, **kwargs) -> None: ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_image(self, image: Gtk.Widget = ...): ...
    def set_image_position(self, position: Gtk.PositionType): ...
    def set_label(self, label: str): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_related_action(self, action: Gtk.Action): ...
    def set_relief(self, relief: Gtk.ReliefStyle): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_use_action_appearance(self, use_appearance: bool): ...
    def set_use_stock(self, use_stock: bool): ...
    def set_use_underline(self, use_underline: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def sync_action_properties(self, action: Gtk.Action = ...): ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    bin: Incomplete
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ButtonClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    extended_clicked: Incomplete
    parent_class: Incomplete

class ButtonPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class CellRendererColor(__gi_repository_Gtk.CellRenderer):
    def activate(self, event: Gdk.Event, widget: Gtk.Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState) -> bool: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate(self, event: Gdk.Event, widget: Gtk.Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState) -> bool: ...
    def do_editing_canceled(self) -> None: ...
    def do_editing_started(self, editable: Gtk.CellEditable, path: str): ...
    def do_get_aligned_area(self, widget: Gtk.Widget, flags: Gtk.CellRendererState, cell_area: Gdk.Rectangle) -> Gdk.Rectangle: ...
    def do_get_preferred_height(self, widget: Gtk.Widget) -> tuple[None, None]: ...
    def do_get_preferred_height_for_width(self, widget: Gtk.Widget, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self, widget: Gtk.Widget) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, widget: Gtk.Widget, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_get_size(self, widget: Gtk.Widget, cell_area: Gdk.Rectangle) -> tuple[None, None, None, None]: ...
    def do_render(self, cr: cairo.Context, widget: Gtk.Widget, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState): ...
    def do_start_editing(self, event: Gdk.Event, widget: Gtk.Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState) -> Union[Gtk.CellEditable, None]: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_aligned_area(self, widget: Gtk.Widget, flags: Gtk.CellRendererState, cell_area: Gdk.Rectangle) -> Gdk.Rectangle: ...
    def get_alignment(self) -> tuple[None, None]: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_fixed_size(self) -> tuple[None, None]: ...
    def get_padding(self) -> tuple[None, None]: ...
    def get_preferred_height(self, widget: Gtk.Widget) -> tuple[None, None]: ...
    def get_preferred_height_for_width(self, widget: Gtk.Widget, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self, widget: Gtk.Widget) -> tuple[None, None]: ...
    def get_preferred_width(self, widget: Gtk.Widget) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, widget: Gtk.Widget, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_sensitive(self) -> bool: ...
    def get_size(self, widget: Gtk.Widget, cell_area: Gdk.Rectangle) -> tuple[None, None, None, None]: ...
    def get_state(self, widget: Gtk.Widget, cell_state: Gtk.CellRendererState) -> Gtk.StateFlags: ...
    def get_visible(self) -> bool: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_activatable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new() -> Gtk.CellRenderer: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def render(self, cr: cairo.Context, widget: Gtk.Widget, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_accessible_type(self, type: GType): ...
    def set_alignment(self, xalign: float, yalign: float): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_fixed_size(self, width: int, height: int): ...
    def set_padding(self, xpad: int, ypad: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_sensitive(self, sensitive: bool): ...
    def set_visible(self, visible: bool): ...
    def start_editing(self, event: Gdk.Event, widget: Gtk.Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState) -> Union[Gtk.CellEditable, None]: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_editing(self, canceled: bool): ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class CellRendererColorClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class CellRendererColorPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class CellRendererToggle(__gi_repository_Gtk.CellRendererToggle):
    def activate(self, event: Gdk.Event, widget: Gtk.Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState) -> bool: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def clicked(self, path: str, state: Gdk.ModifierType): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate(self, event: Gdk.Event, widget: Gtk.Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState) -> bool: ...
    def do_clicked(self, path: str, state: Gdk.ModifierType): ...
    def do_editing_canceled(self) -> None: ...
    def do_editing_started(self, editable: Gtk.CellEditable, path: str): ...
    def do_get_aligned_area(self, widget: Gtk.Widget, flags: Gtk.CellRendererState, cell_area: Gdk.Rectangle) -> Gdk.Rectangle: ...
    def do_get_preferred_height(self, widget: Gtk.Widget) -> tuple[None, None]: ...
    def do_get_preferred_height_for_width(self, widget: Gtk.Widget, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self, widget: Gtk.Widget) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, widget: Gtk.Widget, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_get_size(self, widget: Gtk.Widget, cell_area: Gdk.Rectangle) -> tuple[None, None, None, None]: ...
    def do_render(self, cr: cairo.Context, widget: Gtk.Widget, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState): ...
    def do_start_editing(self, event: Gdk.Event, widget: Gtk.Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState) -> Union[Gtk.CellEditable, None]: ...
    def do_toggled(self, path: str): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_activatable(self) -> bool: ...
    def get_active(self) -> bool: ...
    def get_aligned_area(self, widget: Gtk.Widget, flags: Gtk.CellRendererState, cell_area: Gdk.Rectangle) -> Gdk.Rectangle: ...
    def get_alignment(self) -> tuple[None, None]: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_fixed_size(self) -> tuple[None, None]: ...
    def get_padding(self) -> tuple[None, None]: ...
    def get_preferred_height(self, widget: Gtk.Widget) -> tuple[None, None]: ...
    def get_preferred_height_for_width(self, widget: Gtk.Widget, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self, widget: Gtk.Widget) -> tuple[None, None]: ...
    def get_preferred_width(self, widget: Gtk.Widget) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, widget: Gtk.Widget, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_radio(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_sensitive(self) -> bool: ...
    def get_size(self, widget: Gtk.Widget, cell_area: Gdk.Rectangle) -> tuple[None, None, None, None]: ...
    def get_state(self, widget: Gtk.Widget, cell_state: Gtk.CellRendererState) -> Gtk.StateFlags: ...
    def get_visible(self) -> bool: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_activatable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(icon_name: str) -> Gtk.CellRenderer: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def render(self, cr: cairo.Context, widget: Gtk.Widget, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_accessible_type(self, type: GType): ...
    def set_activatable(self, setting: bool): ...
    def set_active(self, setting: bool): ...
    def set_alignment(self, xalign: float, yalign: float): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_fixed_size(self, width: int, height: int): ...
    def set_padding(self, xpad: int, ypad: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_radio(self, radio: bool): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_visible(self, visible: bool): ...
    def start_editing(self, event: Gdk.Event, widget: Gtk.Widget, path: str, background_area: Gdk.Rectangle, cell_area: Gdk.Rectangle, flags: Gtk.CellRendererState) -> Union[Gtk.CellEditable, None]: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_editing(self, canceled: bool): ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class CellRendererToggleClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    clicked: Incomplete
    parent_class: Incomplete

class CellRendererTogglePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ChainButton(__gi_repository_Gtk.Grid):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def attach(self, child: Gtk.Widget, left: int, top: int, width: int, height: int): ...
    def attach_next_to(self, child: Gtk.Widget, sibling: Gtk.Widget, side: Gtk.PositionType, width: int, height: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_toggled(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_active(self) -> bool: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_row(self) -> int: ...
    def get_border_width(self) -> int: ...
    def get_button(self) -> Gtk.Button: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_children(self) -> list: ...
    def get_child_at(self, left: int, top: int) -> Union[Gtk.Widget, None]: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_homogeneous(self) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_icon_size(self) -> Gtk.IconSize: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_baseline_position(self, row: int) -> Gtk.BaselinePosition: ...
    def get_row_homogeneous(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_column(self, position: int): ...
    def insert_next_to(self, sibling: Gtk.Widget, side: Gtk.PositionType): ...
    def insert_row(self, position: int): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(position: GimpUi.ChainPosition) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_column(self, position: int): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_row(self, position: int): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_active(self, active: bool): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_row(self, row: int): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_homogeneous(self, homogeneous: bool): ...
    def set_column_spacing(self, spacing: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_icon_size(self, size: Gtk.IconSize): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_baseline_position(self, row: int, pos: Gtk.BaselinePosition): ...
    def set_row_homogeneous(self, homogeneous: bool): ...
    def set_row_spacing(self, spacing: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ChainButtonClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    toggled: Incomplete

class ChainButtonPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ChainPosition(__gobject.GEnum):
    GIMP_CHAIN_TOP: int
    GIMP_CHAIN_LEFT: int
    GIMP_CHAIN_BOTTOM: int
    GIMP_CHAIN_RIGHT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BOTTOM: int
    LEFT: int
    RIGHT: int
    TOP: int

class IntComboBox(__gi_overrides_Gtk.ComboBox):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_attribute(self, cell: Gtk.CellRenderer, attribute: str, column: int): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: Gtk.CellRenderer): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, value: int, callback: GObject.Callback, data) -> int: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_changed(self) -> None: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_format_entry_text(self, path: str) -> str: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_active(self) -> tuple[bool, None]: ...
    def get_active_id(self) -> Union[str, None]: ...
    def get_active_iter(*args, **kwargs) -> None: ...
    def get_active_user_data(self) -> tuple[bool, user_data]: ...
    def get_add_tearoffs(self) -> bool: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> Union[Gtk.CellArea, None]: ...
    def get_border_width(self) -> int: ...
    def get_button_sensitivity(self) -> Gtk.SensitivityType: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_cells(self) -> list: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_span_column(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_entry_text_column(self) -> int: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_entry(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_id_column(self) -> int: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> str: ...
    def get_layout(self) -> GimpUi.IntComboBoxLayout: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model(self) -> Gtk.TreeModel: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_popup_accessible(self) -> Atk.Object: ...
    def get_popup_fixed_width(self) -> bool: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_span_column(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_wrap_width(self) -> int: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(labels: list) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_area(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_area_and_entry(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_entry() -> Gtk.Widget: ...
    @staticmethod
    def new_with_model(model: Gtk.TreeModel) -> Gtk.Widget: ...
    @staticmethod
    def new_with_model_and_entry(model: Gtk.TreeModel) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, cell: Gtk.CellRenderer, expand: bool): ...
    def pack_start(self, cell: Gtk.CellRenderer, expand: bool): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_for_device(self, device: Gdk.Device): ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder(self, cell: Gtk.CellRenderer, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_active(self, value: int) -> bool: ...
    def set_active_by_user_data(self, user_data) -> bool: ...
    def set_active_id(self, active_id: str) -> bool: ...
    def set_active_iter(self, iter: Gtk.TreeIter = ...): ...
    def set_add_tearoffs(self, add_tearoffs: bool): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_button_sensitivity(self, sensitivity: Gtk.SensitivityType): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_cell_data_func(self, cell: Gtk.CellRenderer, func: Gtk.CellLayoutDataFunc = ..., func_data: Incomplete | None = ...): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_span_column(self, column_span: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_entry_text_column(self, text_column: int): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_id_column(self, id_column: int): ...
    def set_label(self, label: str): ...
    def set_layout(self, layout: GimpUi.IntComboBoxLayout): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_model(self, model: Gtk.TreeModel = ...): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_popup_fixed_width(self, fixed: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_separator_func(self, func: Gtk.TreeViewRowSeparatorFunc, data: Incomplete | None = ...): ...
    def set_row_span_column(self, row_span: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_sensitivity(self, func: GimpUi.IntSensitivityFunc, data: Incomplete | None = ...): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap_width(self, width: int): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ChannelComboBox(IntComboBox):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_attribute(self, cell: Gtk.CellRenderer, attribute: str, column: int): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: Gtk.CellRenderer): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, value: int, callback: GObject.Callback, data) -> int: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_changed(self) -> None: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_format_entry_text(self, path: str) -> str: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_active(self) -> tuple[bool, None]: ...
    def get_active_id(self) -> Union[str, None]: ...
    def get_active_iter(*args, **kwargs) -> None: ...
    def get_active_user_data(self) -> tuple[bool, user_data]: ...
    def get_add_tearoffs(self) -> bool: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> Union[Gtk.CellArea, None]: ...
    def get_border_width(self) -> int: ...
    def get_button_sensitivity(self) -> Gtk.SensitivityType: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_cells(self) -> list: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_span_column(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_entry_text_column(self) -> int: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_entry(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_id_column(self) -> int: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> str: ...
    def get_layout(self) -> GimpUi.IntComboBoxLayout: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model(self) -> Gtk.TreeModel: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_popup_accessible(self) -> Atk.Object: ...
    def get_popup_fixed_width(self) -> bool: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_span_column(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_wrap_width(self) -> int: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(constraint: GimpUi.ItemConstraintFunc) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_area(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_area_and_entry(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_entry() -> Gtk.Widget: ...
    @staticmethod
    def new_with_model(model: Gtk.TreeModel) -> Gtk.Widget: ...
    @staticmethod
    def new_with_model_and_entry(model: Gtk.TreeModel) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, cell: Gtk.CellRenderer, expand: bool): ...
    def pack_start(self, cell: Gtk.CellRenderer, expand: bool): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_for_device(self, device: Gdk.Device): ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder(self, cell: Gtk.CellRenderer, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_active(self, value: int) -> bool: ...
    def set_active_by_user_data(self, user_data) -> bool: ...
    def set_active_id(self, active_id: str) -> bool: ...
    def set_active_iter(self, iter: Gtk.TreeIter = ...): ...
    def set_add_tearoffs(self, add_tearoffs: bool): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_button_sensitivity(self, sensitivity: Gtk.SensitivityType): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_cell_data_func(self, cell: Gtk.CellRenderer, func: Gtk.CellLayoutDataFunc = ..., func_data: Incomplete | None = ...): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_span_column(self, column_span: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_entry_text_column(self, text_column: int): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_id_column(self, id_column: int): ...
    def set_label(self, label: str): ...
    def set_layout(self, layout: GimpUi.IntComboBoxLayout): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_model(self, model: Gtk.TreeModel = ...): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_popup_fixed_width(self, fixed: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_separator_func(self, func: Gtk.TreeViewRowSeparatorFunc, data: Incomplete | None = ...): ...
    def set_row_span_column(self, row_span: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_sensitivity(self, func: GimpUi.IntSensitivityFunc, data: Incomplete | None = ...): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap_width(self, width: int): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorArea(__gi_repository_Gtk.DrawingArea):
    def activate(self) -> bool: ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_notify(self, child_property: str): ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_color_changed(self) -> None: ...
    def do_composited_changed(self) -> None: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def enable_drag(self, drag_mask: Gdk.ModifierType): ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_color(self) -> Gimp.RGB: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_alpha(self) -> bool: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(color: Gimp.RGB, type: GimpUi.ColorAreaType, drag_mask: Gdk.ModifierType) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_color(self, color: Gimp.RGB): ...
    def set_color_config(self, config: Gimp.ColorConfig): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_draw_border(self, draw_border: bool): ...
    def set_events(self, events: int): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_out_of_gamut(self, out_of_gamut: bool): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_type(self, type: GimpUi.ColorAreaType): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    dummy: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorAreaClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    color_changed: Incomplete
    parent_class: Incomplete

class ColorAreaPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorAreaType(__gobject.GEnum):
    GIMP_COLOR_AREA_FLAT: int
    GIMP_COLOR_AREA_SMALL_CHECKS: int
    GIMP_COLOR_AREA_LARGE_CHECKS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    FLAT: int
    LARGE_CHECKS: int
    SMALL_CHECKS: int

class ColorButton(Button):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clicked(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate(self) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_clicked(self) -> None: ...
    def do_color_changed(self) -> None: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter(self) -> None: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_extended_clicked(self, modifier_state: Gdk.ModifierType): ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_action_type(self) -> GType: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave(self) -> None: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_pressed(self) -> None: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_released(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_set_related_action(self, action: Gtk.Action): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def enter(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def extended_clicked(self, modifier_state: Gdk.ModifierType): ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_action_name(self) -> Union[str, None]: ...
    def get_action_target_value(self) -> GLib.Variant: ...
    def get_alignment(self) -> tuple[None, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_always_show_image(self) -> bool: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_color(self) -> Gimp.RGB: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_event_window(self) -> Gdk.Window: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self, *args, **kwargs) -> None: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_image(self) -> Union[Gtk.Widget, None]: ...
    def get_image_position(self) -> Gtk.PositionType: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> str: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_related_action(self) -> Gtk.Action: ...
    def get_relief(self) -> Gtk.ReliefStyle: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_ui_manager(self) -> Gtk.UIManager: ...
    def get_update(self) -> bool: ...
    def get_use_action_appearance(self) -> bool: ...
    def get_use_stock(self) -> bool: ...
    def get_use_underline(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_alpha(self) -> bool: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def leave(self) -> None: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(title: str, width: int, height: int, color: Gimp.RGB, type: GimpUi.ColorAreaType) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_icon_name(icon_name: str, size: int) -> Gtk.Widget: ...
    @staticmethod
    def new_from_stock(stock_id: str) -> Gtk.Widget: ...
    @staticmethod
    def new_with_label(label: str) -> Gtk.Widget: ...
    @staticmethod
    def new_with_mnemonic(label: str) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def pressed(self) -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def released(self) -> None: ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_action_name(self, action_name: str = ...): ...
    def set_action_target_value(self, target_value: GLib.Variant = ...): ...
    def set_alignment(self, xalign: float, yalign: float): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_always_show_image(self, always_show: bool): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_color(self, color: Gimp.RGB): ...
    def set_color_config(self, config: Gimp.ColorConfig): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_detailed_action_name(self, detailed_action_name: str): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, *args, **kwargs) -> None: ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_image(self, image: Gtk.Widget = ...): ...
    def set_image_position(self, position: Gtk.PositionType): ...
    def set_label(self, label: str): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_related_action(self, action: Gtk.Action): ...
    def set_relief(self, relief: Gtk.ReliefStyle): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_type(self, type: GimpUi.ColorAreaType): ...
    def set_update(self, continuous: bool): ...
    def set_use_action_appearance(self, use_appearance: bool): ...
    def set_use_stock(self, use_stock: bool): ...
    def set_use_underline(self, use_underline: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def sync_action_properties(self, action: Gtk.Action = ...): ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    bin: Incomplete
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorButtonClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    color_changed: Incomplete
    get_action_type: Incomplete
    parent_class: Incomplete

class ColorButtonPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorDisplay(__gi_overrides_GObject.Object, __gi_repository_Gimp.ConfigInterface):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    @staticmethod
    def build_data_path(name: str) -> str: ...
    @staticmethod
    def build_plug_in_path(name: str) -> str: ...
    @staticmethod
    def build_system_path(name: str) -> str: ...
    @staticmethod
    def build_writable_path(name: str) -> str: ...
    def chain(self, *args, **kwargs) -> None: ...
    def changed(self) -> None: ...
    def clone(self) -> GimpUi.ColorDisplay: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def configure(self) -> Gtk.Widget: ...
    def configure_reset(self) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def convert_buffer(self, buffer: Gegl.Buffer, area: Gegl.Rectangle): ...
    @staticmethod
    def deserialize_return(scanner: GLib.Scanner, expected_token: GLib.TokenType, nest_level: int) -> bool: ...
    @staticmethod
    def diff(a: GObject.Object, b: GObject.Object, flags: GObject.ParamFlags) -> list: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_changed(self) -> None: ...
    def do_configure(self) -> Gtk.Widget: ...
    def do_convert_buffer(self, buffer: Gegl.Buffer, area: Gegl.Rectangle): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    @staticmethod
    def error_quark() -> int: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_config(self) -> Gimp.ColorConfig: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_enabled(self) -> bool: ...
    def get_managed(self) -> Gimp.ColorManaged: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    def load_state(self, state: Gimp.Parasite): ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    @staticmethod
    def param_spec_duplicate(pspec: GObject.ParamSpec) -> GObject.ParamSpec: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    @staticmethod
    def reset_properties(object: GObject.Object): ...
    @staticmethod
    def reset_property(object: GObject.Object, property_name: str): ...
    def run_dispose(self) -> None: ...
    def save_state(self) -> Gimp.Parasite: ...
    @staticmethod
    def serialize_value(value: GObject.Value, str: GLib.String, escaped: bool) -> bool: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_enabled(self, enabled: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    @staticmethod
    def string_append_escaped(string: GLib.String, val: str): ...
    @staticmethod
    def sync(src: GObject.Object, dest: GObject.Object, flags: GObject.ParamFlags) -> bool: ...
    def thaw_notify(self) -> None: ...
    @staticmethod
    def type_register(parent_type: GType, type_name: str, pspecs: list) -> GType: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorDisplayClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    changed: Incomplete
    configure: Incomplete
    convert_buffer: Incomplete
    help_id: Incomplete
    icon_name: Incomplete
    name: Incomplete
    parent_class: Incomplete

class ColorDisplayPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorDisplayStack(__gi_overrides_GObject.Object):
    def add(self, display: GimpUi.ColorDisplay): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def changed(self) -> None: ...
    def clone(self) -> GimpUi.ColorDisplayStack: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def convert_buffer(self, buffer: Gegl.Buffer, area: Gegl.Rectangle): ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_added(self, display: GimpUi.ColorDisplay, position: int): ...
    def do_changed(self) -> None: ...
    def do_removed(self, display: GimpUi.ColorDisplay): ...
    def do_reordered(self, display: GimpUi.ColorDisplay, position: int): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_filters(self) -> list: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new() -> GimpUi.ColorDisplayStack: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def remove(self, display: GimpUi.ColorDisplay): ...
    def reorder_down(self, display: GimpUi.ColorDisplay): ...
    def reorder_up(self, display: GimpUi.ColorDisplay): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorDisplayStackClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    added: Incomplete
    changed: Incomplete
    parent_class: Incomplete
    removed: Incomplete
    reordered: Incomplete

class ColorDisplayStackPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorHexEntry(__gi_repository_Gtk.Entry):
    def activate(self) -> bool: ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_notify(self, child_property: str): ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def copy_clipboard(self) -> None: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def cut_clipboard(self) -> None: ...
    def delete_selection(self) -> None: ...
    def delete_text(self, start_pos: int, end_pos: int): ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate(self) -> None: ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_backspace(self) -> None: ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_color_changed(self) -> None: ...
    def do_composited_changed(self) -> None: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_copy_clipboard(self) -> None: ...
    def do_cut_clipboard(self) -> None: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_delete_from_cursor(self, type: Gtk.DeleteType, count: int): ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_frame_size(self, x: int, y: int, width: int, height: int): ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_get_text_area_size(self, x: int, y: int, width: int, height: int): ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_insert_at_cursor(self, str: str): ...
    def do_insert_emoji(self) -> None: ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_cursor(self, step: Gtk.MovementStep, count: int, extend_selection: bool): ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_paste_clipboard(self) -> None: ...
    def do_populate_popup(self, popup: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_toggle_overwrite(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_activates_default(self) -> bool: ...
    def get_alignment(self) -> float: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_attributes(self) -> Union[Pango.AttrList, None]: ...
    def get_buffer(self) -> Gtk.EntryBuffer: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_chars(self, start_pos: int, end_pos: int) -> str: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_color(self) -> Gimp.RGB: ...
    def get_completion(self) -> Gtk.EntryCompletion: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_current_icon_drag_source(self) -> int: ...
    def get_cursor_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_editable(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_frame(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_icon_activatable(self, icon_pos: Gtk.EntryIconPosition) -> bool: ...
    def get_icon_area(self, icon_pos: Gtk.EntryIconPosition) -> Gdk.Rectangle: ...
    def get_icon_at_pos(self, x: int, y: int) -> int: ...
    def get_icon_gicon(self, icon_pos: Gtk.EntryIconPosition) -> Union[Gio.Icon, None]: ...
    def get_icon_name(self, icon_pos: Gtk.EntryIconPosition) -> Union[str, None]: ...
    def get_icon_pixbuf(self, icon_pos: Gtk.EntryIconPosition) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_sensitive(self, icon_pos: Gtk.EntryIconPosition) -> bool: ...
    def get_icon_stock(self, icon_pos: Gtk.EntryIconPosition) -> str: ...
    def get_icon_storage_type(self, icon_pos: Gtk.EntryIconPosition) -> Gtk.ImageType: ...
    def get_icon_tooltip_markup(self, icon_pos: Gtk.EntryIconPosition) -> Union[str, None]: ...
    def get_icon_tooltip_text(self, icon_pos: Gtk.EntryIconPosition) -> Union[str, None]: ...
    def get_inner_border(self) -> Union[Gtk.Border, None]: ...
    def get_input_hints(self) -> Gtk.InputHints: ...
    def get_input_purpose(self) -> Gtk.InputPurpose: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_invisible_char(self) -> str: ...
    def get_layout(self) -> Pango.Layout: ...
    def get_layout_offsets(self) -> tuple[None, None]: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_max_length(self) -> int: ...
    def get_max_width_chars(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_overwrite_mode(self) -> bool: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_placeholder_text(self) -> str: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> int: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_progress_fraction(self) -> float: ...
    def get_progress_pulse_step(self) -> float: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_selection_bounds(*args, **kwargs) -> None: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_tabs(self) -> Union[Pango.TabArray, None]: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> str: ...
    def get_text_area(self) -> Gdk.Rectangle: ...
    def get_text_length(self) -> int: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visibility(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_width_chars(self) -> int: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_focus_without_selecting(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def im_context_filter_keypress(self, event: Gdk.EventKey) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_text(self, text, position) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def layout_index_to_text_index(self, layout_index: int) -> int: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_buffer(buffer: Gtk.EntryBuffer) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def paste_clipboard(self) -> None: ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def progress_pulse(self) -> None: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_im_context(self) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def run_dispose(self) -> None: ...
    def select_region(self, start_pos: int, end_pos: int): ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_activates_default(self, setting: bool): ...
    def set_alignment(self, xalign: float): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_attributes(self, attrs: Pango.AttrList): ...
    def set_buffer(self, buffer: Gtk.EntryBuffer): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_color(self, color: Gimp.RGB): ...
    def set_completion(self, completion: Gtk.EntryCompletion = ...): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_cursor_hadjustment(self, adjustment: Gtk.Adjustment = ...): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_editable(self, is_editable: bool): ...
    def set_events(self, events: int): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_frame(self, setting: bool): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_icon_activatable(self, icon_pos: Gtk.EntryIconPosition, activatable: bool): ...
    def set_icon_drag_source(self, icon_pos: Gtk.EntryIconPosition, target_list: Gtk.TargetList, actions: Gdk.DragAction): ...
    def set_icon_from_gicon(self, icon_pos: Gtk.EntryIconPosition, icon: Gio.Icon = ...): ...
    def set_icon_from_icon_name(self, icon_pos: Gtk.EntryIconPosition, icon_name: str = ...): ...
    def set_icon_from_pixbuf(self, icon_pos: Gtk.EntryIconPosition, pixbuf: GdkPixbuf.Pixbuf = ...): ...
    def set_icon_from_stock(self, icon_pos: Gtk.EntryIconPosition, stock_id: str = ...): ...
    def set_icon_sensitive(self, icon_pos: Gtk.EntryIconPosition, sensitive: bool): ...
    def set_icon_tooltip_markup(self, icon_pos: Gtk.EntryIconPosition, tooltip: str = ...): ...
    def set_icon_tooltip_text(self, icon_pos: Gtk.EntryIconPosition, tooltip: str = ...): ...
    def set_inner_border(self, border: Gtk.Border = ...): ...
    def set_input_hints(self, hints: Gtk.InputHints): ...
    def set_input_purpose(self, purpose: Gtk.InputPurpose): ...
    def set_invisible_char(self, ch: str): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_max_length(self, max: int): ...
    def set_max_width_chars(self, n_chars: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_overwrite_mode(self, overwrite: bool): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_placeholder_text(self, text: str = ...): ...
    def set_position(self, position: int): ...
    def set_progress_fraction(self, fraction: float): ...
    def set_progress_pulse_step(self, fraction: float): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_tabs(self, tabs: Pango.TabArray): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, text: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visibility(self, visible: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_width_chars(self, n_chars: int): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def text_index_to_layout_index(self, text_index: int) -> int: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_invisible_char(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorHexEntryClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    color_changed: Incomplete
    parent_class: Incomplete

class ColorHexEntryPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorSelector(__gi_overrides_Gtk.Box):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_channel_changed(self, channel: GimpUi.ColorSelectorChannel): ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_color_changed(self, rgb: Gimp.RGB, hsv: Gimp.HSV): ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_model_visible_changed(self, model: GimpUi.ColorSelectorModel, visible: bool): ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_channel(self, channel: GimpUi.ColorSelectorChannel): ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_color(self, rgb: Gimp.RGB, hsv: Gimp.HSV): ...
    def do_set_config(self, config: Gimp.ColorConfig): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_set_model_visible(self, model: GimpUi.ColorSelectorModel, visible: bool): ...
    def do_set_show_alpha(self, show_alpha: bool): ...
    def do_set_simulation(self, profile: Gimp.ColorProfile, intent: Gimp.ColorRenderingIntent, bpc: bool): ...
    def do_set_toggles_sensitive(self, sensitive: bool): ...
    def do_set_toggles_visible(self, visible: bool): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_channel_changed(self) -> None: ...
    def emit_color_changed(self) -> None: ...
    def emit_model_visible_changed(self, model: GimpUi.ColorSelectorModel): ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_channel(self) -> GimpUi.ColorSelectorChannel: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_color(self) -> tuple[None, None]: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model_visible(self, model: GimpUi.ColorSelectorModel) -> bool: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_show_alpha(self) -> bool: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_toggles_sensitive(self) -> bool: ...
    def get_toggles_visible(self) -> bool: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(selector_type: GType, rgb: Gimp.RGB, hsv: Gimp.HSV, channel: GimpUi.ColorSelectorChannel) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_channel(self, channel: GimpUi.ColorSelectorChannel): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_color(self, rgb: Gimp.RGB, hsv: Gimp.HSV): ...
    def set_composite_name(self, name: str): ...
    def set_config(self, config: Gimp.ColorConfig): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_model_visible(self, model: GimpUi.ColorSelectorModel, visible: bool): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_show_alpha(self, show_alpha: bool): ...
    def set_simulation(self, profile: Gimp.ColorProfile, intent: Gimp.ColorRenderingIntent, bpc: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_toggles_sensitive(self, sensitive: bool): ...
    def set_toggles_visible(self, visible: bool): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    channel: Incomplete
    container: Incomplete
    g_type_instance: Incomplete
    hsv: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    rgb: Incomplete
    show_alpha: Incomplete
    toggles_sensitive: Incomplete
    toggles_visible: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorNotebook(ColorSelector):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_channel_changed(self, channel: GimpUi.ColorSelectorChannel): ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_color_changed(self, rgb: Gimp.RGB, hsv: Gimp.HSV): ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_model_visible_changed(self, model: GimpUi.ColorSelectorModel, visible: bool): ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_channel(self, channel: GimpUi.ColorSelectorChannel): ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_color(self, rgb: Gimp.RGB, hsv: Gimp.HSV): ...
    def do_set_config(self, config: Gimp.ColorConfig): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_set_model_visible(self, model: GimpUi.ColorSelectorModel, visible: bool): ...
    def do_set_show_alpha(self, show_alpha: bool): ...
    def do_set_simulation(self, profile: Gimp.ColorProfile, intent: Gimp.ColorRenderingIntent, bpc: bool): ...
    def do_set_toggles_sensitive(self, sensitive: bool): ...
    def do_set_toggles_visible(self, visible: bool): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_channel_changed(self) -> None: ...
    def emit_color_changed(self) -> None: ...
    def emit_model_visible_changed(self, model: GimpUi.ColorSelectorModel): ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_channel(self) -> GimpUi.ColorSelectorChannel: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_color(self) -> tuple[None, None]: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_current_selector(self) -> GimpUi.ColorSelector: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model_visible(self, model: GimpUi.ColorSelectorModel) -> bool: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_notebook(self) -> Gtk.Notebook: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_selectors(self) -> list: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_show_alpha(self) -> bool: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_toggles_sensitive(self) -> bool: ...
    def get_toggles_visible(self) -> bool: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(selector_type: GType, rgb: Gimp.RGB, hsv: Gimp.HSV, channel: GimpUi.ColorSelectorChannel) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_channel(self, channel: GimpUi.ColorSelectorChannel): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_color(self, rgb: Gimp.RGB, hsv: Gimp.HSV): ...
    def set_composite_name(self, name: str): ...
    def set_config(self, config: Gimp.ColorConfig): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_page(self, page_type: GType, has_page: bool) -> Gtk.Widget: ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_model_visible(self, model: GimpUi.ColorSelectorModel, visible: bool): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_show_alpha(self, show_alpha: bool): ...
    def set_simulation(self, profile: Gimp.ColorProfile, intent: Gimp.ColorRenderingIntent, bpc: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_toggles_sensitive(self, sensitive: bool): ...
    def set_toggles_visible(self, visible: bool): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    channel: Incomplete
    container: Incomplete
    g_type_instance: Incomplete
    hsv: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    rgb: Incomplete
    show_alpha: Incomplete
    toggles_sensitive: Incomplete
    toggles_visible: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorNotebookClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ColorNotebookPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorProfileChooserDialog(__gi_overrides_Gtk.FileChooserDialog):
    def activate(self) -> bool: ...
    def activate_default(self) -> bool: ...
    def activate_focus(self) -> bool: ...
    def activate_key(self, event: Gdk.EventKey) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_accel_group(self, accel_group: Gtk.AccelGroup): ...
    def add_action_widget(self, child: Gtk.Widget, response_id: int): ...
    def add_button(self, button_text: str, response_id: int) -> Gtk.Widget: ...
    def add_buttons(self, *args) -> None: ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_choice(self, id: str, label: str, options: list = ..., option_labels: list = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_filter(self, filter: Gtk.FileFilter): ...
    def add_mnemonic(self, keyval: int, target: Gtk.Widget): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_shortcut_folder(self, folder: str) -> bool: ...
    def add_shortcut_folder_uri(self, uri: str) -> bool: ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def begin_move_drag(self, button: int, root_x: int, root_y: int, timestamp: int): ...
    def begin_resize_drag(self, edge: Gdk.WindowEdge, button: int, root_x: int, root_y: int, timestamp: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def close(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def deiconify(self) -> None: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate_default(self) -> None: ...
    def do_activate_focus(self) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_close(self) -> None: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enable_debugging(self, toggle: bool) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_keys_changed(self) -> None: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_response(self, response_id: int): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus(self, focus: Gtk.Widget = ...): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def fullscreen(self) -> None: ...
    def fullscreen_on_monitor(self, screen: Gdk.Screen, monitor: int): ...
    def getv(self, names: list, values: list): ...
    def get_accept_focus(self) -> bool: ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action(self) -> Gtk.FileChooserAction: ...
    def get_action_area(self) -> Gtk.Box: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_application(self) -> Union[Gtk.Application, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_attached_to(self) -> Union[Gtk.Widget, None]: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_choice(self, id: str) -> str: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_content_area(self) -> Gtk.Box: ...
    def get_create_folders(self) -> bool: ...
    def get_css_name(self) -> str: ...
    def get_current_folder(self) -> Union[str, None]: ...
    def get_current_folder_file(self) -> Union[Gio.File, None]: ...
    def get_current_folder_uri(self) -> Union[str, None]: ...
    def get_current_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_decorated(self) -> bool: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_icon_list() -> list: ...
    @staticmethod
    def get_default_icon_name() -> str: ...
    def get_default_size(self) -> tuple[None, None]: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_default_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_deletable(self) -> bool: ...
    def get_destroy_with_parent(self) -> bool: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_do_overwrite_confirmation(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_extra_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_file(self) -> Gio.File: ...
    def get_filename(self) -> Union[str, None]: ...
    def get_filenames(self) -> list: ...
    def get_files(self) -> list: ...
    def get_filter(self) -> Union[Gtk.FileFilter, None]: ...
    def get_focus(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_on_map(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_visible(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_gravity(self) -> Gdk.Gravity: ...
    def get_group(self) -> Gtk.WindowGroup: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_resize_grip(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_header_bar(self) -> Gtk.HeaderBar: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_hide_titlebar_when_maximized(self) -> bool: ...
    def get_icon(self) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_list(self) -> list: ...
    def get_icon_name(self) -> Union[str, None]: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_local_only(self) -> bool: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_mnemonics_visible(self) -> bool: ...
    def get_mnemonic_modifier(self) -> Gdk.ModifierType: ...
    def get_modal(self) -> bool: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_preview_file(self) -> Union[Gio.File, None]: ...
    def get_preview_filename(self) -> Union[str, None]: ...
    def get_preview_uri(self) -> Union[str, None]: ...
    def get_preview_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_preview_widget_active(self) -> bool: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resizable(self) -> bool: ...
    def get_resize_grip_area(self) -> tuple[bool, None]: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_response_for_widget(self, widget: Gtk.Widget) -> int: ...
    def get_role(self) -> Union[str, None]: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_select_multiple(self) -> bool: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_show_hidden(self) -> bool: ...
    def get_size(self) -> tuple[None, None]: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_skip_pager_hint(self) -> bool: ...
    def get_skip_taskbar_hint(self) -> bool: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> Union[str, None]: ...
    def get_titlebar(self) -> Union[Gtk.Widget, None]: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_transient_for(self) -> Union[Gtk.Window, None]: ...
    def get_type_hint(self) -> Gdk.WindowTypeHint: ...
    def get_urgency_hint(self) -> bool: ...
    def get_uri(self) -> Union[str, None]: ...
    def get_uris(self) -> list: ...
    def get_use_preview_label(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_widget_for_response(self, response_id: int) -> Union[Gtk.Widget, None]: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_window_type(self) -> Gtk.WindowType: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_group(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_toplevel_focus(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def iconify(self) -> None: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_active(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_maximized(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_filters(self) -> list: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_shortcut_folders(self) -> Union[list, None]: ...
    def list_shortcut_folder_uris(self) -> Union[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def list_toplevels() -> list: ...
    def map(self) -> None: ...
    def maximize(self) -> None: ...
    def mnemonic_activate(self, keyval: int, modifier: Gdk.ModifierType) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def move(self, x: int, y: int): ...
    @staticmethod
    def new(title: str, parent: Gtk.Window, action: Gtk.FileChooserAction) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def parse_geometry(self, geometry: str) -> bool: ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def present(self) -> None: ...
    def present_with_time(self, timestamp: int): ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    def propagate_key_event(self, event: Gdk.EventKey) -> bool: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_accel_group(self, accel_group: Gtk.AccelGroup): ...
    def remove_choice(self, id: str): ...
    def remove_filter(self, filter: Gtk.FileFilter): ...
    def remove_mnemonic(self, keyval: int, target: Gtk.Widget): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_shortcut_folder(self, folder: str) -> bool: ...
    def remove_shortcut_folder_uri(self, uri: str) -> bool: ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def reshow_with_initial_size(self) -> None: ...
    def resize(self, width: int, height: int): ...
    def resize_children(self) -> None: ...
    def resize_grip_is_visible(self) -> bool: ...
    def resize_to_geometry(self, width: int, height: int): ...
    def response(self, response_id: int): ...
    def run(self, *args, **kwargs) -> None: ...
    def run_dispose(self) -> None: ...
    def select_all(self) -> None: ...
    def select_file(self, file: Gio.File) -> bool: ...
    def select_filename(self, filename: str) -> bool: ...
    def select_uri(self, uri: str) -> bool: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accept_focus(self, setting: bool): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_action(self, action: Gtk.FileChooserAction): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_alternative_button_order_from_array(self, new_order: list): ...
    def set_application(self, application: Gtk.Application = ...): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_attached_to(self, attach_widget: Gtk.Widget = ...): ...
    @staticmethod
    def set_auto_startup_notification(setting: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_choice(self, id: str, option: str): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_create_folders(self, create_folders: bool): ...
    def set_css_name(self, name: str): ...
    def set_current_folder(self, filename: str) -> bool: ...
    def set_current_folder_file(self, file: Gio.File) -> bool: ...
    def set_current_folder_uri(self, uri: str) -> bool: ...
    def set_current_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_decorated(self, setting: bool): ...
    def set_default(self, default_widget: Gtk.Widget = ...): ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_default_geometry(self, width: int, height: int): ...
    @staticmethod
    def set_default_icon(icon: GdkPixbuf.Pixbuf): ...
    @staticmethod
    def set_default_icon_from_file(filename: str) -> bool: ...
    @staticmethod
    def set_default_icon_list(list: list): ...
    @staticmethod
    def set_default_icon_name(name: str): ...
    def set_default_response(self, response_id: int): ...
    def set_default_size(self, width: int, height: int): ...
    def set_deletable(self, setting: bool): ...
    def set_destroy_with_parent(self, setting: bool): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_do_overwrite_confirmation(self, do_overwrite_confirmation: bool): ...
    def set_events(self, events: int): ...
    def set_extra_widget(self, extra_widget: Gtk.Widget): ...
    def set_file(self, file: Gio.File) -> bool: ...
    def set_filename(self, filename: str) -> bool: ...
    def set_filter(self, filter: Gtk.FileFilter): ...
    def set_focus(self, focus: Gtk.Widget = ...): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_on_map(self, setting: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_visible(self, setting: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_geometry_hints(self, geometry_widget: Gtk.Widget, geometry: Gdk.Geometry, geom_mask: Gdk.WindowHints): ...
    def set_gravity(self, gravity: Gdk.Gravity): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_resize_grip(self, value: bool): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_user_ref_count(self, setting: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_hide_titlebar_when_maximized(self, setting: bool): ...
    def set_icon(self, icon: GdkPixbuf.Pixbuf = ...): ...
    def set_icon_from_file(self, filename: str) -> bool: ...
    def set_icon_list(self, list: list): ...
    def set_icon_name(self, name: str = ...): ...
    @staticmethod
    def set_interactive_debugging(enable: bool): ...
    def set_keep_above(self, setting: bool): ...
    def set_keep_below(self, setting: bool): ...
    def set_local_only(self, local_only: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_mnemonics_visible(self, setting: bool): ...
    def set_mnemonic_modifier(self, modifier: Gdk.ModifierType): ...
    def set_modal(self, modal: bool): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_position(self, position: Gtk.WindowPosition): ...
    def set_preview_widget(self, preview_widget: Gtk.Widget): ...
    def set_preview_widget_active(self, active: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resizable(self, resizable: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_response_sensitive(self, response_id: int, setting: bool): ...
    def set_role(self, role: str): ...
    def set_screen(self, screen: Gdk.Screen): ...
    def set_select_multiple(self, select_multiple: bool): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_show_hidden(self, show_hidden: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_skip_pager_hint(self, setting: bool): ...
    def set_skip_taskbar_hint(self, setting: bool): ...
    def set_startup_id(self, startup_id: str): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_titlebar(self, titlebar: Gtk.Widget = ...): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_transient_for(self, parent: Gtk.Window = ...): ...
    def set_type_hint(self, hint: Gdk.WindowTypeHint): ...
    def set_urgency_hint(self, setting: bool): ...
    def set_uri(self, uri: str) -> bool: ...
    def set_use_preview_label(self, use_label: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wmclass(self, wmclass_name: str, wmclass_class: str): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stick(self) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unfullscreen(self) -> None: ...
    def unmap(self) -> None: ...
    def unmaximize(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unselect_all(self) -> None: ...
    def unselect_file(self, file: Gio.File): ...
    def unselect_filename(self, filename: str): ...
    def unselect_uri(self, uri: str): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def unstick(self) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    action_area: Incomplete
    bin: Incomplete
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    vbox: Incomplete
    widget: Incomplete
    window: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorProfileChooserDialogClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ColorProfileChooserDialogPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorProfileComboBox(__gi_overrides_Gtk.ComboBox):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_attribute(self, cell: Gtk.CellRenderer, attribute: str, column: int): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_file(self, file: Gio.File, label: str): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: Gtk.CellRenderer): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_changed(self) -> None: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_format_entry_text(self, path: str) -> str: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_active(self) -> int: ...
    def get_active_file(self) -> Gio.File: ...
    def get_active_id(self) -> Union[str, None]: ...
    def get_active_iter(*args, **kwargs) -> None: ...
    def get_add_tearoffs(self) -> bool: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> Union[Gtk.CellArea, None]: ...
    def get_border_width(self) -> int: ...
    def get_button_sensitivity(self) -> Gtk.SensitivityType: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_cells(self) -> list: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_span_column(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_entry_text_column(self) -> int: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_entry(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_id_column(self) -> int: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model(self) -> Gtk.TreeModel: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_popup_accessible(self) -> Atk.Object: ...
    def get_popup_fixed_width(self) -> bool: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_span_column(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_wrap_width(self) -> int: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(dialog: Gtk.Widget, history: Gio.File) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_area(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_area_and_entry(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_entry() -> Gtk.Widget: ...
    @staticmethod
    def new_with_model(dialog: Gtk.Widget, model: Gtk.TreeModel) -> Gtk.Widget: ...
    @staticmethod
    def new_with_model_and_entry(model: Gtk.TreeModel) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, cell: Gtk.CellRenderer, expand: bool): ...
    def pack_start(self, cell: Gtk.CellRenderer, expand: bool): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_for_device(self, device: Gdk.Device): ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder(self, cell: Gtk.CellRenderer, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_active(self, index_: int): ...
    def set_active_file(self, file: Gio.File, label: str): ...
    def set_active_id(self, active_id: str) -> bool: ...
    def set_active_iter(self, iter: Gtk.TreeIter = ...): ...
    def set_active_profile(self, profile: Gimp.ColorProfile): ...
    def set_add_tearoffs(self, add_tearoffs: bool): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_button_sensitivity(self, sensitivity: Gtk.SensitivityType): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_cell_data_func(self, cell: Gtk.CellRenderer, func: Gtk.CellLayoutDataFunc = ..., func_data: Incomplete | None = ...): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_span_column(self, column_span: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_entry_text_column(self, text_column: int): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_id_column(self, id_column: int): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_model(self, model: Gtk.TreeModel = ...): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_popup_fixed_width(self, fixed: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_separator_func(self, func: Gtk.TreeViewRowSeparatorFunc, data: Incomplete | None = ...): ...
    def set_row_span_column(self, row_span: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap_width(self, width: int): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorProfileComboBoxClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ColorProfileComboBoxPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorProfileStore(__gi_overrides_Gtk.ListStore):
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_file(self, file: Gio.File, label: str): ...
    def append(self, row: Incomplete | None = ...) -> None: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def clear(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def drag_data_delete(self, path: Gtk.TreePath) -> bool: ...
    def drag_data_get(self, path: Gtk.TreePath, selection_data: Gtk.SelectionData) -> bool: ...
    def drag_data_received(self, dest: Gtk.TreePath, selection_data: Gtk.SelectionData) -> bool: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def filter_new(self, root: Gtk.TreePath) -> Gtk.TreeModel: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, func: Gtk.TreeModelForeachFunc, user_data: Incomplete | None = ...): ...
    def freeze_notify(self) -> None: ...
    def get(self, treeiter, *columns) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_column_type(self, index_: int) -> GType: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_flags(self) -> Gtk.TreeModelFlags: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_iter(self, path) -> None: ...
    def get_iter_first(*args, **kwargs) -> None: ...
    def get_iter_from_string(*args, **kwargs) -> None: ...
    def get_name(self) -> str: ...
    def get_n_columns(self) -> int: ...
    def get_path(self, iter: Gtk.TreeIter) -> Gtk.TreePath: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_sort_column_id(*args, **kwargs) -> None: ...
    def get_string_from_iter(self, iter: Gtk.TreeIter) -> str: ...
    def get_value(self, iter: Gtk.TreeIter, column: int) -> GObject.Value: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_default_sort_func(self) -> bool: ...
    def insert(self, position, row: Incomplete | None = ...) -> None: ...
    def insert_after(self, sibling, row: Incomplete | None = ...) -> None: ...
    def insert_before(self, sibling, row: Incomplete | None = ...) -> None: ...
    def insert_with_values(self, *args, **kwargs) -> None: ...
    def insert_with_valuesv(self, position: int, columns: list, values: list) -> Gtk.TreeIter: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def iter_children(*args, **kwargs) -> None: ...
    def iter_has_child(self, iter: Gtk.TreeIter) -> bool: ...
    def iter_is_valid(self, iter: Gtk.TreeIter) -> bool: ...
    def iter_next(self, aiter) -> None: ...
    def iter_nth_child(*args, **kwargs) -> None: ...
    def iter_n_children(self, iter: Gtk.TreeIter) -> int: ...
    def iter_parent(*args, **kwargs) -> None: ...
    def iter_previous(self, aiter) -> None: ...
    def list_properties(self) -> tuple[list, None]: ...
    def move_after(self, iter: Gtk.TreeIter, position: Gtk.TreeIter = ...): ...
    def move_before(self, iter: Gtk.TreeIter, position: Gtk.TreeIter = ...): ...
    @staticmethod
    def new(history: Gio.File) -> Gtk.ListStore: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def prepend(self, row: Incomplete | None = ...) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_node(self, iter: Gtk.TreeIter): ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def remove(self, iter: Gtk.TreeIter) -> bool: ...
    def reorder(self, new_order: list): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def rows_reordered(self, path, iter, new_order) -> None: ...
    def row_changed(self, path, iter) -> None: ...
    def row_deleted(self, path) -> None: ...
    def row_draggable(self, path: Gtk.TreePath) -> bool: ...
    def row_drop_possible(self, dest_path: Gtk.TreePath, selection_data: Gtk.SelectionData) -> bool: ...
    def row_has_child_toggled(self, path, iter) -> None: ...
    def row_inserted(self, path, iter) -> None: ...
    def run_dispose(self) -> None: ...
    def set(self, treeiter, *args) -> None: ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_column_types(self, types: list): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_default_sort_func(self, sort_func, user_data: Incomplete | None = ...) -> None: ...
    def set_name(self, name: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_row(self, treeiter, row) -> None: ...
    def set_sort_column_id(self, sort_column_id: int, order: Gtk.SortType): ...
    def set_sort_func(self, sort_column_id, sort_func, user_data: Incomplete | None = ...) -> None: ...
    def set_value(self, treeiter, column, value) -> None: ...
    def sort_column_changed(self) -> None: ...
    def sort_new_with_model(self) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def swap(self, a: Gtk.TreeIter, b: Gtk.TreeIter): ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unref_node(self, iter: Gtk.TreeIter): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    def __delitem__(self, key) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, key) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *column_types) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorProfileStoreClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ColorProfileStorePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorProfileView(__gi_repository_Gtk.TextView):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_child_at_anchor(self, child: Gtk.Widget, anchor: Gtk.TextChildAnchor): ...
    def add_child_in_window(self, child: Gtk.Widget, which_window: Gtk.TextWindowType, xpos: int, ypos: int): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def backward_display_line(self, iter: Gtk.TextIter) -> bool: ...
    def backward_display_line_start(self, iter: Gtk.TextIter) -> bool: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def buffer_to_window_coords(self, win: Gtk.TextWindowType, buffer_x: int, buffer_y: int) -> tuple[None, None]: ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_backspace(self) -> None: ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_copy_clipboard(self) -> None: ...
    def do_cut_clipboard(self) -> None: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_delete_from_cursor(self, type: Gtk.DeleteType, count: int): ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_draw_layer(self, layer: Gtk.TextViewLayer, cr: cairo.Context): ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_extend_selection(self, granularity: Gtk.TextExtendSelection, location: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_insert_at_cursor(self, str: str): ...
    def do_insert_emoji(self) -> None: ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_cursor(self, step: Gtk.MovementStep, count: int, extend_selection: bool): ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_paste_clipboard(self) -> None: ...
    def do_populate_popup(self, popup: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_anchor(self) -> None: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_toggle_overwrite(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def forward_display_line(self, iter: Gtk.TextIter) -> bool: ...
    def forward_display_line_end(self, iter: Gtk.TextIter) -> bool: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accepts_tab(self) -> bool: ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_border(self) -> tuple[bool, None]: ...
    def get_border_width(self) -> int: ...
    def get_border_window_size(self, type: Gtk.TextWindowType) -> int: ...
    def get_bottom_margin(self) -> int: ...
    def get_buffer(self) -> Gtk.TextBuffer: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_cursor_locations(self, iter: Gtk.TextIter) -> tuple[None, None]: ...
    def get_cursor_visible(self) -> bool: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_default_attributes(self) -> Gtk.TextAttributes: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_editable(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_hadjustment(self) -> Gtk.Adjustment: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_hscroll_policy(self) -> Gtk.ScrollablePolicy: ...
    def get_indent(self) -> int: ...
    def get_input_hints(self) -> Gtk.InputHints: ...
    def get_input_purpose(self) -> Gtk.InputPurpose: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_iter_at_location(self, x: int, y: int) -> tuple[bool, None]: ...
    def get_iter_at_position(self, x: int, y: int) -> tuple[bool, None, None]: ...
    def get_iter_location(self, iter: Gtk.TextIter) -> Gdk.Rectangle: ...
    def get_justification(self) -> Gtk.Justification: ...
    def get_left_margin(self) -> int: ...
    def get_line_at_y(self, y: int) -> tuple[None, None]: ...
    def get_line_yrange(self, iter: Gtk.TextIter) -> tuple[None, None]: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_monospace(self) -> bool: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_overwrite(self) -> bool: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pixels_above_lines(self) -> int: ...
    def get_pixels_below_lines(self) -> int: ...
    def get_pixels_inside_wrap(self) -> int: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_right_margin(self) -> int: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_tabs(self) -> Union[Pango.TabArray, None]: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_top_margin(self) -> int: ...
    def get_vadjustment(self) -> Gtk.Adjustment: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visible_rect(self) -> Gdk.Rectangle: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_vscroll_policy(self) -> Gtk.ScrollablePolicy: ...
    def get_window(self, win: Gtk.TextWindowType) -> Union[Gdk.Window, None]: ...
    def get_window_type(self, window: Gdk.Window) -> Gtk.TextWindowType: ...
    def get_wrap_mode(self) -> Gtk.WrapMode: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def im_context_filter_keypress(self, event: Gdk.EventKey) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def move_child(self, child: Gtk.Widget, xpos: int, ypos: int): ...
    def move_mark_onscreen(self, mark: Gtk.TextMark) -> bool: ...
    def move_visually(self, iter: Gtk.TextIter, count: int) -> bool: ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_buffer(buffer: Gtk.TextBuffer) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    def place_cursor_onscreen(self) -> bool: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_cursor_blink(self) -> None: ...
    def reset_im_context(self) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def scroll_mark_onscreen(self, mark: Gtk.TextMark): ...
    def scroll_to_iter(self, iter: Gtk.TextIter, within_margin: float, use_align: bool, xalign: float, yalign: float) -> bool: ...
    def scroll_to_mark(self, mark: Gtk.TextMark, within_margin: float, use_align: bool, xalign: float, yalign: float): ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accepts_tab(self, accepts_tab: bool): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_border_window_size(self, type: Gtk.TextWindowType, size: int): ...
    def set_bottom_margin(self, bottom_margin: int): ...
    def set_buffer(self, buffer: Gtk.TextBuffer = ...): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_cursor_visible(self, setting: bool): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_editable(self, setting: bool): ...
    def set_error(self, message: str): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_hadjustment(self, hadjustment: Gtk.Adjustment = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_hscroll_policy(self, policy: Gtk.ScrollablePolicy): ...
    def set_indent(self, indent: int): ...
    def set_input_hints(self, hints: Gtk.InputHints): ...
    def set_input_purpose(self, purpose: Gtk.InputPurpose): ...
    def set_justification(self, justification: Gtk.Justification): ...
    def set_left_margin(self, left_margin: int): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_monospace(self, monospace: bool): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_overwrite(self, overwrite: bool): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_pixels_above_lines(self, pixels_above_lines: int): ...
    def set_pixels_below_lines(self, pixels_below_lines: int): ...
    def set_pixels_inside_wrap(self, pixels_inside_wrap: int): ...
    def set_profile(self, profile: Gimp.ColorProfile): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_right_margin(self, right_margin: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_tabs(self, tabs: Pango.TabArray): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_top_margin(self, top_margin: int): ...
    def set_vadjustment(self, vadjustment: Gtk.Adjustment = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_vscroll_policy(self, policy: Gtk.ScrollablePolicy): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap_mode(self, wrap_mode: Gtk.WrapMode): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def starts_display_line(self, iter: Gtk.TextIter) -> bool: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def window_to_buffer_coords(self, win: Gtk.TextWindowType, window_x: int, window_y: int) -> tuple[None, None]: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorProfileViewClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ColorProfileViewPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorScale(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Labeled(__gi_repository_Gtk.Grid):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def attach(self, child: Gtk.Widget, left: int, top: int, width: int, height: int): ...
    def attach_next_to(self, child: Gtk.Widget, sibling: Gtk.Widget, side: Gtk.PositionType, width: int, height: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_mnemonic_widget_changed(self, widget: Gtk.Widget): ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_row(self) -> int: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_children(self) -> list: ...
    def get_child_at(self, left: int, top: int) -> Union[Gtk.Widget, None]: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_homogeneous(self) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> Gtk.Label: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_baseline_position(self, row: int) -> Gtk.BaselinePosition: ...
    def get_row_homogeneous(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_column(self, position: int): ...
    def insert_next_to(self, sibling: Gtk.Widget, side: Gtk.PositionType): ...
    def insert_row(self, position: int): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_column(self, position: int): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_row(self, position: int): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_row(self, row: int): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_homogeneous(self, homogeneous: bool): ...
    def set_column_spacing(self, spacing: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_baseline_position(self, row: int, pos: Gtk.BaselinePosition): ...
    def set_row_homogeneous(self, homogeneous: bool): ...
    def set_row_spacing(self, spacing: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, text: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class LabelSpin(Labeled):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def attach(self, child: Gtk.Widget, left: int, top: int, width: int, height: int): ...
    def attach_next_to(self, child: Gtk.Widget, sibling: Gtk.Widget, side: Gtk.PositionType, width: int, height: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_mnemonic_widget_changed(self, widget: Gtk.Widget): ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_value_changed(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_row(self) -> int: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_children(self) -> list: ...
    def get_child_at(self, left: int, top: int) -> Union[Gtk.Widget, None]: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_homogeneous(self) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> Gtk.Label: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_baseline_position(self, row: int) -> Gtk.BaselinePosition: ...
    def get_row_homogeneous(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spin_button(self) -> Gtk.Widget: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_value(self) -> float: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_column(self, position: int): ...
    def insert_next_to(self, sibling: Gtk.Widget, side: Gtk.PositionType): ...
    def insert_row(self, position: int): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(text: str, value: float, lower: float, upper: float, digits: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_column(self, position: int): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_row(self, position: int): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_row(self, row: int): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_homogeneous(self, homogeneous: bool): ...
    def set_column_spacing(self, spacing: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_digits(self, digits: int): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_increments(self, step: float, page: float): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_baseline_position(self, row: int, pos: Gtk.BaselinePosition): ...
    def set_row_homogeneous(self, homogeneous: bool): ...
    def set_row_spacing(self, spacing: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, text: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_value(self, value: float): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ScaleEntry(LabelSpin):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def attach(self, child: Gtk.Widget, left: int, top: int, width: int, height: int): ...
    def attach_next_to(self, child: Gtk.Widget, sibling: Gtk.Widget, side: Gtk.PositionType, width: int, height: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_mnemonic_widget_changed(self, widget: Gtk.Widget): ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_value_changed(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_row(self) -> int: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_children(self) -> list: ...
    def get_child_at(self, left: int, top: int) -> Union[Gtk.Widget, None]: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_homogeneous(self) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> Gtk.Label: ...
    def get_logarithmic(self) -> bool: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_range(self) -> Gtk.Range: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_baseline_position(self, row: int) -> Gtk.BaselinePosition: ...
    def get_row_homogeneous(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spin_button(self) -> Gtk.Widget: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_value(self) -> float: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_column(self, position: int): ...
    def insert_next_to(self, sibling: Gtk.Widget, side: Gtk.PositionType): ...
    def insert_row(self, position: int): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(text: str, value: float, lower: float, upper: float, digits: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_column(self, position: int): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_row(self, position: int): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_row(self, row: int): ...
    def set_border_width(self, border_width: int): ...
    def set_bounds(self, lower: float, upper: float, limit_scale: bool): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_homogeneous(self, homogeneous: bool): ...
    def set_column_spacing(self, spacing: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_digits(self, digits: int): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_increments(self, step: float, page: float): ...
    def set_logarithmic(self, logarithmic: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_baseline_position(self, row: int, pos: Gtk.BaselinePosition): ...
    def set_row_homogeneous(self, homogeneous: bool): ...
    def set_row_spacing(self, spacing: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, text: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_value(self, value: float): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorScaleEntry(ScaleEntry):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def attach(self, child: Gtk.Widget, left: int, top: int, width: int, height: int): ...
    def attach_next_to(self, child: Gtk.Widget, sibling: Gtk.Widget, side: Gtk.PositionType, width: int, height: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_mnemonic_widget_changed(self, widget: Gtk.Widget): ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_value_changed(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_row(self) -> int: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_children(self) -> list: ...
    def get_child_at(self, left: int, top: int) -> Union[Gtk.Widget, None]: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_homogeneous(self) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> Gtk.Label: ...
    def get_logarithmic(self) -> bool: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_range(self) -> Gtk.Range: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_baseline_position(self, row: int) -> Gtk.BaselinePosition: ...
    def get_row_homogeneous(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spin_button(self) -> Gtk.Widget: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_value(self) -> float: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_column(self, position: int): ...
    def insert_next_to(self, sibling: Gtk.Widget, side: Gtk.PositionType): ...
    def insert_row(self, position: int): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(text: str, value: float, lower: float, upper: float, digits: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_column(self, position: int): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_row(self, position: int): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_row(self, row: int): ...
    def set_border_width(self, border_width: int): ...
    def set_bounds(self, lower: float, upper: float, limit_scale: bool): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_homogeneous(self, homogeneous: bool): ...
    def set_column_spacing(self, spacing: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_digits(self, digits: int): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_increments(self, step: float, page: float): ...
    def set_logarithmic(self, logarithmic: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_baseline_position(self, row: int, pos: Gtk.BaselinePosition): ...
    def set_row_homogeneous(self, homogeneous: bool): ...
    def set_row_spacing(self, spacing: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, text: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_value(self, value: float): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorScaleEntryClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ColorScales(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorSelect(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorSelection(__gi_overrides_Gtk.Box):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def color_changed(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_color_changed(self) -> None: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_color(self) -> Gimp.RGB: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_notebook(self) -> Gtk.Widget: ...
    def get_no_show_all(self) -> bool: ...
    def get_old_color(self) -> Gimp.RGB: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_right_vbox(self) -> Gtk.Box: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_show_alpha(self) -> bool: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset(self) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_color(self, color: Gimp.RGB): ...
    def set_composite_name(self, name: str): ...
    def set_config(self, config: Gimp.ColorConfig): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_old_color(self, color: Gimp.RGB): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_show_alpha(self, show_alpha: bool): ...
    def set_simulation(self, profile: Gimp.ColorProfile, intent: Gimp.ColorRenderingIntent, bpc: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorSelectionClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    color_changed: Incomplete
    parent_class: Incomplete

class ColorSelectionPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ColorSelectorChannel(__gobject.GEnum):
    GIMP_COLOR_SELECTOR_HUE: int
    GIMP_COLOR_SELECTOR_SATURATION: int
    GIMP_COLOR_SELECTOR_VALUE: int
    GIMP_COLOR_SELECTOR_RED: int
    GIMP_COLOR_SELECTOR_GREEN: int
    GIMP_COLOR_SELECTOR_BLUE: int
    GIMP_COLOR_SELECTOR_ALPHA: int
    GIMP_COLOR_SELECTOR_LCH_LIGHTNESS: int
    GIMP_COLOR_SELECTOR_LCH_CHROMA: int
    GIMP_COLOR_SELECTOR_LCH_HUE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ALPHA: int
    BLUE: int
    GREEN: int
    HUE: int
    LCH_CHROMA: int
    LCH_HUE: int
    LCH_LIGHTNESS: int
    RED: int
    SATURATION: int
    VALUE: int

class ColorSelectorClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    channel_changed: Incomplete
    color_changed: Incomplete
    help_id: Incomplete
    icon_name: Incomplete
    model_visible_changed: Incomplete
    name: Incomplete
    parent_class: Incomplete
    set_channel: Incomplete
    set_color: Incomplete
    set_config: Incomplete
    set_model_visible: Incomplete
    set_show_alpha: Incomplete
    set_simulation: Incomplete
    set_toggles_sensitive: Incomplete
    set_toggles_visible: Incomplete

class ColorSelectorModel(__gobject.GEnum):
    GIMP_COLOR_SELECTOR_MODEL_RGB: int
    GIMP_COLOR_SELECTOR_MODEL_LCH: int
    GIMP_COLOR_SELECTOR_MODEL_HSV: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    HSV: int
    LCH: int
    RGB: int

class ColorSelectorPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Controller(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Dialog(__gi_overrides_Gtk.Dialog):
    def activate(self) -> bool: ...
    def activate_default(self) -> bool: ...
    def activate_focus(self) -> bool: ...
    def activate_key(self, event: Gdk.EventKey) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_accel_group(self, accel_group: Gtk.AccelGroup): ...
    def add_action_widget(self, child: Gtk.Widget, response_id: int): ...
    def add_button(self, button_text: str, response_id: int) -> Gtk.Widget: ...
    def add_buttons(self, *args) -> None: ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic(self, keyval: int, target: Gtk.Widget): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def begin_move_drag(self, button: int, root_x: int, root_y: int, timestamp: int): ...
    def begin_resize_drag(self, edge: Gdk.WindowEdge, button: int, root_x: int, root_y: int, timestamp: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def close(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def deiconify(self) -> None: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate_default(self) -> None: ...
    def do_activate_focus(self) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_close(self) -> None: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enable_debugging(self, toggle: bool) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_keys_changed(self) -> None: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_response(self, response_id: int): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus(self, focus: Gtk.Widget = ...): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def fullscreen(self) -> None: ...
    def fullscreen_on_monitor(self, screen: Gdk.Screen, monitor: int): ...
    def getv(self, names: list, values: list): ...
    def get_accept_focus(self) -> bool: ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_area(self) -> Gtk.Box: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_application(self) -> Union[Gtk.Application, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_attached_to(self) -> Union[Gtk.Widget, None]: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_content_area(self) -> Gtk.Box: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_decorated(self) -> bool: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_icon_list() -> list: ...
    @staticmethod
    def get_default_icon_name() -> str: ...
    def get_default_size(self) -> tuple[None, None]: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_default_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_deletable(self) -> bool: ...
    def get_destroy_with_parent(self) -> bool: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_on_map(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_visible(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_gravity(self) -> Gdk.Gravity: ...
    def get_group(self) -> Gtk.WindowGroup: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_resize_grip(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_header_bar(self) -> Gtk.HeaderBar: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_hide_titlebar_when_maximized(self) -> bool: ...
    def get_icon(self) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_list(self) -> list: ...
    def get_icon_name(self) -> Union[str, None]: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_mnemonics_visible(self) -> bool: ...
    def get_mnemonic_modifier(self) -> Gdk.ModifierType: ...
    def get_modal(self) -> bool: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resizable(self) -> bool: ...
    def get_resize_grip_area(self) -> tuple[bool, None]: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_response_for_widget(self, widget: Gtk.Widget) -> int: ...
    def get_role(self) -> Union[str, None]: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size(self) -> tuple[None, None]: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_skip_pager_hint(self) -> bool: ...
    def get_skip_taskbar_hint(self) -> bool: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> Union[str, None]: ...
    def get_titlebar(self) -> Union[Gtk.Widget, None]: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_transient_for(self) -> Union[Gtk.Window, None]: ...
    def get_type_hint(self) -> Gdk.WindowTypeHint: ...
    def get_urgency_hint(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_widget_for_response(self, response_id: int) -> Union[Gtk.Widget, None]: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_window_type(self) -> Gtk.WindowType: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_group(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_toplevel_focus(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def iconify(self) -> None: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_active(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_maximized(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def list_toplevels() -> list: ...
    def map(self) -> None: ...
    def maximize(self) -> None: ...
    def mnemonic_activate(self, keyval: int, modifier: Gdk.ModifierType) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def move(self, x: int, y: int): ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def parse_geometry(self, geometry: str) -> bool: ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def present(self) -> None: ...
    def present_with_time(self, timestamp: int): ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    def propagate_key_event(self, event: Gdk.EventKey) -> bool: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_accel_group(self, accel_group: Gtk.AccelGroup): ...
    def remove_mnemonic(self, keyval: int, target: Gtk.Widget): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def reshow_with_initial_size(self) -> None: ...
    def resize(self, width: int, height: int): ...
    def resize_children(self) -> None: ...
    def resize_grip_is_visible(self) -> bool: ...
    def resize_to_geometry(self, width: int, height: int): ...
    def response(self, response_id: int): ...
    def run(self) -> int: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accept_focus(self, setting: bool): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_alternative_button_order_from_array(self, order: list): ...
    def set_application(self, application: Gtk.Application = ...): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_attached_to(self, attach_widget: Gtk.Widget = ...): ...
    @staticmethod
    def set_auto_startup_notification(setting: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_decorated(self, setting: bool): ...
    def set_default(self, default_widget: Gtk.Widget = ...): ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_default_geometry(self, width: int, height: int): ...
    @staticmethod
    def set_default_icon(icon: GdkPixbuf.Pixbuf): ...
    @staticmethod
    def set_default_icon_from_file(filename: str) -> bool: ...
    @staticmethod
    def set_default_icon_list(list: list): ...
    @staticmethod
    def set_default_icon_name(name: str): ...
    def set_default_response(self, response_id: int): ...
    def set_default_size(self, width: int, height: int): ...
    def set_deletable(self, setting: bool): ...
    def set_destroy_with_parent(self, setting: bool): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus(self, focus: Gtk.Widget = ...): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_on_map(self, setting: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_visible(self, setting: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_geometry_hints(self, geometry_widget: Gtk.Widget, geometry: Gdk.Geometry, geom_mask: Gdk.WindowHints): ...
    def set_gravity(self, gravity: Gdk.Gravity): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_resize_grip(self, value: bool): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_user_ref_count(self, setting: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_hide_titlebar_when_maximized(self, setting: bool): ...
    def set_icon(self, icon: GdkPixbuf.Pixbuf = ...): ...
    def set_icon_from_file(self, filename: str) -> bool: ...
    def set_icon_list(self, list: list): ...
    def set_icon_name(self, name: str = ...): ...
    @staticmethod
    def set_interactive_debugging(enable: bool): ...
    def set_keep_above(self, setting: bool): ...
    def set_keep_below(self, setting: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_mnemonics_visible(self, setting: bool): ...
    def set_mnemonic_modifier(self, modifier: Gdk.ModifierType): ...
    def set_modal(self, modal: bool): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_position(self, position: Gtk.WindowPosition): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resizable(self, resizable: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_response_sensitive(self, response_id: int, setting: bool): ...
    def set_role(self, role: str): ...
    def set_screen(self, screen: Gdk.Screen): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_skip_pager_hint(self, setting: bool): ...
    def set_skip_taskbar_hint(self, setting: bool): ...
    def set_startup_id(self, startup_id: str): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_titlebar(self, titlebar: Gtk.Widget = ...): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_transient_for(self, parent: Gtk.Window = ...): ...
    def set_type_hint(self, hint: Gdk.WindowTypeHint): ...
    def set_urgency_hint(self, setting: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wmclass(self, wmclass_name: str, wmclass_class: str): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stick(self) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unfullscreen(self) -> None: ...
    def unmap(self) -> None: ...
    def unmaximize(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def unstick(self) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> GimpUi.Dialog: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> GimpUi.Dialog: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    action_area: Incomplete
    bin: Incomplete
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    vbox: Incomplete
    widget: Incomplete
    window: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class DialogClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class DialogPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class DrawableComboBox(IntComboBox):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_attribute(self, cell: Gtk.CellRenderer, attribute: str, column: int): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: Gtk.CellRenderer): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, value: int, callback: GObject.Callback, data) -> int: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_changed(self) -> None: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_format_entry_text(self, path: str) -> str: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_active(self) -> tuple[bool, None]: ...
    def get_active_id(self) -> Union[str, None]: ...
    def get_active_iter(*args, **kwargs) -> None: ...
    def get_active_user_data(self) -> tuple[bool, user_data]: ...
    def get_add_tearoffs(self) -> bool: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> Union[Gtk.CellArea, None]: ...
    def get_border_width(self) -> int: ...
    def get_button_sensitivity(self) -> Gtk.SensitivityType: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_cells(self) -> list: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_span_column(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_entry_text_column(self) -> int: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_entry(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_id_column(self) -> int: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> str: ...
    def get_layout(self) -> GimpUi.IntComboBoxLayout: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model(self) -> Gtk.TreeModel: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_popup_accessible(self) -> Atk.Object: ...
    def get_popup_fixed_width(self) -> bool: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_span_column(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_wrap_width(self) -> int: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(constraint: GimpUi.ItemConstraintFunc) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_area(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_area_and_entry(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_entry() -> Gtk.Widget: ...
    @staticmethod
    def new_with_model(model: Gtk.TreeModel) -> Gtk.Widget: ...
    @staticmethod
    def new_with_model_and_entry(model: Gtk.TreeModel) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, cell: Gtk.CellRenderer, expand: bool): ...
    def pack_start(self, cell: Gtk.CellRenderer, expand: bool): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_for_device(self, device: Gdk.Device): ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder(self, cell: Gtk.CellRenderer, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_active(self, value: int) -> bool: ...
    def set_active_by_user_data(self, user_data) -> bool: ...
    def set_active_id(self, active_id: str) -> bool: ...
    def set_active_iter(self, iter: Gtk.TreeIter = ...): ...
    def set_add_tearoffs(self, add_tearoffs: bool): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_button_sensitivity(self, sensitivity: Gtk.SensitivityType): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_cell_data_func(self, cell: Gtk.CellRenderer, func: Gtk.CellLayoutDataFunc = ..., func_data: Incomplete | None = ...): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_span_column(self, column_span: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_entry_text_column(self, text_column: int): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_id_column(self, id_column: int): ...
    def set_label(self, label: str): ...
    def set_layout(self, layout: GimpUi.IntComboBoxLayout): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_model(self, model: Gtk.TreeModel = ...): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_popup_fixed_width(self, fixed: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_separator_func(self, func: Gtk.TreeViewRowSeparatorFunc, data: Incomplete | None = ...): ...
    def set_row_span_column(self, row_span: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_sensitivity(self, func: GimpUi.IntSensitivityFunc, data: Incomplete | None = ...): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap_width(self, width: int): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ScrolledPreview(Preview):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self) -> None: ...
    def do_draw_buffer(self, buffer: list, rowstride: int): ...
    def do_draw_thumb(self, area: GimpUi.PreviewArea, width: int, height: int): ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_invalidated(self) -> None: ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_cursor(self) -> None: ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_transform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_untransform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self) -> None: ...
    def draw_buffer(self, buffer: list, rowstride: int): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze(self) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_adjustments(self) -> tuple[None, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> GimpUi.PreviewArea: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_bounds(self) -> tuple[None, None, None, None]: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_controls(self) -> Gtk.Box: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_default_cursor(self) -> Gdk.Cursor: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame(self) -> Gtk.AspectFrame: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_grid(self) -> Gtk.Grid: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_offsets(self) -> tuple[None, None]: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size(self) -> tuple[None, None]: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_update(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def invalidate(self) -> None: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(orientation: Gtk.Orientation, spacing: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_bounds(self, xmin: int, ymin: int, xmax: int, ymax: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_default_cursor(self, cursor: Gdk.Cursor): ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_offsets(self, xoff: int, yoff: int): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_policy(self, hscrollbar_policy: Gtk.PolicyType, vscrollbar_policy: Gtk.PolicyType): ...
    def set_position(self, x: int, y: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size(self, width: int, height: int): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_update(self, update: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw(self) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def transform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def untransform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class DrawablePreview(ScrolledPreview):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self) -> None: ...
    def do_draw_buffer(self, buffer: list, rowstride: int): ...
    def do_draw_thumb(self, area: GimpUi.PreviewArea, width: int, height: int): ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_invalidated(self) -> None: ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_cursor(self) -> None: ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_transform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_untransform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self) -> None: ...
    def draw_buffer(self, buffer: list, rowstride: int): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze(self) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_adjustments(self) -> tuple[None, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> GimpUi.PreviewArea: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_bounds(self) -> tuple[None, None, None, None]: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_controls(self) -> Gtk.Box: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_default_cursor(self) -> Gdk.Cursor: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_drawable(self) -> Gimp.Drawable: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame(self) -> Gtk.AspectFrame: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_grid(self) -> Gtk.Grid: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_offsets(self) -> tuple[None, None]: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size(self) -> tuple[None, None]: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_update(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def invalidate(self) -> None: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(orientation: Gtk.Orientation, spacing: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_drawable(drawable: Gimp.Drawable) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_bounds(self, xmin: int, ymin: int, xmax: int, ymax: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_default_cursor(self, cursor: Gdk.Cursor): ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_offsets(self, xoff: int, yoff: int): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_policy(self, hscrollbar_policy: Gtk.PolicyType, vscrollbar_policy: Gtk.PolicyType): ...
    def set_position(self, x: int, y: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size(self, width: int, height: int): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_update(self, update: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw(self) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def transform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def untransform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class DrawablePreviewClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class DrawablePreviewPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class EnumComboBox(IntComboBox):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_attribute(self, cell: Gtk.CellRenderer, attribute: str, column: int): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: Gtk.CellRenderer): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, value: int, callback: GObject.Callback, data) -> int: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_changed(self) -> None: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_format_entry_text(self, path: str) -> str: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_active(self) -> tuple[bool, None]: ...
    def get_active_id(self) -> Union[str, None]: ...
    def get_active_iter(*args, **kwargs) -> None: ...
    def get_active_user_data(self) -> tuple[bool, user_data]: ...
    def get_add_tearoffs(self) -> bool: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> Union[Gtk.CellArea, None]: ...
    def get_border_width(self) -> int: ...
    def get_button_sensitivity(self) -> Gtk.SensitivityType: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_cells(self) -> list: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_span_column(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_entry_text_column(self) -> int: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_entry(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_id_column(self) -> int: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> str: ...
    def get_layout(self) -> GimpUi.IntComboBoxLayout: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model(self) -> Gtk.TreeModel: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_popup_accessible(self) -> Atk.Object: ...
    def get_popup_fixed_width(self) -> bool: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_span_column(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_wrap_width(self) -> int: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(enum_type: GType) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_area(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_area_and_entry(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_entry() -> Gtk.Widget: ...
    @staticmethod
    def new_with_model(enum_store: GimpUi.EnumStore) -> Gtk.Widget: ...
    @staticmethod
    def new_with_model_and_entry(model: Gtk.TreeModel) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, cell: Gtk.CellRenderer, expand: bool): ...
    def pack_start(self, cell: Gtk.CellRenderer, expand: bool): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_for_device(self, device: Gdk.Device): ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder(self, cell: Gtk.CellRenderer, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_active(self, value: int) -> bool: ...
    def set_active_by_user_data(self, user_data) -> bool: ...
    def set_active_id(self, active_id: str) -> bool: ...
    def set_active_iter(self, iter: Gtk.TreeIter = ...): ...
    def set_add_tearoffs(self, add_tearoffs: bool): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_button_sensitivity(self, sensitivity: Gtk.SensitivityType): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_cell_data_func(self, cell: Gtk.CellRenderer, func: Gtk.CellLayoutDataFunc = ..., func_data: Incomplete | None = ...): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_span_column(self, column_span: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_entry_text_column(self, text_column: int): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_icon_prefix(self, icon_prefix: str): ...
    def set_id_column(self, id_column: int): ...
    def set_label(self, label: str): ...
    def set_layout(self, layout: GimpUi.IntComboBoxLayout): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_model(self, model: Gtk.TreeModel = ...): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_popup_fixed_width(self, fixed: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_separator_func(self, func: Gtk.TreeViewRowSeparatorFunc, data: Incomplete | None = ...): ...
    def set_row_span_column(self, row_span: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_sensitivity(self, func: GimpUi.IntSensitivityFunc, data: Incomplete | None = ...): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap_width(self, width: int): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class EnumComboBoxClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class EnumComboBoxPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class EnumLabel(__gi_overrides_Gtk.Label):
    def activate(self) -> bool: ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_notify(self, child_property: str): ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate_link(self, uri: str) -> bool: ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_composited_changed(self) -> None: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_copy_clipboard(self) -> None: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_cursor(self, step: Gtk.MovementStep, count: int, extend_selection: bool): ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_populate_popup(self, menu: Gtk.Menu): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_alignment(self) -> tuple[None, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_angle(self) -> float: ...
    def get_app_paintable(self) -> bool: ...
    def get_attributes(self) -> Union[Pango.AttrList, None]: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_current_uri(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_ellipsize(self) -> Pango.EllipsizeMode: ...
    def get_events(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_justify(self) -> Gtk.Justification: ...
    def get_label(self) -> str: ...
    def get_layout(self) -> Pango.Layout: ...
    def get_layout_offsets(self) -> tuple[None, None]: ...
    def get_lines(self) -> int: ...
    def get_line_wrap(self) -> bool: ...
    def get_line_wrap_mode(self) -> Pango.WrapMode: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_max_width_chars(self) -> int: ...
    def get_mnemonic_keyval(self) -> int: ...
    def get_mnemonic_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_padding(self) -> tuple[None, None]: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_selectable(self) -> bool: ...
    def get_selection_bounds(self) -> tuple[bool, None, None]: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_single_line_mode(self) -> bool: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_track_visited_links(self) -> bool: ...
    def get_use_markup(self) -> bool: ...
    def get_use_underline(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_width_chars(self) -> int: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_xalign(self) -> float: ...
    def get_yalign(self) -> float: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(enum_type: GType, value: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_mnemonic(str: str) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def run_dispose(self) -> None: ...
    def select_region(self, start_offset: int, end_offset: int): ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_alignment(self, xalign: float, yalign: float): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_angle(self, angle: float): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_attributes(self, attrs: Pango.AttrList = ...): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_ellipsize(self, mode: Pango.EllipsizeMode): ...
    def set_events(self, events: int): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_justify(self, jtype: Gtk.Justification): ...
    def set_label(self, str: str): ...
    def set_lines(self, lines: int): ...
    def set_line_wrap(self, wrap: bool): ...
    def set_line_wrap_mode(self, wrap_mode: Pango.WrapMode): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_markup(self, str: str): ...
    def set_markup_with_mnemonic(self, str: str): ...
    def set_max_width_chars(self, n_chars: int): ...
    def set_mnemonic_widget(self, widget: Gtk.Widget = ...): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_padding(self, xpad: int, ypad: int): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_pattern(self, pattern: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_selectable(self, setting: bool): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_single_line_mode(self, single_line_mode: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, str: str): ...
    def set_text_with_mnemonic(self, str: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_track_visited_links(self, track_links: bool): ...
    def set_use_markup(self, setting: bool): ...
    def set_use_underline(self, setting: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_value(self, value: int): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_width_chars(self, n_chars: int): ...
    def set_window(self, window: Gdk.Window): ...
    def set_xalign(self, xalign: float): ...
    def set_yalign(self, yalign: float): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    misc: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class EnumLabelClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class EnumLabelPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class IntStore(__gi_overrides_Gtk.ListStore):
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def append(self, row: Incomplete | None = ...) -> None: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def clear(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def drag_data_delete(self, path: Gtk.TreePath) -> bool: ...
    def drag_data_get(self, path: Gtk.TreePath, selection_data: Gtk.SelectionData) -> bool: ...
    def drag_data_received(self, dest: Gtk.TreePath, selection_data: Gtk.SelectionData) -> bool: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def filter_new(self, root: Gtk.TreePath) -> Gtk.TreeModel: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, func: Gtk.TreeModelForeachFunc, user_data: Incomplete | None = ...): ...
    def freeze_notify(self) -> None: ...
    def get(self, treeiter, *columns) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_column_type(self, index_: int) -> GType: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_flags(self) -> Gtk.TreeModelFlags: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_iter(self, path) -> None: ...
    def get_iter_first(*args, **kwargs) -> None: ...
    def get_iter_from_string(*args, **kwargs) -> None: ...
    def get_name(self) -> str: ...
    def get_n_columns(self) -> int: ...
    def get_path(self, iter: Gtk.TreeIter) -> Gtk.TreePath: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_sort_column_id(*args, **kwargs) -> None: ...
    def get_string_from_iter(self, iter: Gtk.TreeIter) -> str: ...
    def get_value(self, iter: Gtk.TreeIter, column: int) -> GObject.Value: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_default_sort_func(self) -> bool: ...
    def insert(self, position, row: Incomplete | None = ...) -> None: ...
    def insert_after(self, sibling, row: Incomplete | None = ...) -> None: ...
    def insert_before(self, sibling, row: Incomplete | None = ...) -> None: ...
    def insert_with_values(self, *args, **kwargs) -> None: ...
    def insert_with_valuesv(self, position: int, columns: list, values: list) -> Gtk.TreeIter: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def iter_children(*args, **kwargs) -> None: ...
    def iter_has_child(self, iter: Gtk.TreeIter) -> bool: ...
    def iter_is_valid(self, iter: Gtk.TreeIter) -> bool: ...
    def iter_next(self, aiter) -> None: ...
    def iter_nth_child(*args, **kwargs) -> None: ...
    def iter_n_children(self, iter: Gtk.TreeIter) -> int: ...
    def iter_parent(*args, **kwargs) -> None: ...
    def iter_previous(self, aiter) -> None: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def lookup_by_user_data(model: Gtk.TreeModel, user_data) -> tuple[bool, None]: ...
    @staticmethod
    def lookup_by_value(model: Gtk.TreeModel, value: int) -> tuple[bool, None]: ...
    def move_after(self, iter: Gtk.TreeIter, position: Gtk.TreeIter = ...): ...
    def move_before(self, iter: Gtk.TreeIter, position: Gtk.TreeIter = ...): ...
    @staticmethod
    def new(types: list) -> Gtk.ListStore: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def prepend(self, row: Incomplete | None = ...) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_node(self, iter: Gtk.TreeIter): ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def remove(self, iter: Gtk.TreeIter) -> bool: ...
    def reorder(self, new_order: list): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def rows_reordered(self, path, iter, new_order) -> None: ...
    def row_changed(self, path, iter) -> None: ...
    def row_deleted(self, path) -> None: ...
    def row_draggable(self, path: Gtk.TreePath) -> bool: ...
    def row_drop_possible(self, dest_path: Gtk.TreePath, selection_data: Gtk.SelectionData) -> bool: ...
    def row_has_child_toggled(self, path, iter) -> None: ...
    def row_inserted(self, path, iter) -> None: ...
    def run_dispose(self) -> None: ...
    def set(self, treeiter, *args) -> None: ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_column_types(self, types: list): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_default_sort_func(self, sort_func, user_data: Incomplete | None = ...) -> None: ...
    def set_name(self, name: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_row(self, treeiter, row) -> None: ...
    def set_sort_column_id(self, sort_column_id: int, order: Gtk.SortType): ...
    def set_sort_func(self, sort_column_id, sort_func, user_data: Incomplete | None = ...) -> None: ...
    def set_value(self, treeiter, column, value) -> None: ...
    def sort_column_changed(self) -> None: ...
    def sort_new_with_model(self) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def swap(self, a: Gtk.TreeIter, b: Gtk.TreeIter): ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unref_node(self, iter: Gtk.TreeIter): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    def __delitem__(self, key) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, key) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *column_types) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class EnumStore(IntStore):
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def append(self, row: Incomplete | None = ...) -> None: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def clear(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def drag_data_delete(self, path: Gtk.TreePath) -> bool: ...
    def drag_data_get(self, path: Gtk.TreePath, selection_data: Gtk.SelectionData) -> bool: ...
    def drag_data_received(self, dest: Gtk.TreePath, selection_data: Gtk.SelectionData) -> bool: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def filter_new(self, root: Gtk.TreePath) -> Gtk.TreeModel: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, func: Gtk.TreeModelForeachFunc, user_data: Incomplete | None = ...): ...
    def freeze_notify(self) -> None: ...
    def get(self, treeiter, *columns) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_column_type(self, index_: int) -> GType: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_flags(self) -> Gtk.TreeModelFlags: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_iter(self, path) -> None: ...
    def get_iter_first(*args, **kwargs) -> None: ...
    def get_iter_from_string(*args, **kwargs) -> None: ...
    def get_name(self) -> str: ...
    def get_n_columns(self) -> int: ...
    def get_path(self, iter: Gtk.TreeIter) -> Gtk.TreePath: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_sort_column_id(*args, **kwargs) -> None: ...
    def get_string_from_iter(self, iter: Gtk.TreeIter) -> str: ...
    def get_value(self, iter: Gtk.TreeIter, column: int) -> GObject.Value: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_default_sort_func(self) -> bool: ...
    def insert(self, position, row: Incomplete | None = ...) -> None: ...
    def insert_after(self, sibling, row: Incomplete | None = ...) -> None: ...
    def insert_before(self, sibling, row: Incomplete | None = ...) -> None: ...
    def insert_with_values(self, *args, **kwargs) -> None: ...
    def insert_with_valuesv(self, position: int, columns: list, values: list) -> Gtk.TreeIter: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def iter_children(*args, **kwargs) -> None: ...
    def iter_has_child(self, iter: Gtk.TreeIter) -> bool: ...
    def iter_is_valid(self, iter: Gtk.TreeIter) -> bool: ...
    def iter_next(self, aiter) -> None: ...
    def iter_nth_child(*args, **kwargs) -> None: ...
    def iter_n_children(self, iter: Gtk.TreeIter) -> int: ...
    def iter_parent(*args, **kwargs) -> None: ...
    def iter_previous(self, aiter) -> None: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def lookup_by_user_data(model: Gtk.TreeModel, user_data) -> tuple[bool, None]: ...
    @staticmethod
    def lookup_by_value(model: Gtk.TreeModel, value: int) -> tuple[bool, None]: ...
    def move_after(self, iter: Gtk.TreeIter, position: Gtk.TreeIter = ...): ...
    def move_before(self, iter: Gtk.TreeIter, position: Gtk.TreeIter = ...): ...
    @staticmethod
    def new(enum_type: GType) -> Gtk.ListStore: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_range(enum_type: GType, minimum: int, maximum: int) -> Gtk.ListStore: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def prepend(self, row: Incomplete | None = ...) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_node(self, iter: Gtk.TreeIter): ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def remove(self, iter: Gtk.TreeIter) -> bool: ...
    def reorder(self, new_order: list): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def rows_reordered(self, path, iter, new_order) -> None: ...
    def row_changed(self, path, iter) -> None: ...
    def row_deleted(self, path) -> None: ...
    def row_draggable(self, path: Gtk.TreePath) -> bool: ...
    def row_drop_possible(self, dest_path: Gtk.TreePath, selection_data: Gtk.SelectionData) -> bool: ...
    def row_has_child_toggled(self, path, iter) -> None: ...
    def row_inserted(self, path, iter) -> None: ...
    def run_dispose(self) -> None: ...
    def set(self, treeiter, *args) -> None: ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_column_types(self, types: list): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_default_sort_func(self, sort_func, user_data: Incomplete | None = ...) -> None: ...
    def set_icon_prefix(self, icon_prefix: str): ...
    def set_name(self, name: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_row(self, treeiter, row) -> None: ...
    def set_sort_column_id(self, sort_column_id: int, order: Gtk.SortType): ...
    def set_sort_func(self, sort_column_id, sort_func, user_data: Incomplete | None = ...) -> None: ...
    def set_value(self, treeiter, column, value) -> None: ...
    def sort_column_changed(self) -> None: ...
    def sort_new_with_model(self) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def swap(self, a: Gtk.TreeIter, b: Gtk.TreeIter): ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unref_node(self, iter: Gtk.TreeIter): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    def __delitem__(self, key) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, key) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *column_types) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class EnumStoreClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class EnumStorePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ExportCapabilities(__gobject.GFlags):
    GIMP_EXPORT_CAN_HANDLE_RGB: int
    GIMP_EXPORT_CAN_HANDLE_GRAY: int
    GIMP_EXPORT_CAN_HANDLE_INDEXED: int
    GIMP_EXPORT_CAN_HANDLE_BITMAP: int
    GIMP_EXPORT_CAN_HANDLE_ALPHA: int
    GIMP_EXPORT_CAN_HANDLE_LAYERS: int
    GIMP_EXPORT_CAN_HANDLE_LAYERS_AS_ANIMATION: int
    GIMP_EXPORT_CAN_HANDLE_LAYER_MASKS: int
    GIMP_EXPORT_NEEDS_ALPHA: int
    GIMP_EXPORT_NEEDS_CROP: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    CAN_HANDLE_ALPHA: int
    CAN_HANDLE_BITMAP: int
    CAN_HANDLE_GRAY: int
    CAN_HANDLE_INDEXED: int
    CAN_HANDLE_LAYERS: int
    CAN_HANDLE_LAYERS_AS_ANIMATION: int
    CAN_HANDLE_LAYER_MASKS: int
    CAN_HANDLE_RGB: int
    NEEDS_ALPHA: int
    NEEDS_CROP: int

class ExportReturn(__gobject.GEnum):
    GIMP_EXPORT_CANCEL: int
    GIMP_EXPORT_IGNORE: int
    GIMP_EXPORT_EXPORT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CANCEL: int
    EXPORT: int
    IGNORE: int

class FileEntry(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class FontSelectButton(SelectButton):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def close_popup(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_font_set(self, font_name: str, dialog_closing: bool): ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font(self) -> str: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(title: str, font_name: str) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font(self, font_name: str = ...): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    temp_callback: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class FontSelectButtonClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    font_set: Incomplete
    parent_class: Incomplete

class FontSelectButtonPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Frame(__gi_repository_Gtk.Frame):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_child_allocation(self, allocation: Gdk.Rectangle): ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> Union[str, None]: ...
    def get_label_align(self) -> tuple[None, None]: ...
    def get_label_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_shadow_type(self) -> Gtk.ShadowType: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(label: str) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_label(self, label: str = ...): ...
    def set_label_align(self, xalign: float, yalign: float): ...
    def set_label_widget(self, label_widget: Gtk.Widget = ...): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_shadow_type(self, type: Gtk.ShadowType): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    bin: Incomplete
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class FrameClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class FramePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class GradientSelectButton(SelectButton):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def close_popup(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_gradient_set(self, gradient_name: str, width: int, gradient_data: float, dialog_closing: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_gradient(self) -> str: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(title: str, gradient_name: str) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_gradient(self, gradient_name: str = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    temp_callback: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class GradientSelectButtonClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    gradient_set: Incomplete
    parent_class: Incomplete

class GradientSelectButtonPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class HintBox(__gi_overrides_Gtk.Box):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(hint: str) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class HintBoxClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class HintBoxPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ImageComboBox(IntComboBox):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_attribute(self, cell: Gtk.CellRenderer, attribute: str, column: int): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: Gtk.CellRenderer): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, value: int, callback: GObject.Callback, data) -> int: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_changed(self) -> None: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_format_entry_text(self, path: str) -> str: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_active(self) -> tuple[bool, None]: ...
    def get_active_id(self) -> Union[str, None]: ...
    def get_active_iter(*args, **kwargs) -> None: ...
    def get_active_user_data(self) -> tuple[bool, user_data]: ...
    def get_add_tearoffs(self) -> bool: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> Union[Gtk.CellArea, None]: ...
    def get_border_width(self) -> int: ...
    def get_button_sensitivity(self) -> Gtk.SensitivityType: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_cells(self) -> list: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_span_column(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_entry_text_column(self) -> int: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_entry(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_id_column(self) -> int: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> str: ...
    def get_layout(self) -> GimpUi.IntComboBoxLayout: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model(self) -> Gtk.TreeModel: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_popup_accessible(self) -> Atk.Object: ...
    def get_popup_fixed_width(self) -> bool: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_span_column(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_wrap_width(self) -> int: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(constraint: GimpUi.ImageConstraintFunc) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_area(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_area_and_entry(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_entry() -> Gtk.Widget: ...
    @staticmethod
    def new_with_model(model: Gtk.TreeModel) -> Gtk.Widget: ...
    @staticmethod
    def new_with_model_and_entry(model: Gtk.TreeModel) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, cell: Gtk.CellRenderer, expand: bool): ...
    def pack_start(self, cell: Gtk.CellRenderer, expand: bool): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_for_device(self, device: Gdk.Device): ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder(self, cell: Gtk.CellRenderer, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_active(self, value: int) -> bool: ...
    def set_active_by_user_data(self, user_data) -> bool: ...
    def set_active_id(self, active_id: str) -> bool: ...
    def set_active_iter(self, iter: Gtk.TreeIter = ...): ...
    def set_add_tearoffs(self, add_tearoffs: bool): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_button_sensitivity(self, sensitivity: Gtk.SensitivityType): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_cell_data_func(self, cell: Gtk.CellRenderer, func: Gtk.CellLayoutDataFunc = ..., func_data: Incomplete | None = ...): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_span_column(self, column_span: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_entry_text_column(self, text_column: int): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_id_column(self, id_column: int): ...
    def set_label(self, label: str): ...
    def set_layout(self, layout: GimpUi.IntComboBoxLayout): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_model(self, model: Gtk.TreeModel = ...): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_popup_fixed_width(self, fixed: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_separator_func(self, func: Gtk.TreeViewRowSeparatorFunc, data: Incomplete | None = ...): ...
    def set_row_span_column(self, row_span: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_sensitivity(self, func: GimpUi.IntSensitivityFunc, data: Incomplete | None = ...): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap_width(self, width: int): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class IntComboBoxClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class IntComboBoxLayout(__gobject.GEnum):
    GIMP_INT_COMBO_BOX_LAYOUT_ICON_ONLY: int
    GIMP_INT_COMBO_BOX_LAYOUT_ABBREVIATED: int
    GIMP_INT_COMBO_BOX_LAYOUT_FULL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ABBREVIATED: int
    FULL: int
    ICON_ONLY: int

class IntComboBoxPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class IntRadioFrame(Frame):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_child_allocation(self, allocation: Gdk.Rectangle): ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_active(self) -> int: ...
    def get_active_user_data(self) -> tuple[bool, user_data]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> Union[str, None]: ...
    def get_label_align(self) -> tuple[None, None]: ...
    def get_label_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_shadow_type(self) -> Gtk.ShadowType: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(labels: list) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_store(title: str, store: GimpUi.IntStore) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_active(self, value: int) -> bool: ...
    def set_active_by_user_data(self, user_data) -> bool: ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_label(self, label: str = ...): ...
    def set_label_align(self, xalign: float, yalign: float): ...
    def set_label_widget(self, label_widget: Gtk.Widget = ...): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_sensitivity(self, func: GimpUi.IntRadioFrameSensitivityFunc, data: Incomplete | None = ...): ...
    def set_shadow_type(self, type: Gtk.ShadowType): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    bin: Incomplete
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class IntRadioFrameClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class IntStoreClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class IntStoreColumns(__gobject.GEnum):
    GIMP_INT_STORE_VALUE: int
    GIMP_INT_STORE_LABEL: int
    GIMP_INT_STORE_ABBREV: int
    GIMP_INT_STORE_ICON_NAME: int
    GIMP_INT_STORE_PIXBUF: int
    GIMP_INT_STORE_USER_DATA: int
    GIMP_INT_STORE_NUM_COLUMNS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ABBREV: int
    ICON_NAME: int
    LABEL: int
    NUM_COLUMNS: int
    PIXBUF: int
    USER_DATA: int
    VALUE: int

class IntStorePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class LabelColor(Labeled):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def attach(self, child: Gtk.Widget, left: int, top: int, width: int, height: int): ...
    def attach_next_to(self, child: Gtk.Widget, sibling: Gtk.Widget, side: Gtk.PositionType, width: int, height: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_mnemonic_widget_changed(self, widget: Gtk.Widget): ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_value_changed(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_row(self) -> int: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_children(self) -> list: ...
    def get_child_at(self, left: int, top: int) -> Union[Gtk.Widget, None]: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_color_widget(self) -> Gtk.Widget: ...
    def get_column_homogeneous(self) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> Gtk.Label: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_baseline_position(self, row: int) -> Gtk.BaselinePosition: ...
    def get_row_homogeneous(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_value(self) -> Gimp.RGB: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_column(self, position: int): ...
    def insert_next_to(self, sibling: Gtk.Widget, side: Gtk.PositionType): ...
    def insert_row(self, position: int): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_editable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(label: str, color: Gimp.RGB, editable: bool) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_column(self, position: int): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_row(self, position: int): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_row(self, row: int): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_homogeneous(self, homogeneous: bool): ...
    def set_column_spacing(self, spacing: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_editable(self, editable: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_baseline_position(self, row: int, pos: Gtk.BaselinePosition): ...
    def set_row_homogeneous(self, homogeneous: bool): ...
    def set_row_spacing(self, spacing: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, text: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_value(self, value: Gimp.RGB): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class LabelColorClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    value_changed: Incomplete

class LabeledClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    mnemonic_widget_changed: Incomplete
    parent_class: Incomplete
    populate: Incomplete

class LabelEntry(Labeled):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def attach(self, child: Gtk.Widget, left: int, top: int, width: int, height: int): ...
    def attach_next_to(self, child: Gtk.Widget, sibling: Gtk.Widget, side: Gtk.PositionType, width: int, height: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_mnemonic_widget_changed(self, widget: Gtk.Widget): ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_value_changed(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_row(self) -> int: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_children(self) -> list: ...
    def get_child_at(self, left: int, top: int) -> Union[Gtk.Widget, None]: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_homogeneous(self) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_entry(self) -> Gtk.Widget: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> Gtk.Label: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_baseline_position(self, row: int) -> Gtk.BaselinePosition: ...
    def get_row_homogeneous(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_value(self) -> str: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_column(self, position: int): ...
    def insert_next_to(self, sibling: Gtk.Widget, side: Gtk.PositionType): ...
    def insert_row(self, position: int): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(label: str) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_column(self, position: int): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_row(self, position: int): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_row(self, row: int): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_homogeneous(self, homogeneous: bool): ...
    def set_column_spacing(self, spacing: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_baseline_position(self, row: int, pos: Gtk.BaselinePosition): ...
    def set_row_homogeneous(self, homogeneous: bool): ...
    def set_row_spacing(self, spacing: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, text: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_value(self, value: str): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class LabelEntryClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    value_changed: Incomplete

class LabelIntWidget(Labeled):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def attach(self, child: Gtk.Widget, left: int, top: int, width: int, height: int): ...
    def attach_next_to(self, child: Gtk.Widget, sibling: Gtk.Widget, side: Gtk.PositionType, width: int, height: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_mnemonic_widget_changed(self, widget: Gtk.Widget): ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_row(self) -> int: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_children(self) -> list: ...
    def get_child_at(self, left: int, top: int) -> Union[Gtk.Widget, None]: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_homogeneous(self) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> Gtk.Label: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_baseline_position(self, row: int) -> Gtk.BaselinePosition: ...
    def get_row_homogeneous(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_widget(self) -> Gtk.Widget: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_column(self, position: int): ...
    def insert_next_to(self, sibling: Gtk.Widget, side: Gtk.PositionType): ...
    def insert_row(self, position: int): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(text: str, widget: Gtk.Widget) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_column(self, position: int): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_row(self, position: int): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_row(self, row: int): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_homogeneous(self, homogeneous: bool): ...
    def set_column_spacing(self, spacing: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_baseline_position(self, row: int, pos: Gtk.BaselinePosition): ...
    def set_row_homogeneous(self, homogeneous: bool): ...
    def set_row_spacing(self, spacing: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, text: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class LabelIntWidgetClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    value_changed: Incomplete

class LabelSpinClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    value_changed: Incomplete

class LayerComboBox(IntComboBox):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_attribute(self, cell: Gtk.CellRenderer, attribute: str, column: int): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: Gtk.CellRenderer): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, value: int, callback: GObject.Callback, data) -> int: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_changed(self) -> None: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_format_entry_text(self, path: str) -> str: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_active(self) -> tuple[bool, None]: ...
    def get_active_id(self) -> Union[str, None]: ...
    def get_active_iter(*args, **kwargs) -> None: ...
    def get_active_user_data(self) -> tuple[bool, user_data]: ...
    def get_add_tearoffs(self) -> bool: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> Union[Gtk.CellArea, None]: ...
    def get_border_width(self) -> int: ...
    def get_button_sensitivity(self) -> Gtk.SensitivityType: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_cells(self) -> list: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_span_column(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_entry_text_column(self) -> int: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_entry(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_id_column(self) -> int: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> str: ...
    def get_layout(self) -> GimpUi.IntComboBoxLayout: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model(self) -> Gtk.TreeModel: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_popup_accessible(self) -> Atk.Object: ...
    def get_popup_fixed_width(self) -> bool: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_span_column(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_wrap_width(self) -> int: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(constraint: GimpUi.ItemConstraintFunc) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_area(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_area_and_entry(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_entry() -> Gtk.Widget: ...
    @staticmethod
    def new_with_model(model: Gtk.TreeModel) -> Gtk.Widget: ...
    @staticmethod
    def new_with_model_and_entry(model: Gtk.TreeModel) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, cell: Gtk.CellRenderer, expand: bool): ...
    def pack_start(self, cell: Gtk.CellRenderer, expand: bool): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_for_device(self, device: Gdk.Device): ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder(self, cell: Gtk.CellRenderer, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_active(self, value: int) -> bool: ...
    def set_active_by_user_data(self, user_data) -> bool: ...
    def set_active_id(self, active_id: str) -> bool: ...
    def set_active_iter(self, iter: Gtk.TreeIter = ...): ...
    def set_add_tearoffs(self, add_tearoffs: bool): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_button_sensitivity(self, sensitivity: Gtk.SensitivityType): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_cell_data_func(self, cell: Gtk.CellRenderer, func: Gtk.CellLayoutDataFunc = ..., func_data: Incomplete | None = ...): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_span_column(self, column_span: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_entry_text_column(self, text_column: int): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_id_column(self, id_column: int): ...
    def set_label(self, label: str): ...
    def set_layout(self, layout: GimpUi.IntComboBoxLayout): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_model(self, model: Gtk.TreeModel = ...): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_popup_fixed_width(self, fixed: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_separator_func(self, func: Gtk.TreeViewRowSeparatorFunc, data: Incomplete | None = ...): ...
    def set_row_span_column(self, row_span: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_sensitivity(self, func: GimpUi.IntSensitivityFunc, data: Incomplete | None = ...): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap_width(self, width: int): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class MemsizeEntry(__gi_overrides_Gtk.Box):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_value_changed(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_spinbutton(self) -> Gtk.SpinButton: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_value(self) -> int: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(value: int, lower: int, upper: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_value(self, value: int): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class MemsizeEntryClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    value_changed: Incomplete

class MemsizeEntryPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class NumberPairEntry(__gi_repository_Gtk.Entry):
    def activate(self) -> bool: ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_notify(self, child_property: str): ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def copy_clipboard(self) -> None: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def cut_clipboard(self) -> None: ...
    def delete_selection(self) -> None: ...
    def delete_text(self, start_pos: int, end_pos: int): ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate(self) -> None: ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_backspace(self) -> None: ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_composited_changed(self) -> None: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_copy_clipboard(self) -> None: ...
    def do_cut_clipboard(self) -> None: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_delete_from_cursor(self, type: Gtk.DeleteType, count: int): ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_frame_size(self, x: int, y: int, width: int, height: int): ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_get_text_area_size(self, x: int, y: int, width: int, height: int): ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_insert_at_cursor(self, str: str): ...
    def do_insert_emoji(self) -> None: ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_cursor(self, step: Gtk.MovementStep, count: int, extend_selection: bool): ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_numbers_changed(self) -> None: ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_paste_clipboard(self) -> None: ...
    def do_populate_popup(self, popup: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_ratio_changed(self) -> None: ...
    def do_realize(self) -> None: ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_toggle_overwrite(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_activates_default(self) -> bool: ...
    def get_alignment(self) -> float: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_aspect(self) -> GimpUi.AspectType: ...
    def get_attributes(self) -> Union[Pango.AttrList, None]: ...
    def get_buffer(self) -> Gtk.EntryBuffer: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_chars(self, start_pos: int, end_pos: int) -> str: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_completion(self) -> Gtk.EntryCompletion: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_current_icon_drag_source(self) -> int: ...
    def get_cursor_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_default_text(self) -> Union[str, None]: ...
    def get_default_values(self) -> tuple[None, None]: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_editable(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_frame(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_icon_activatable(self, icon_pos: Gtk.EntryIconPosition) -> bool: ...
    def get_icon_area(self, icon_pos: Gtk.EntryIconPosition) -> Gdk.Rectangle: ...
    def get_icon_at_pos(self, x: int, y: int) -> int: ...
    def get_icon_gicon(self, icon_pos: Gtk.EntryIconPosition) -> Union[Gio.Icon, None]: ...
    def get_icon_name(self, icon_pos: Gtk.EntryIconPosition) -> Union[str, None]: ...
    def get_icon_pixbuf(self, icon_pos: Gtk.EntryIconPosition) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_sensitive(self, icon_pos: Gtk.EntryIconPosition) -> bool: ...
    def get_icon_stock(self, icon_pos: Gtk.EntryIconPosition) -> str: ...
    def get_icon_storage_type(self, icon_pos: Gtk.EntryIconPosition) -> Gtk.ImageType: ...
    def get_icon_tooltip_markup(self, icon_pos: Gtk.EntryIconPosition) -> Union[str, None]: ...
    def get_icon_tooltip_text(self, icon_pos: Gtk.EntryIconPosition) -> Union[str, None]: ...
    def get_inner_border(self) -> Union[Gtk.Border, None]: ...
    def get_input_hints(self) -> Gtk.InputHints: ...
    def get_input_purpose(self) -> Gtk.InputPurpose: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_invisible_char(self) -> str: ...
    def get_layout(self) -> Pango.Layout: ...
    def get_layout_offsets(self) -> tuple[None, None]: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_max_length(self) -> int: ...
    def get_max_width_chars(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_overwrite_mode(self) -> bool: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_placeholder_text(self) -> str: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> int: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_progress_fraction(self) -> float: ...
    def get_progress_pulse_step(self) -> float: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_ratio(self) -> float: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_selection_bounds(*args, **kwargs) -> None: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_tabs(self) -> Union[Pango.TabArray, None]: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> str: ...
    def get_text_area(self) -> Gdk.Rectangle: ...
    def get_text_length(self) -> int: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_user_override(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_values(self) -> tuple[None, None]: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visibility(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_width_chars(self) -> int: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_focus_without_selecting(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def im_context_filter_keypress(self, event: Gdk.EventKey) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_text(self, text, position) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def layout_index_to_text_index(self, layout_index: int) -> int: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(separators: str, allow_simplification: bool, min_valid_value: float, max_valid_value: float) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_buffer(buffer: Gtk.EntryBuffer) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def paste_clipboard(self) -> None: ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def progress_pulse(self) -> None: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_im_context(self) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def run_dispose(self) -> None: ...
    def select_region(self, start_pos: int, end_pos: int): ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_activates_default(self, setting: bool): ...
    def set_alignment(self, xalign: float): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_aspect(self, aspect: GimpUi.AspectType): ...
    def set_attributes(self, attrs: Pango.AttrList): ...
    def set_buffer(self, buffer: Gtk.EntryBuffer): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_completion(self, completion: Gtk.EntryCompletion = ...): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_cursor_hadjustment(self, adjustment: Gtk.Adjustment = ...): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_default_text(self, string: str): ...
    def set_default_values(self, left: float, right: float): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_editable(self, is_editable: bool): ...
    def set_events(self, events: int): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_frame(self, setting: bool): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_icon_activatable(self, icon_pos: Gtk.EntryIconPosition, activatable: bool): ...
    def set_icon_drag_source(self, icon_pos: Gtk.EntryIconPosition, target_list: Gtk.TargetList, actions: Gdk.DragAction): ...
    def set_icon_from_gicon(self, icon_pos: Gtk.EntryIconPosition, icon: Gio.Icon = ...): ...
    def set_icon_from_icon_name(self, icon_pos: Gtk.EntryIconPosition, icon_name: str = ...): ...
    def set_icon_from_pixbuf(self, icon_pos: Gtk.EntryIconPosition, pixbuf: GdkPixbuf.Pixbuf = ...): ...
    def set_icon_from_stock(self, icon_pos: Gtk.EntryIconPosition, stock_id: str = ...): ...
    def set_icon_sensitive(self, icon_pos: Gtk.EntryIconPosition, sensitive: bool): ...
    def set_icon_tooltip_markup(self, icon_pos: Gtk.EntryIconPosition, tooltip: str = ...): ...
    def set_icon_tooltip_text(self, icon_pos: Gtk.EntryIconPosition, tooltip: str = ...): ...
    def set_inner_border(self, border: Gtk.Border = ...): ...
    def set_input_hints(self, hints: Gtk.InputHints): ...
    def set_input_purpose(self, purpose: Gtk.InputPurpose): ...
    def set_invisible_char(self, ch: str): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_max_length(self, max: int): ...
    def set_max_width_chars(self, n_chars: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_overwrite_mode(self, overwrite: bool): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_placeholder_text(self, text: str = ...): ...
    def set_position(self, position: int): ...
    def set_progress_fraction(self, fraction: float): ...
    def set_progress_pulse_step(self, fraction: float): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_ratio(self, ratio: float): ...
    def set_realized(self, realized: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_tabs(self, tabs: Pango.TabArray): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, text: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_user_override(self, user_override: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_values(self, left: float, right: float): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visibility(self, visible: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_width_chars(self, n_chars: int): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def text_index_to_layout_index(self, text_index: int) -> int: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_invisible_char(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class NumberPairEntryClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    numbers_changed: Incomplete
    parent_class: Incomplete
    ratio_changed: Incomplete

class NumberPairEntryPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class OffsetArea(__gi_repository_Gtk.DrawingArea):
    def activate(self) -> bool: ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_notify(self, child_property: str): ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_composited_changed(self) -> None: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_offsets_changed(self, offset_x: int, offset_y: int): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(orig_width: int, orig_height: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_offsets(self, offset_x: int, offset_y: int): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size(self, width: int, height: int): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    dummy: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class OffsetAreaClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    offsets_changed: Incomplete
    parent_class: Incomplete

class OffsetAreaPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class PageSelector(__gi_overrides_Gtk.Box):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate(self) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_changed(self) -> None: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_n_pages(self) -> int: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_page_label(self, page_no: int) -> Union[str, None]: ...
    def get_page_thumbnail(self, page_no: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_selected_pages(self) -> tuple[list, None]: ...
    def get_selected_range(self) -> str: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_target(self) -> GimpUi.PageSelectorTarget: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def page_is_selected(self, page_no: int) -> bool: ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def select_all(self) -> None: ...
    def select_page(self, page_no: int): ...
    def select_range(self, range: str): ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_n_pages(self, n_pages: int): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_page_label(self, page_no: int, label: str): ...
    def set_page_thumbnail(self, page_no: int, thumbnail: GdkPixbuf.Pixbuf): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_target(self, target: GimpUi.PageSelectorTarget): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unselect_all(self) -> None: ...
    def unselect_page(self, page_no: int): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class PageSelectorClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    activate: Incomplete
    parent_class: Incomplete
    selection_changed: Incomplete

class PageSelectorPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class PageSelectorTarget(__gobject.GEnum):
    GIMP_PAGE_SELECTOR_TARGET_LAYERS: int
    GIMP_PAGE_SELECTOR_TARGET_IMAGES: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    IMAGES: int
    LAYERS: int

class PaletteSelectButton(SelectButton):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def close_popup(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_palette_set(self, palette_name: str, dialog_closing: bool): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_palette(self) -> str: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(title: str, palette_name: str) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_palette(self, palette_name: str = ...): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    temp_callback: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class PaletteSelectButtonClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    palette_set: Incomplete
    parent_class: Incomplete

class PaletteSelectButtonPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class PathEditor(__gi_overrides_Gtk.Box):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_path_changed(self) -> None: ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def do_writable_changed(self) -> None: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_dir_writable(self, directory: str) -> bool: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> str: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_writable_path(self) -> str: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(title: str, path: str) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_dir_writable(self, directory: str, writable: bool): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_path(self, path: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_writable_path(self, path: str): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    delete_button: Incomplete
    dir_list: Incomplete
    down_button: Incomplete
    file_entry: Incomplete
    g_type_instance: Incomplete
    new_button: Incomplete
    num_items: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    sel: Incomplete
    sel_path: Incomplete
    upper_hbox: Incomplete
    up_button: Incomplete
    widget: Incomplete
    writable_column: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class PathEditorClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    path_changed: Incomplete
    writable_changed: Incomplete

class PathEditorPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class PatternSelectButton(SelectButton):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def close_popup(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_pattern_set(self, pattern_name: str, width: int, height: int, bpp: int, mask_data: int, dialog_closing: bool): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pattern(self) -> str: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(title: str, pattern_name: str) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_pattern(self, pattern_name: str = ...): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    temp_callback: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class PatternSelectButtonClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    pattern_set: Incomplete

class PatternSelectButtonPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class PickButton(__gi_overrides_Gtk.Button):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clicked(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate(self) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_clicked(self) -> None: ...
    def do_color_picked(self, color: Gimp.RGB): ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter(self) -> None: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave(self) -> None: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_pressed(self) -> None: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_released(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_set_related_action(self, action: Gtk.Action): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def enter(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_action_name(self) -> Union[str, None]: ...
    def get_action_target_value(self) -> GLib.Variant: ...
    def get_alignment(self) -> tuple[None, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_always_show_image(self) -> bool: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_event_window(self) -> Gdk.Window: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self, *args, **kwargs) -> None: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_image(self) -> Union[Gtk.Widget, None]: ...
    def get_image_position(self) -> Gtk.PositionType: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> str: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_related_action(self) -> Gtk.Action: ...
    def get_relief(self) -> Gtk.ReliefStyle: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_use_action_appearance(self) -> bool: ...
    def get_use_stock(self) -> bool: ...
    def get_use_underline(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def leave(self) -> None: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_icon_name(icon_name: str, size: int) -> Gtk.Widget: ...
    @staticmethod
    def new_from_stock(stock_id: str) -> Gtk.Widget: ...
    @staticmethod
    def new_with_label(label: str) -> Gtk.Widget: ...
    @staticmethod
    def new_with_mnemonic(label: str) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def pressed(self) -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def released(self) -> None: ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_action_name(self, action_name: str = ...): ...
    def set_action_target_value(self, target_value: GLib.Variant = ...): ...
    def set_alignment(self, xalign: float, yalign: float): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_always_show_image(self, always_show: bool): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_detailed_action_name(self, detailed_action_name: str): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, *args, **kwargs) -> None: ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_image(self, image: Gtk.Widget = ...): ...
    def set_image_position(self, position: Gtk.PositionType): ...
    def set_label(self, label: str): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_related_action(self, action: Gtk.Action): ...
    def set_relief(self, relief: Gtk.ReliefStyle): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_use_action_appearance(self, use_appearance: bool): ...
    def set_use_stock(self, use_stock: bool): ...
    def set_use_underline(self, use_underline: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def sync_action_properties(self, action: Gtk.Action = ...): ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    bin: Incomplete
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class PickButtonClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    color_picked: Incomplete
    parent_class: Incomplete

class PickButtonPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class PreviewArea(__gi_repository_Gtk.DrawingArea):
    def activate(self) -> bool: ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def blend(self, x: int, y: int, width: int, height: int, type: Gimp.ImageType, buf1: list, rowstride1: int, buf2: list, rowstride2: int, opacity: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_notify(self, child_property: str): ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_composited_changed(self) -> None: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, x: int, y: int, width: int, height: int, type: Gimp.ImageType, buf: list, rowstride: int): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def fill(self, x: int, y: int, width: int, height: int, red: int, green: int, blue: int): ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size(self) -> tuple[None, None]: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mask(self, x: int, y: int, width: int, height: int, type: Gimp.ImageType, buf1: list, rowstride1: int, buf2: list, rowstride2: int, mask: list, rowstride_mask: int): ...
    def menu_popup(self, event: Gdk.EventButton = ...): ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_colormap(self, colormap: list, num_colors: int): ...
    def set_color_config(self, config: Gimp.ColorConfig): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_max_size(self, width: int, height: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_offsets(self, x: int, y: int): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    dummy: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class PreviewAreaClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class PreviewAreaPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class PreviewClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    draw: Incomplete
    draw_buffer: Incomplete
    draw_thumb: Incomplete
    invalidated: Incomplete
    parent_class: Incomplete
    set_cursor: Incomplete
    transform: Incomplete
    untransform: Incomplete

class PreviewPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ProcBrowserDialog(Dialog):
    def activate(self) -> bool: ...
    def activate_default(self) -> bool: ...
    def activate_focus(self) -> bool: ...
    def activate_key(self, event: Gdk.EventKey) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_accel_group(self, accel_group: Gtk.AccelGroup): ...
    def add_action_widget(self, child: Gtk.Widget, response_id: int): ...
    def add_button(self, button_text: str, response_id: int) -> Gtk.Widget: ...
    def add_buttons(self, *args) -> None: ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic(self, keyval: int, target: Gtk.Widget): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def begin_move_drag(self, button: int, root_x: int, root_y: int, timestamp: int): ...
    def begin_resize_drag(self, edge: Gdk.WindowEdge, button: int, root_x: int, root_y: int, timestamp: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def close(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def deiconify(self) -> None: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate_default(self) -> None: ...
    def do_activate_focus(self) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_close(self) -> None: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enable_debugging(self, toggle: bool) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_keys_changed(self) -> None: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_response(self, response_id: int): ...
    def do_row_activated(self) -> None: ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_changed(self) -> None: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus(self, focus: Gtk.Widget = ...): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def fullscreen(self) -> None: ...
    def fullscreen_on_monitor(self, screen: Gdk.Screen, monitor: int): ...
    def getv(self, names: list, values: list): ...
    def get_accept_focus(self) -> bool: ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_area(self) -> Gtk.Box: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_application(self) -> Union[Gtk.Application, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_attached_to(self) -> Union[Gtk.Widget, None]: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_content_area(self) -> Gtk.Box: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_decorated(self) -> bool: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_icon_list() -> list: ...
    @staticmethod
    def get_default_icon_name() -> str: ...
    def get_default_size(self) -> tuple[None, None]: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_default_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_deletable(self) -> bool: ...
    def get_destroy_with_parent(self) -> bool: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_on_map(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_visible(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_gravity(self) -> Gdk.Gravity: ...
    def get_group(self) -> Gtk.WindowGroup: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_resize_grip(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_header_bar(self) -> Gtk.HeaderBar: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_hide_titlebar_when_maximized(self) -> bool: ...
    def get_icon(self) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_list(self) -> list: ...
    def get_icon_name(self) -> Union[str, None]: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_mnemonics_visible(self) -> bool: ...
    def get_mnemonic_modifier(self) -> Gdk.ModifierType: ...
    def get_modal(self) -> bool: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resizable(self) -> bool: ...
    def get_resize_grip_area(self) -> tuple[bool, None]: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_response_for_widget(self, widget: Gtk.Widget) -> int: ...
    def get_role(self) -> Union[str, None]: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_selected(self) -> Union[str, None]: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size(self) -> tuple[None, None]: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_skip_pager_hint(self) -> bool: ...
    def get_skip_taskbar_hint(self) -> bool: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> Union[str, None]: ...
    def get_titlebar(self) -> Union[Gtk.Widget, None]: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_transient_for(self) -> Union[Gtk.Window, None]: ...
    def get_type_hint(self) -> Gdk.WindowTypeHint: ...
    def get_urgency_hint(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_widget_for_response(self, response_id: int) -> Union[Gtk.Widget, None]: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_window_type(self) -> Gtk.WindowType: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_group(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_toplevel_focus(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def iconify(self) -> None: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_active(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_maximized(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def list_toplevels() -> list: ...
    def map(self) -> None: ...
    def maximize(self) -> None: ...
    def mnemonic_activate(self, keyval: int, modifier: Gdk.ModifierType) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def move(self, x: int, y: int): ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def parse_geometry(self, geometry: str) -> bool: ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def present(self) -> None: ...
    def present_with_time(self, timestamp: int): ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    def propagate_key_event(self, event: Gdk.EventKey) -> bool: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_accel_group(self, accel_group: Gtk.AccelGroup): ...
    def remove_mnemonic(self, keyval: int, target: Gtk.Widget): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def reshow_with_initial_size(self) -> None: ...
    def resize(self, width: int, height: int): ...
    def resize_children(self) -> None: ...
    def resize_grip_is_visible(self) -> bool: ...
    def resize_to_geometry(self, width: int, height: int): ...
    def response(self, response_id: int): ...
    def run(self) -> int: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accept_focus(self, setting: bool): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_alternative_button_order_from_array(self, order: list): ...
    def set_application(self, application: Gtk.Application = ...): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_attached_to(self, attach_widget: Gtk.Widget = ...): ...
    @staticmethod
    def set_auto_startup_notification(setting: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_decorated(self, setting: bool): ...
    def set_default(self, default_widget: Gtk.Widget = ...): ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_default_geometry(self, width: int, height: int): ...
    @staticmethod
    def set_default_icon(icon: GdkPixbuf.Pixbuf): ...
    @staticmethod
    def set_default_icon_from_file(filename: str) -> bool: ...
    @staticmethod
    def set_default_icon_list(list: list): ...
    @staticmethod
    def set_default_icon_name(name: str): ...
    def set_default_response(self, response_id: int): ...
    def set_default_size(self, width: int, height: int): ...
    def set_deletable(self, setting: bool): ...
    def set_destroy_with_parent(self, setting: bool): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus(self, focus: Gtk.Widget = ...): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_on_map(self, setting: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_visible(self, setting: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_geometry_hints(self, geometry_widget: Gtk.Widget, geometry: Gdk.Geometry, geom_mask: Gdk.WindowHints): ...
    def set_gravity(self, gravity: Gdk.Gravity): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_resize_grip(self, value: bool): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_user_ref_count(self, setting: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_hide_titlebar_when_maximized(self, setting: bool): ...
    def set_icon(self, icon: GdkPixbuf.Pixbuf = ...): ...
    def set_icon_from_file(self, filename: str) -> bool: ...
    def set_icon_list(self, list: list): ...
    def set_icon_name(self, name: str = ...): ...
    @staticmethod
    def set_interactive_debugging(enable: bool): ...
    def set_keep_above(self, setting: bool): ...
    def set_keep_below(self, setting: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_mnemonics_visible(self, setting: bool): ...
    def set_mnemonic_modifier(self, modifier: Gdk.ModifierType): ...
    def set_modal(self, modal: bool): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_position(self, position: Gtk.WindowPosition): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resizable(self, resizable: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_response_sensitive(self, response_id: int, setting: bool): ...
    def set_role(self, role: str): ...
    def set_screen(self, screen: Gdk.Screen): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_skip_pager_hint(self, setting: bool): ...
    def set_skip_taskbar_hint(self, setting: bool): ...
    def set_startup_id(self, startup_id: str): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_titlebar(self, titlebar: Gtk.Widget = ...): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_transient_for(self, parent: Gtk.Window = ...): ...
    def set_type_hint(self, hint: Gdk.WindowTypeHint): ...
    def set_urgency_hint(self, setting: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wmclass(self, wmclass_name: str, wmclass_class: str): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stick(self) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unfullscreen(self) -> None: ...
    def unmap(self) -> None: ...
    def unmaximize(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def unstick(self) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    action_area: Incomplete
    bin: Incomplete
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    vbox: Incomplete
    widget: Incomplete
    window: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ProcBrowserDialogClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    row_activated: Incomplete
    selection_changed: Incomplete

class ProcBrowserDialogPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ProcedureDialog(Dialog):
    def activate(self) -> bool: ...
    def activate_default(self) -> bool: ...
    def activate_focus(self) -> bool: ...
    def activate_key(self, event: Gdk.EventKey) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_accel_group(self, accel_group: Gtk.AccelGroup): ...
    def add_action_widget(self, child: Gtk.Widget, response_id: int): ...
    def add_button(self, button_text: str, response_id: int) -> Gtk.Widget: ...
    def add_buttons(self, *args) -> None: ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic(self, keyval: int, target: Gtk.Widget): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def begin_move_drag(self, button: int, root_x: int, root_y: int, timestamp: int): ...
    def begin_resize_drag(self, edge: Gdk.WindowEdge, button: int, root_x: int, root_y: int, timestamp: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def close(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def deiconify(self) -> None: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate_default(self) -> None: ...
    def do_activate_focus(self) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_close(self) -> None: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enable_debugging(self, toggle: bool) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_keys_changed(self) -> None: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_response(self, response_id: int): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus(self, focus: Gtk.Widget = ...): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def fill(self, properties: list = ...): ...
    def fill_box(self, container_id: str, properties: list) -> Gtk.Widget: ...
    def fill_expander(self, container_id: str, title_id: str, invert_title: bool, contents_id: str) -> Gtk.Widget: ...
    def fill_flowbox(self, container_id: str, properties: list) -> Gtk.Widget: ...
    def fill_frame(self, container_id: str, title_id: str, invert_title: bool, contents_id: str) -> Gtk.Widget: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def fullscreen(self) -> None: ...
    def fullscreen_on_monitor(self, screen: Gdk.Screen, monitor: int): ...
    def getv(self, names: list, values: list): ...
    def get_accept_focus(self) -> bool: ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_area(self) -> Gtk.Box: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_application(self) -> Union[Gtk.Application, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_attached_to(self) -> Union[Gtk.Widget, None]: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_color_widget(self, property: str, editable: bool, type: GimpUi.ColorAreaType) -> Gtk.Widget: ...
    def get_composite_name(self) -> str: ...
    def get_content_area(self) -> Gtk.Box: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_decorated(self) -> bool: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_icon_list() -> list: ...
    @staticmethod
    def get_default_icon_name() -> str: ...
    def get_default_size(self) -> tuple[None, None]: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_default_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_deletable(self) -> bool: ...
    def get_destroy_with_parent(self) -> bool: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_file_chooser(self, property: str, action: Gtk.FileChooserAction) -> Gtk.Widget: ...
    def get_focus(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_on_map(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_visible(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_gravity(self) -> Gdk.Gravity: ...
    def get_group(self) -> Gtk.WindowGroup: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_resize_grip(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_header_bar(self) -> Gtk.HeaderBar: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_hide_titlebar_when_maximized(self) -> bool: ...
    def get_icon(self) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_list(self) -> list: ...
    def get_icon_name(self) -> Union[str, None]: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_int_combo(self, property: str, store: GimpUi.IntStore) -> Gtk.Widget: ...
    def get_int_radio(self, property: str, store: GimpUi.IntStore) -> Gtk.Widget: ...
    def get_label(self, label_id: str, text: str) -> Gtk.Widget: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_mnemonics_visible(self) -> bool: ...
    def get_mnemonic_modifier(self) -> Gdk.ModifierType: ...
    def get_modal(self) -> bool: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resizable(self) -> bool: ...
    def get_resize_grip_area(self) -> tuple[bool, None]: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_response_for_widget(self, widget: Gtk.Widget) -> int: ...
    def get_role(self) -> Union[str, None]: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_entry(self, property: str, factor: float) -> Gtk.Widget: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size(self) -> tuple[None, None]: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_skip_pager_hint(self) -> bool: ...
    def get_skip_taskbar_hint(self) -> bool: ...
    def get_spin_scale(self, property: str, factor: float) -> Gtk.Widget: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> Union[str, None]: ...
    def get_titlebar(self) -> Union[Gtk.Widget, None]: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_transient_for(self) -> Union[Gtk.Window, None]: ...
    def get_type_hint(self) -> Gdk.WindowTypeHint: ...
    def get_urgency_hint(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_widget(self, property: str, widget_type: GType) -> Gtk.Widget: ...
    def get_widget_for_response(self, response_id: int) -> Union[Gtk.Widget, None]: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_window_type(self) -> Gtk.WindowType: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_group(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_toplevel_focus(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def iconify(self) -> None: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_active(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_maximized(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def list_toplevels() -> list: ...
    def map(self) -> None: ...
    def maximize(self) -> None: ...
    def mnemonic_activate(self, keyval: int, modifier: Gdk.ModifierType) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def move(self, x: int, y: int): ...
    @staticmethod
    def new(procedure: Gimp.Procedure, config: Gimp.ProcedureConfig, title: str) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def parse_geometry(self, geometry: str) -> bool: ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def present(self) -> None: ...
    def present_with_time(self, timestamp: int): ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    def propagate_key_event(self, event: Gdk.EventKey) -> bool: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_accel_group(self, accel_group: Gtk.AccelGroup): ...
    def remove_mnemonic(self, keyval: int, target: Gtk.Widget): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def reshow_with_initial_size(self) -> None: ...
    def resize(self, width: int, height: int): ...
    def resize_children(self) -> None: ...
    def resize_grip_is_visible(self) -> bool: ...
    def resize_to_geometry(self, width: int, height: int): ...
    def response(self, response_id: int): ...
    def run(self) -> bool: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accept_focus(self, setting: bool): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_alternative_button_order_from_array(self, order: list): ...
    def set_application(self, application: Gtk.Application = ...): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_attached_to(self, attach_widget: Gtk.Widget = ...): ...
    @staticmethod
    def set_auto_startup_notification(setting: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_decorated(self, setting: bool): ...
    def set_default(self, default_widget: Gtk.Widget = ...): ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_default_geometry(self, width: int, height: int): ...
    @staticmethod
    def set_default_icon(icon: GdkPixbuf.Pixbuf): ...
    @staticmethod
    def set_default_icon_from_file(filename: str) -> bool: ...
    @staticmethod
    def set_default_icon_list(list: list): ...
    @staticmethod
    def set_default_icon_name(name: str): ...
    def set_default_response(self, response_id: int): ...
    def set_default_size(self, width: int, height: int): ...
    def set_deletable(self, setting: bool): ...
    def set_destroy_with_parent(self, setting: bool): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus(self, focus: Gtk.Widget = ...): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_on_map(self, setting: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_visible(self, setting: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_geometry_hints(self, geometry_widget: Gtk.Widget, geometry: Gdk.Geometry, geom_mask: Gdk.WindowHints): ...
    def set_gravity(self, gravity: Gdk.Gravity): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_resize_grip(self, value: bool): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_user_ref_count(self, setting: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_hide_titlebar_when_maximized(self, setting: bool): ...
    def set_icon(self, icon: GdkPixbuf.Pixbuf = ...): ...
    def set_icon_from_file(self, filename: str) -> bool: ...
    def set_icon_list(self, list: list): ...
    def set_icon_name(self, name: str = ...): ...
    @staticmethod
    def set_interactive_debugging(enable: bool): ...
    def set_keep_above(self, setting: bool): ...
    def set_keep_below(self, setting: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_mnemonics_visible(self, setting: bool): ...
    def set_mnemonic_modifier(self, modifier: Gdk.ModifierType): ...
    def set_modal(self, modal: bool): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_position(self, position: Gtk.WindowPosition): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resizable(self, resizable: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_response_sensitive(self, response_id: int, setting: bool): ...
    def set_role(self, role: str): ...
    def set_screen(self, screen: Gdk.Screen): ...
    def set_sensitive(self, property: str, sensitive: bool, config: GObject.Object, config_property: str, config_invert: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_skip_pager_hint(self, setting: bool): ...
    def set_skip_taskbar_hint(self, setting: bool): ...
    def set_startup_id(self, startup_id: str): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_titlebar(self, titlebar: Gtk.Widget = ...): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_transient_for(self, parent: Gtk.Window = ...): ...
    def set_type_hint(self, hint: Gdk.WindowTypeHint): ...
    def set_urgency_hint(self, setting: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wmclass(self, wmclass_name: str, wmclass_class: str): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stick(self) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unfullscreen(self) -> None: ...
    def unmap(self) -> None: ...
    def unmaximize(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def unstick(self) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    action_area: Incomplete
    bin: Incomplete
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    vbox: Incomplete
    widget: Incomplete
    window: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ProcedureDialogClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    fill_list: Incomplete
    parent_class: Incomplete

class ProcedureDialogPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ProgressBar(__gi_repository_Gtk.ProgressBar):
    def activate(self) -> bool: ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_notify(self, child_property: str): ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_composited_changed(self) -> None: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_ellipsize(self) -> Pango.EllipsizeMode: ...
    def get_events(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_fraction(self) -> float: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_inverted(self) -> bool: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_pulse_step(self) -> float: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_show_text(self) -> bool: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> Union[str, None]: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def pulse(self) -> None: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_ellipsize(self, mode: Pango.EllipsizeMode): ...
    def set_events(self, events: int): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_fraction(self, fraction: float): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_inverted(self, inverted: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_pulse_step(self, fraction: float): ...
    def set_realized(self, realized: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_show_text(self, show_text: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, text: str = ...): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    cancelable: Incomplete
    g_type_instance: Incomplete
    parent: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    progress_callback: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ProgressBarClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class Ruler(__gi_overrides_Gtk.Widget):
    def activate(self) -> bool: ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def add_track_widget(self, widget: Gtk.Widget): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_notify(self, child_property: str): ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_composited_changed(self) -> None: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> float: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_range(self) -> tuple[None, None, None]: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_unit(self) -> Gimp.Unit: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(orientation: Gtk.Orientation) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_track_widget(self, widget: Gtk.Widget): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_position(self, position: float): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_range(self, lower: float, upper: float, max_size: float): ...
    def set_realized(self, realized: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_unit(self, unit: Gimp.Unit): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class RulerClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class RulerPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class SaveProcedureDialog(ProcedureDialog):
    def activate(self) -> bool: ...
    def activate_default(self) -> bool: ...
    def activate_focus(self) -> bool: ...
    def activate_key(self, event: Gdk.EventKey) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_accel_group(self, accel_group: Gtk.AccelGroup): ...
    def add_action_widget(self, child: Gtk.Widget, response_id: int): ...
    def add_button(self, button_text: str, response_id: int) -> Gtk.Widget: ...
    def add_buttons(self, *args) -> None: ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_metadata(self, property: str): ...
    def add_mnemonic(self, keyval: int, target: Gtk.Widget): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def begin_move_drag(self, button: int, root_x: int, root_y: int, timestamp: int): ...
    def begin_resize_drag(self, edge: Gdk.WindowEdge, button: int, root_x: int, root_y: int, timestamp: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def close(self) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def deiconify(self) -> None: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate_default(self) -> None: ...
    def do_activate_focus(self) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_close(self) -> None: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enable_debugging(self, toggle: bool) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_keys_changed(self) -> None: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_response(self, response_id: int): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus(self, focus: Gtk.Widget = ...): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def fill(self, properties: list = ...): ...
    def fill_box(self, container_id: str, properties: list) -> Gtk.Widget: ...
    def fill_expander(self, container_id: str, title_id: str, invert_title: bool, contents_id: str) -> Gtk.Widget: ...
    def fill_flowbox(self, container_id: str, properties: list) -> Gtk.Widget: ...
    def fill_frame(self, container_id: str, title_id: str, invert_title: bool, contents_id: str) -> Gtk.Widget: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def fullscreen(self) -> None: ...
    def fullscreen_on_monitor(self, screen: Gdk.Screen, monitor: int): ...
    def getv(self, names: list, values: list): ...
    def get_accept_focus(self) -> bool: ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_area(self) -> Gtk.Box: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_application(self) -> Union[Gtk.Application, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_attached_to(self) -> Union[Gtk.Widget, None]: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_color_widget(self, property: str, editable: bool, type: GimpUi.ColorAreaType) -> Gtk.Widget: ...
    def get_composite_name(self) -> str: ...
    def get_content_area(self) -> Gtk.Box: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_decorated(self) -> bool: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_icon_list() -> list: ...
    @staticmethod
    def get_default_icon_name() -> str: ...
    def get_default_size(self) -> tuple[None, None]: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_default_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_deletable(self) -> bool: ...
    def get_destroy_with_parent(self) -> bool: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_file_chooser(self, property: str, action: Gtk.FileChooserAction) -> Gtk.Widget: ...
    def get_focus(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_on_map(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_visible(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_gravity(self) -> Gdk.Gravity: ...
    def get_group(self) -> Gtk.WindowGroup: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_resize_grip(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_header_bar(self) -> Gtk.HeaderBar: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_hide_titlebar_when_maximized(self) -> bool: ...
    def get_icon(self) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_list(self) -> list: ...
    def get_icon_name(self) -> Union[str, None]: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_int_combo(self, property: str, store: GimpUi.IntStore) -> Gtk.Widget: ...
    def get_int_radio(self, property: str, store: GimpUi.IntStore) -> Gtk.Widget: ...
    def get_label(self, label_id: str, text: str) -> Gtk.Widget: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_mnemonics_visible(self) -> bool: ...
    def get_mnemonic_modifier(self) -> Gdk.ModifierType: ...
    def get_modal(self) -> bool: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resizable(self) -> bool: ...
    def get_resize_grip_area(self) -> tuple[bool, None]: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_response_for_widget(self, widget: Gtk.Widget) -> int: ...
    def get_role(self) -> Union[str, None]: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_entry(self, property: str, factor: float) -> Gtk.Widget: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size(self) -> tuple[None, None]: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_skip_pager_hint(self) -> bool: ...
    def get_skip_taskbar_hint(self) -> bool: ...
    def get_spin_scale(self, property: str, factor: float) -> Gtk.Widget: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> Union[str, None]: ...
    def get_titlebar(self) -> Union[Gtk.Widget, None]: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_transient_for(self) -> Union[Gtk.Window, None]: ...
    def get_type_hint(self) -> Gdk.WindowTypeHint: ...
    def get_urgency_hint(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_widget(self, property: str, widget_type: GType) -> Gtk.Widget: ...
    def get_widget_for_response(self, response_id: int) -> Union[Gtk.Widget, None]: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_window_type(self) -> Gtk.WindowType: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_group(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_toplevel_focus(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def iconify(self) -> None: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_active(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_maximized(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def list_toplevels() -> list: ...
    def map(self) -> None: ...
    def maximize(self) -> None: ...
    def mnemonic_activate(self, keyval: int, modifier: Gdk.ModifierType) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def move(self, x: int, y: int): ...
    @staticmethod
    def new(procedure: Gimp.SaveProcedure, config: Gimp.ProcedureConfig, image: Gimp.Image) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def parse_geometry(self, geometry: str) -> bool: ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def present(self) -> None: ...
    def present_with_time(self, timestamp: int): ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    def propagate_key_event(self, event: Gdk.EventKey) -> bool: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_accel_group(self, accel_group: Gtk.AccelGroup): ...
    def remove_mnemonic(self, keyval: int, target: Gtk.Widget): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def reshow_with_initial_size(self) -> None: ...
    def resize(self, width: int, height: int): ...
    def resize_children(self) -> None: ...
    def resize_grip_is_visible(self) -> bool: ...
    def resize_to_geometry(self, width: int, height: int): ...
    def response(self, response_id: int): ...
    def run(self) -> bool: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accept_focus(self, setting: bool): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_alternative_button_order_from_array(self, order: list): ...
    def set_application(self, application: Gtk.Application = ...): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_attached_to(self, attach_widget: Gtk.Widget = ...): ...
    @staticmethod
    def set_auto_startup_notification(setting: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_decorated(self, setting: bool): ...
    def set_default(self, default_widget: Gtk.Widget = ...): ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_default_geometry(self, width: int, height: int): ...
    @staticmethod
    def set_default_icon(icon: GdkPixbuf.Pixbuf): ...
    @staticmethod
    def set_default_icon_from_file(filename: str) -> bool: ...
    @staticmethod
    def set_default_icon_list(list: list): ...
    @staticmethod
    def set_default_icon_name(name: str): ...
    def set_default_response(self, response_id: int): ...
    def set_default_size(self, width: int, height: int): ...
    def set_deletable(self, setting: bool): ...
    def set_destroy_with_parent(self, setting: bool): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus(self, focus: Gtk.Widget = ...): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_on_map(self, setting: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_visible(self, setting: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_geometry_hints(self, geometry_widget: Gtk.Widget, geometry: Gdk.Geometry, geom_mask: Gdk.WindowHints): ...
    def set_gravity(self, gravity: Gdk.Gravity): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_resize_grip(self, value: bool): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_user_ref_count(self, setting: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_hide_titlebar_when_maximized(self, setting: bool): ...
    def set_icon(self, icon: GdkPixbuf.Pixbuf = ...): ...
    def set_icon_from_file(self, filename: str) -> bool: ...
    def set_icon_list(self, list: list): ...
    def set_icon_name(self, name: str = ...): ...
    @staticmethod
    def set_interactive_debugging(enable: bool): ...
    def set_keep_above(self, setting: bool): ...
    def set_keep_below(self, setting: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_mnemonics_visible(self, setting: bool): ...
    def set_mnemonic_modifier(self, modifier: Gdk.ModifierType): ...
    def set_modal(self, modal: bool): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_position(self, position: Gtk.WindowPosition): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resizable(self, resizable: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_response_sensitive(self, response_id: int, setting: bool): ...
    def set_role(self, role: str): ...
    def set_screen(self, screen: Gdk.Screen): ...
    def set_sensitive(self, property: str, sensitive: bool, config: GObject.Object, config_property: str, config_invert: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_skip_pager_hint(self, setting: bool): ...
    def set_skip_taskbar_hint(self, setting: bool): ...
    def set_startup_id(self, startup_id: str): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_titlebar(self, titlebar: Gtk.Widget = ...): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_transient_for(self, parent: Gtk.Window = ...): ...
    def set_type_hint(self, hint: Gdk.WindowTypeHint): ...
    def set_urgency_hint(self, setting: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wmclass(self, wmclass_name: str, wmclass_class: str): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stick(self) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unfullscreen(self) -> None: ...
    def unmap(self) -> None: ...
    def unmaximize(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def unstick(self) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    action_area: Incomplete
    bin: Incomplete
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    vbox: Incomplete
    widget: Incomplete
    window: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class SaveProcedureDialogClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class SaveProcedureDialogPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ScaleEntryClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    new_range_widget: Incomplete
    parent_class: Incomplete
    value_changed: Incomplete

class ScrolledPreviewClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ScrolledPreviewPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class SelectButtonClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    default_title: Incomplete
    parent_class: Incomplete
    select_destroy: Incomplete

class SelectButtonPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class SizeEntry(__gi_repository_Gtk.Grid):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_field(self, value_spinbutton: Gtk.SpinButton, refval_spinbutton: Gtk.SpinButton = ...): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def attach(self, child: Gtk.Widget, left: int, top: int, width: int, height: int): ...
    def attach_label(self, text: str, row: int, column: int, alignment: float) -> Gtk.Widget: ...
    def attach_next_to(self, child: Gtk.Widget, sibling: Gtk.Widget, side: Gtk.PositionType, width: int, height: int): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_refval_changed(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unit_changed(self) -> None: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_value_changed(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_baseline_row(self) -> int: ...
    def get_border_width(self) -> int: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_children(self) -> list: ...
    def get_child_at(self, left: int, top: int) -> Union[Gtk.Widget, None]: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_homogeneous(self) -> bool: ...
    def get_column_spacing(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_help_widget(self, field: int) -> Gtk.Widget: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_n_fields(self) -> int: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_refval(self, field: int) -> float: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_baseline_position(self, row: int) -> Gtk.BaselinePosition: ...
    def get_row_homogeneous(self) -> bool: ...
    def get_row_spacing(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_unit(self) -> Gimp.Unit: ...
    def get_unit_combo(self) -> GimpUi.UnitComboBox: ...
    def get_update_policy(self) -> GimpUi.SizeEntryUpdatePolicy: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_value(self, field: int) -> float: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_column(self, position: int): ...
    def insert_next_to(self, sibling: Gtk.Widget, side: Gtk.PositionType): ...
    def insert_row(self, position: int): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(number_of_fields: int, unit: Gimp.Unit, unit_format: str, menu_show_pixels: bool, menu_show_percent: bool, show_refval: bool, spinbutton_width: int, update_policy: GimpUi.SizeEntryUpdatePolicy) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_column(self, position: int): ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_row(self, position: int): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_activates_default(self, setting: bool): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_row(self, row: int): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_homogeneous(self, homogeneous: bool): ...
    def set_column_spacing(self, spacing: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_pixel_digits(self, digits: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_refval(self, field: int, refval: float): ...
    def set_refval_boundaries(self, field: int, lower: float, upper: float): ...
    def set_refval_digits(self, field: int, digits: int): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_resolution(self, field: int, resolution: float, keep_size: bool): ...
    def set_row_baseline_position(self, row: int, pos: Gtk.BaselinePosition): ...
    def set_row_homogeneous(self, homogeneous: bool): ...
    def set_row_spacing(self, spacing: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size(self, field: int, lower: float, upper: float): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_unit(self, unit: Gimp.Unit): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_value(self, field: int, value: float): ...
    def set_value_boundaries(self, field: int, lower: float, upper: float): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def show_unit_menu(self, show: bool): ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class SizeEntryClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    refval_changed: Incomplete
    unit_changed: Incomplete
    value_changed: Incomplete

class SizeEntryField(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class SizeEntryPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class SizeEntryUpdatePolicy(__gobject.GEnum):
    GIMP_SIZE_ENTRY_UPDATE_NONE: int
    GIMP_SIZE_ENTRY_UPDATE_SIZE: int
    GIMP_SIZE_ENTRY_UPDATE_RESOLUTION: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    NONE: int
    RESOLUTION: int
    SIZE: int

class SpinButton(__gi_repository_Gtk.SpinButton):
    def activate(self) -> bool: ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_notify(self, child_property: str): ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def configure(self, adjustment: Gtk.Adjustment, climb_rate: float, digits: int): ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def copy_clipboard(self) -> None: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def cut_clipboard(self) -> None: ...
    def delete_selection(self) -> None: ...
    def delete_text(self, start_pos: int, end_pos: int): ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate(self) -> None: ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_backspace(self) -> None: ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_change_value(self, scroll: Gtk.ScrollType): ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_composited_changed(self) -> None: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_copy_clipboard(self) -> None: ...
    def do_cut_clipboard(self) -> None: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_delete_from_cursor(self, type: Gtk.DeleteType, count: int): ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_frame_size(self, x: int, y: int, width: int, height: int): ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_get_text_area_size(self, x: int, y: int, width: int, height: int): ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_input(self, new_value: float) -> int: ...
    def do_insert_at_cursor(self, str: str): ...
    def do_insert_emoji(self) -> None: ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_cursor(self, step: Gtk.MovementStep, count: int, extend_selection: bool): ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_output(self) -> int: ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_paste_clipboard(self) -> None: ...
    def do_populate_popup(self, popup: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_toggle_overwrite(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_value_changed(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def do_wrapped(self) -> None: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_activates_default(self) -> bool: ...
    def get_adjustment(self) -> Gtk.Adjustment: ...
    def get_alignment(self) -> float: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_attributes(self) -> Union[Pango.AttrList, None]: ...
    def get_buffer(self) -> Gtk.EntryBuffer: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_chars(self, start_pos: int, end_pos: int) -> str: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_completion(self) -> Gtk.EntryCompletion: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_current_icon_drag_source(self) -> int: ...
    def get_cursor_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_digits(self) -> int: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_editable(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_frame(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_icon_activatable(self, icon_pos: Gtk.EntryIconPosition) -> bool: ...
    def get_icon_area(self, icon_pos: Gtk.EntryIconPosition) -> Gdk.Rectangle: ...
    def get_icon_at_pos(self, x: int, y: int) -> int: ...
    def get_icon_gicon(self, icon_pos: Gtk.EntryIconPosition) -> Union[Gio.Icon, None]: ...
    def get_icon_name(self, icon_pos: Gtk.EntryIconPosition) -> Union[str, None]: ...
    def get_icon_pixbuf(self, icon_pos: Gtk.EntryIconPosition) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_sensitive(self, icon_pos: Gtk.EntryIconPosition) -> bool: ...
    def get_icon_stock(self, icon_pos: Gtk.EntryIconPosition) -> str: ...
    def get_icon_storage_type(self, icon_pos: Gtk.EntryIconPosition) -> Gtk.ImageType: ...
    def get_icon_tooltip_markup(self, icon_pos: Gtk.EntryIconPosition) -> Union[str, None]: ...
    def get_icon_tooltip_text(self, icon_pos: Gtk.EntryIconPosition) -> Union[str, None]: ...
    def get_increments(self) -> tuple[None, None]: ...
    def get_inner_border(self) -> Union[Gtk.Border, None]: ...
    def get_input_hints(self) -> Gtk.InputHints: ...
    def get_input_purpose(self) -> Gtk.InputPurpose: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_invisible_char(self) -> str: ...
    def get_layout(self) -> Pango.Layout: ...
    def get_layout_offsets(self) -> tuple[None, None]: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_max_length(self) -> int: ...
    def get_max_width_chars(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_numeric(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_overwrite_mode(self) -> bool: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_placeholder_text(self) -> str: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> int: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_progress_fraction(self) -> float: ...
    def get_progress_pulse_step(self) -> float: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_range(self) -> tuple[None, None]: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_selection_bounds(*args, **kwargs) -> None: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_snap_to_ticks(self) -> bool: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_tabs(self) -> Union[Pango.TabArray, None]: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> str: ...
    def get_text_area(self) -> Gdk.Rectangle: ...
    def get_text_length(self) -> int: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_update_policy(self) -> Gtk.SpinButtonUpdatePolicy: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_value(self) -> float: ...
    def get_value_as_int(self) -> int: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visibility(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_width_chars(self) -> int: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_wrap(self) -> bool: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_focus_without_selecting(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def im_context_filter_keypress(self, event: Gdk.EventKey) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_text(self, text, position) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def layout_index_to_text_index(self, layout_index: int) -> int: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(adjustment: Gtk.Adjustment, climb_rate: float, digits: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_buffer(buffer: Gtk.EntryBuffer) -> Gtk.Widget: ...
    @staticmethod
    def new_with_range(min: float, max: float, step: float) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def paste_clipboard(self) -> None: ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def progress_pulse(self) -> None: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_im_context(self) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def run_dispose(self) -> None: ...
    def select_region(self, start_pos: int, end_pos: int): ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_activates_default(self, setting: bool): ...
    def set_adjustment(self, adjustment: Gtk.Adjustment): ...
    def set_alignment(self, xalign: float): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_attributes(self, attrs: Pango.AttrList): ...
    def set_buffer(self, buffer: Gtk.EntryBuffer): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_completion(self, completion: Gtk.EntryCompletion = ...): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_cursor_hadjustment(self, adjustment: Gtk.Adjustment = ...): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_digits(self, digits: int): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_editable(self, is_editable: bool): ...
    def set_events(self, events: int): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_frame(self, setting: bool): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_icon_activatable(self, icon_pos: Gtk.EntryIconPosition, activatable: bool): ...
    def set_icon_drag_source(self, icon_pos: Gtk.EntryIconPosition, target_list: Gtk.TargetList, actions: Gdk.DragAction): ...
    def set_icon_from_gicon(self, icon_pos: Gtk.EntryIconPosition, icon: Gio.Icon = ...): ...
    def set_icon_from_icon_name(self, icon_pos: Gtk.EntryIconPosition, icon_name: str = ...): ...
    def set_icon_from_pixbuf(self, icon_pos: Gtk.EntryIconPosition, pixbuf: GdkPixbuf.Pixbuf = ...): ...
    def set_icon_from_stock(self, icon_pos: Gtk.EntryIconPosition, stock_id: str = ...): ...
    def set_icon_sensitive(self, icon_pos: Gtk.EntryIconPosition, sensitive: bool): ...
    def set_icon_tooltip_markup(self, icon_pos: Gtk.EntryIconPosition, tooltip: str = ...): ...
    def set_icon_tooltip_text(self, icon_pos: Gtk.EntryIconPosition, tooltip: str = ...): ...
    def set_increments(self, step: float, page: float): ...
    def set_inner_border(self, border: Gtk.Border = ...): ...
    def set_input_hints(self, hints: Gtk.InputHints): ...
    def set_input_purpose(self, purpose: Gtk.InputPurpose): ...
    def set_invisible_char(self, ch: str): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_max_length(self, max: int): ...
    def set_max_width_chars(self, n_chars: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_numeric(self, numeric: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_overwrite_mode(self, overwrite: bool): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_placeholder_text(self, text: str = ...): ...
    def set_position(self, position: int): ...
    def set_progress_fraction(self, fraction: float): ...
    def set_progress_pulse_step(self, fraction: float): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_range(self, min: float, max: float): ...
    def set_realized(self, realized: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_snap_to_ticks(self, snap_to_ticks: bool): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_tabs(self, tabs: Pango.TabArray): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, text: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_update_policy(self, policy: Gtk.SpinButtonUpdatePolicy): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_value(self, value: float): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visibility(self, visible: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_width_chars(self, n_chars: int): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap(self, wrap: bool): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def spin(self, direction: Gtk.SpinType, increment: float): ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def text_index_to_layout_index(self, text_index: int) -> int: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_invisible_char(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def update(self) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    entry: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class SpinButtonClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class SpinButtonPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class SpinScale(SpinButton):
    def activate(self) -> bool: ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_notify(self, child_property: str): ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def configure(self, adjustment: Gtk.Adjustment, climb_rate: float, digits: int): ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def copy_clipboard(self) -> None: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def cut_clipboard(self) -> None: ...
    def delete_selection(self) -> None: ...
    def delete_text(self, start_pos: int, end_pos: int): ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_activate(self) -> None: ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_backspace(self) -> None: ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_change_value(self, scroll: Gtk.ScrollType): ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_composited_changed(self) -> None: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_copy_clipboard(self) -> None: ...
    def do_cut_clipboard(self) -> None: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_delete_from_cursor(self, type: Gtk.DeleteType, count: int): ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_frame_size(self, x: int, y: int, width: int, height: int): ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_get_text_area_size(self, x: int, y: int, width: int, height: int): ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_input(self, new_value: float) -> int: ...
    def do_insert_at_cursor(self, str: str): ...
    def do_insert_emoji(self) -> None: ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_cursor(self, step: Gtk.MovementStep, count: int, extend_selection: bool): ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_output(self) -> int: ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_paste_clipboard(self) -> None: ...
    def do_populate_popup(self, popup: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_toggle_overwrite(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_value_changed(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def do_wrapped(self) -> None: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_activates_default(self) -> bool: ...
    def get_adjustment(self) -> Gtk.Adjustment: ...
    def get_alignment(self) -> float: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_attributes(self) -> Union[Pango.AttrList, None]: ...
    def get_buffer(self) -> Gtk.EntryBuffer: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_chars(self, start_pos: int, end_pos: int) -> str: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_completion(self) -> Gtk.EntryCompletion: ...
    def get_composite_name(self) -> str: ...
    def get_constrain_drag(self) -> bool: ...
    def get_css_name(self) -> str: ...
    def get_current_icon_drag_source(self) -> int: ...
    def get_cursor_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_digits(self) -> int: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_editable(self) -> bool: ...
    def get_events(self) -> int: ...
    def get_focus_on_click(self) -> bool: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_gamma(self) -> float: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_frame(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_icon_activatable(self, icon_pos: Gtk.EntryIconPosition) -> bool: ...
    def get_icon_area(self, icon_pos: Gtk.EntryIconPosition) -> Gdk.Rectangle: ...
    def get_icon_at_pos(self, x: int, y: int) -> int: ...
    def get_icon_gicon(self, icon_pos: Gtk.EntryIconPosition) -> Union[Gio.Icon, None]: ...
    def get_icon_name(self, icon_pos: Gtk.EntryIconPosition) -> Union[str, None]: ...
    def get_icon_pixbuf(self, icon_pos: Gtk.EntryIconPosition) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def get_icon_sensitive(self, icon_pos: Gtk.EntryIconPosition) -> bool: ...
    def get_icon_stock(self, icon_pos: Gtk.EntryIconPosition) -> str: ...
    def get_icon_storage_type(self, icon_pos: Gtk.EntryIconPosition) -> Gtk.ImageType: ...
    def get_icon_tooltip_markup(self, icon_pos: Gtk.EntryIconPosition) -> Union[str, None]: ...
    def get_icon_tooltip_text(self, icon_pos: Gtk.EntryIconPosition) -> Union[str, None]: ...
    def get_increments(self) -> tuple[None, None]: ...
    def get_inner_border(self) -> Union[Gtk.Border, None]: ...
    def get_input_hints(self) -> Gtk.InputHints: ...
    def get_input_purpose(self) -> Gtk.InputPurpose: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_invisible_char(self) -> str: ...
    def get_label(self) -> str: ...
    def get_layout(self) -> Pango.Layout: ...
    def get_layout_offsets(self) -> tuple[None, None]: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_max_length(self) -> int: ...
    def get_max_width_chars(self) -> int: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_numeric(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_overwrite_mode(self) -> bool: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_placeholder_text(self) -> str: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> int: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_progress_fraction(self) -> float: ...
    def get_progress_pulse_step(self) -> float: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_range(self) -> tuple[None, None]: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_scale_limits(self, lower: float, upper: float) -> bool: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_selection_bounds(*args, **kwargs) -> None: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_snap_to_ticks(self) -> bool: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_tabs(self) -> Union[Pango.TabArray, None]: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_text(self) -> str: ...
    def get_text_area(self) -> Gdk.Rectangle: ...
    def get_text_length(self) -> int: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_update_policy(self) -> Gtk.SpinButtonUpdatePolicy: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_value(self) -> float: ...
    def get_value_as_int(self) -> int: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visibility(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_width_chars(self) -> int: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_wrap(self) -> bool: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_focus_without_selecting(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def im_context_filter_keypress(self, event: Gdk.EventKey) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def insert_text(self, text, position) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def layout_index_to_text_index(self, layout_index: int) -> int: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(adjustment: Gtk.Adjustment, label: str, digits: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_buffer(buffer: Gtk.EntryBuffer) -> Gtk.Widget: ...
    @staticmethod
    def new_with_range(min: float, max: float, step: float) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def paste_clipboard(self) -> None: ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def progress_pulse(self) -> None: ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_im_context(self) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def run_dispose(self) -> None: ...
    def select_region(self, start_pos: int, end_pos: int): ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_activates_default(self, setting: bool): ...
    def set_adjustment(self, adjustment: Gtk.Adjustment): ...
    def set_alignment(self, xalign: float): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_attributes(self, attrs: Pango.AttrList): ...
    def set_buffer(self, buffer: Gtk.EntryBuffer): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_completion(self, completion: Gtk.EntryCompletion = ...): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_constrain_drag(self, constrain: bool): ...
    def set_css_name(self, name: str): ...
    def set_cursor_hadjustment(self, adjustment: Gtk.Adjustment = ...): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_digits(self, digits: int): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_editable(self, is_editable: bool): ...
    def set_events(self, events: int): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_gamma(self, gamma: float): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_frame(self, setting: bool): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_icon_activatable(self, icon_pos: Gtk.EntryIconPosition, activatable: bool): ...
    def set_icon_drag_source(self, icon_pos: Gtk.EntryIconPosition, target_list: Gtk.TargetList, actions: Gdk.DragAction): ...
    def set_icon_from_gicon(self, icon_pos: Gtk.EntryIconPosition, icon: Gio.Icon = ...): ...
    def set_icon_from_icon_name(self, icon_pos: Gtk.EntryIconPosition, icon_name: str = ...): ...
    def set_icon_from_pixbuf(self, icon_pos: Gtk.EntryIconPosition, pixbuf: GdkPixbuf.Pixbuf = ...): ...
    def set_icon_from_stock(self, icon_pos: Gtk.EntryIconPosition, stock_id: str = ...): ...
    def set_icon_sensitive(self, icon_pos: Gtk.EntryIconPosition, sensitive: bool): ...
    def set_icon_tooltip_markup(self, icon_pos: Gtk.EntryIconPosition, tooltip: str = ...): ...
    def set_icon_tooltip_text(self, icon_pos: Gtk.EntryIconPosition, tooltip: str = ...): ...
    def set_increments(self, step: float, page: float): ...
    def set_inner_border(self, border: Gtk.Border = ...): ...
    def set_input_hints(self, hints: Gtk.InputHints): ...
    def set_input_purpose(self, purpose: Gtk.InputPurpose): ...
    def set_invisible_char(self, ch: str): ...
    def set_label(self, label: str): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_max_length(self, max: int): ...
    def set_max_width_chars(self, n_chars: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_numeric(self, numeric: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_overwrite_mode(self, overwrite: bool): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_placeholder_text(self, text: str = ...): ...
    def set_position(self, position: int): ...
    def set_progress_fraction(self, fraction: float): ...
    def set_progress_pulse_step(self, fraction: float): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_range(self, min: float, max: float): ...
    def set_realized(self, realized: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_scale_limits(self, lower: float, upper: float): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_snap_to_ticks(self, snap_to_ticks: bool): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_tabs(self, tabs: Pango.TabArray): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_text(self, text: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_update_policy(self, policy: Gtk.SpinButtonUpdatePolicy): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_value(self, value: float): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visibility(self, visible: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_width_chars(self, n_chars: int): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap(self, wrap: bool): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def spin(self, direction: Gtk.SpinType, increment: float): ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def text_index_to_layout_index(self, text_index: int) -> int: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_invisible_char(self) -> None: ...
    def unset_scale_limits(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def update(self) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    entry: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class SpinScaleClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class StringComboBox(__gi_overrides_Gtk.ComboBox):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_attribute(self, cell: Gtk.CellRenderer, attribute: str, column: int): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: Gtk.CellRenderer): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_changed(self) -> None: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_format_entry_text(self, path: str) -> str: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_active(self) -> str: ...
    def get_active_id(self) -> Union[str, None]: ...
    def get_active_iter(*args, **kwargs) -> None: ...
    def get_add_tearoffs(self) -> bool: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> Union[Gtk.CellArea, None]: ...
    def get_border_width(self) -> int: ...
    def get_button_sensitivity(self) -> Gtk.SensitivityType: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_cells(self) -> list: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_span_column(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_entry_text_column(self) -> int: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_entry(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_id_column(self) -> int: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model(self) -> Gtk.TreeModel: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_popup_accessible(self) -> Atk.Object: ...
    def get_popup_fixed_width(self) -> bool: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_span_column(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_wrap_width(self) -> int: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(model: Gtk.TreeModel, id_column: int, label_column: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_area(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_area_and_entry(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_entry() -> Gtk.Widget: ...
    @staticmethod
    def new_with_model(model: Gtk.TreeModel) -> Gtk.Widget: ...
    @staticmethod
    def new_with_model_and_entry(model: Gtk.TreeModel) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, cell: Gtk.CellRenderer, expand: bool): ...
    def pack_start(self, cell: Gtk.CellRenderer, expand: bool): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_for_device(self, device: Gdk.Device): ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder(self, cell: Gtk.CellRenderer, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_active(self, id: str) -> bool: ...
    def set_active_id(self, active_id: str) -> bool: ...
    def set_active_iter(self, iter: Gtk.TreeIter = ...): ...
    def set_add_tearoffs(self, add_tearoffs: bool): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_button_sensitivity(self, sensitivity: Gtk.SensitivityType): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_cell_data_func(self, cell: Gtk.CellRenderer, func: Gtk.CellLayoutDataFunc = ..., func_data: Incomplete | None = ...): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_span_column(self, column_span: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_entry_text_column(self, text_column: int): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_id_column(self, id_column: int): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_model(self, model: Gtk.TreeModel = ...): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_popup_fixed_width(self, fixed: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_separator_func(self, func: Gtk.TreeViewRowSeparatorFunc, data: Incomplete | None = ...): ...
    def set_row_span_column(self, row_span: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap_width(self, width: int): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class StringComboBoxClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class StringComboBoxPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class UnitComboBox(__gi_overrides_Gtk.ComboBox):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_attribute(self, cell: Gtk.CellRenderer, attribute: str, column: int): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: Gtk.CellRenderer): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_changed(self) -> None: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_format_entry_text(self, path: str) -> str: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_active(self) -> Gimp.Unit: ...
    def get_active_id(self) -> Union[str, None]: ...
    def get_active_iter(*args, **kwargs) -> None: ...
    def get_add_tearoffs(self) -> bool: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> Union[Gtk.CellArea, None]: ...
    def get_border_width(self) -> int: ...
    def get_button_sensitivity(self) -> Gtk.SensitivityType: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_cells(self) -> list: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_span_column(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_entry_text_column(self) -> int: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_entry(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_id_column(self) -> int: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model(self) -> Gtk.TreeModel: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_popup_accessible(self) -> Atk.Object: ...
    def get_popup_fixed_width(self) -> bool: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_span_column(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_wrap_width(self) -> int: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new() -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_area(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_area_and_entry(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_entry() -> Gtk.Widget: ...
    @staticmethod
    def new_with_model(model: GimpUi.UnitStore) -> Gtk.Widget: ...
    @staticmethod
    def new_with_model_and_entry(model: Gtk.TreeModel) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, cell: Gtk.CellRenderer, expand: bool): ...
    def pack_start(self, cell: Gtk.CellRenderer, expand: bool): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_for_device(self, device: Gdk.Device): ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder(self, cell: Gtk.CellRenderer, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_active(self, unit: Gimp.Unit): ...
    def set_active_id(self, active_id: str) -> bool: ...
    def set_active_iter(self, iter: Gtk.TreeIter = ...): ...
    def set_add_tearoffs(self, add_tearoffs: bool): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_button_sensitivity(self, sensitivity: Gtk.SensitivityType): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_cell_data_func(self, cell: Gtk.CellRenderer, func: Gtk.CellLayoutDataFunc = ..., func_data: Incomplete | None = ...): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_span_column(self, column_span: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_entry_text_column(self, text_column: int): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_id_column(self, id_column: int): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_model(self, model: Gtk.TreeModel = ...): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_popup_fixed_width(self, fixed: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_separator_func(self, func: Gtk.TreeViewRowSeparatorFunc, data: Incomplete | None = ...): ...
    def set_row_span_column(self, row_span: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap_width(self, width: int): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class UnitComboBoxClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class UnitComboBoxPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class UnitStore(__gi_overrides_GObject.Object, __gi_overrides_Gtk.TreeModel):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def filter_new(self, root: Gtk.TreePath) -> Gtk.TreeModel: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, func: Gtk.TreeModelForeachFunc, user_data: Incomplete | None = ...): ...
    def freeze_notify(self) -> None: ...
    def get(self, treeiter, *columns) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_column_type(self, index_: int) -> GType: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_flags(self) -> Gtk.TreeModelFlags: ...
    def get_has_percent(self) -> bool: ...
    def get_has_pixels(self) -> bool: ...
    def get_iter(self, path) -> None: ...
    def get_iter_first(*args, **kwargs) -> None: ...
    def get_iter_from_string(*args, **kwargs) -> None: ...
    def get_nth_value(self, unit: Gimp.Unit, index: int) -> float: ...
    def get_n_columns(self) -> int: ...
    def get_path(self, iter: Gtk.TreeIter) -> Gtk.TreePath: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_string_from_iter(self, iter: Gtk.TreeIter) -> str: ...
    def get_value(self, iter: Gtk.TreeIter, column: int) -> GObject.Value: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def iter_children(*args, **kwargs) -> None: ...
    def iter_has_child(self, iter: Gtk.TreeIter) -> bool: ...
    def iter_next(self, aiter) -> None: ...
    def iter_nth_child(*args, **kwargs) -> None: ...
    def iter_n_children(self, iter: Gtk.TreeIter) -> int: ...
    def iter_parent(*args, **kwargs) -> None: ...
    def iter_previous(self, aiter) -> None: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(num_values: int) -> GimpUi.UnitStore: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_node(self, iter: Gtk.TreeIter): ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def rows_reordered(self, path, iter, new_order) -> None: ...
    def row_changed(self, path, iter) -> None: ...
    def row_deleted(self, path) -> None: ...
    def row_has_child_toggled(self, path, iter) -> None: ...
    def row_inserted(self, path, iter) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_has_percent(self, has_percent: bool): ...
    def set_has_pixels(self, has_pixels: bool): ...
    def set_pixel_value(self, index: int, value: float): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_resolution(self, index: int, resolution: float): ...
    def set_row(self, treeiter, row) -> None: ...
    def sort_new_with_model(self) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unref_node(self, iter: Gtk.TreeIter): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    def __delitem__(self, key) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, key) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class UnitStoreClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class UnitStorePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class VectorsComboBox(IntComboBox):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_attribute(self, cell: Gtk.CellRenderer, attribute: str, column: int): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def clear(self) -> None: ...
    def clear_attributes(self, cell: Gtk.CellRenderer): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, value: int, callback: GObject.Callback, data) -> int: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_changed(self) -> None: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self, cr: cairo.Context) -> bool: ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_format_entry_text(self, path: str) -> str: ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self, cr: cairo.Context): ...
    def editing_done(self) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_active(self) -> tuple[bool, None]: ...
    def get_active_id(self) -> Union[str, None]: ...
    def get_active_iter(*args, **kwargs) -> None: ...
    def get_active_user_data(self) -> tuple[bool, user_data]: ...
    def get_add_tearoffs(self) -> bool: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> Union[Gtk.CellArea, None]: ...
    def get_border_width(self) -> int: ...
    def get_button_sensitivity(self) -> Gtk.SensitivityType: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_cells(self) -> list: ...
    def get_child(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_column_span_column(self) -> int: ...
    def get_composite_name(self) -> str: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_entry_text_column(self) -> int: ...
    def get_events(self) -> int: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_entry(self) -> bool: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_id_column(self) -> int: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_label(self) -> str: ...
    def get_layout(self) -> GimpUi.IntComboBoxLayout: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model(self) -> Gtk.TreeModel: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_opacity(self) -> float: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_popup_accessible(self) -> Atk.Object: ...
    def get_popup_fixed_width(self) -> bool: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_row_span_column(self) -> int: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_title(self) -> str: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def get_wrap_width(self) -> int: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(constraint: GimpUi.ItemConstraintFunc) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_with_area(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_area_and_entry(area: Gtk.CellArea) -> Gtk.Widget: ...
    @staticmethod
    def new_with_entry() -> Gtk.Widget: ...
    @staticmethod
    def new_with_model(model: Gtk.TreeModel) -> Gtk.Widget: ...
    @staticmethod
    def new_with_model_and_entry(model: Gtk.TreeModel) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, cell: Gtk.CellRenderer, expand: bool): ...
    def pack_start(self, cell: Gtk.CellRenderer, expand: bool): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_for_device(self, device: Gdk.Device): ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def remove_widget(self) -> None: ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder(self, cell: Gtk.CellRenderer, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_active(self, value: int) -> bool: ...
    def set_active_by_user_data(self, user_data) -> bool: ...
    def set_active_id(self, active_id: str) -> bool: ...
    def set_active_iter(self, iter: Gtk.TreeIter = ...): ...
    def set_add_tearoffs(self, add_tearoffs: bool): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_border_width(self, border_width: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_button_sensitivity(self, sensitivity: Gtk.SensitivityType): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_cell_data_func(self, cell: Gtk.CellRenderer, func: Gtk.CellLayoutDataFunc = ..., func_data: Incomplete | None = ...): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_column_span_column(self, column_span: int): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_entry_text_column(self, text_column: int): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_id_column(self, id_column: int): ...
    def set_label(self, label: str): ...
    def set_layout(self, layout: GimpUi.IntComboBoxLayout): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_model(self, model: Gtk.TreeModel = ...): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_opacity(self, opacity: float): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_popup_fixed_width(self, fixed: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_row_separator_func(self, func: Gtk.TreeViewRowSeparatorFunc, data: Incomplete | None = ...): ...
    def set_row_span_column(self, row_span: int): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_sensitivity(self, func: GimpUi.IntSensitivityFunc, data: Incomplete | None = ...): ...
    def set_size_request(self, width: int, height: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_title(self, title: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def set_wrap_width(self, width: int): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def start_editing(self, event: Gdk.Event = ...): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class WidgetsError(__gobject.GEnum):
    GIMP_WIDGETS_PARSE_ERROR: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    WIDGETS_PARSE_ERROR: int

class ZoomModel(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_zoomed(self, old_factor: float, new_factor: float): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_factor(self) -> float: ...
    def get_fraction(self) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new() -> GimpUi.ZoomModel: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_range(self, min: float, max: float): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def zoom(self, zoom_type: GimpUi.ZoomType, scale: float): ...
    @staticmethod
    def zoom_step(zoom_type: GimpUi.ZoomType, scale: float, delta: float) -> float: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ZoomModelClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete
    zoomed: Incomplete

class ZoomModelPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ZoomPreview(ScrolledPreview):
    def activate(self) -> bool: ...
    def add(self, widget: Gtk.Widget): ...
    def add_accelerator(self, accel_signal: str, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): ...
    def add_child(self, builder: Gtk.Builder, child: GObject.Object, type: str = ...): ...
    def add_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def add_events(self, events: int): ...
    def add_mnemonic_label(self, label: Gtk.Widget): ...
    def add_tick_callback(self, callback: Gtk.TickCallback, user_data) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def bind_template_callback_full(self, callback_name: str, callback_symbol: GObject.Callback): ...
    def bind_template_child_full(self, name: str, internal_child: bool, struct_offset: int): ...
    def can_activate_accel(self, signal_id: int) -> bool: ...
    def chain(self, *args, **kwargs) -> None: ...
    def check_resize(self) -> None: ...
    def child_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def child_get(self, child, *prop_names) -> None: ...
    def child_get_property(self, child, property_name, value: Incomplete | None = ...) -> None: ...
    def child_notify(self, child: Gtk.Widget, child_property: str): ...
    def child_notify_by_pspec(self, child: Gtk.Widget, pspec: GObject.ParamSpec): ...
    def child_set(self, child, **kwargs) -> None: ...
    def child_set_property(self, child: Gtk.Widget, property_name: str, value: GObject.Value): ...
    def child_type(self) -> GType: ...
    def class_path(self) -> tuple[None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def compute_expand(self, orientation: Gtk.Orientation) -> bool: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def construct_child(self, builder: Gtk.Builder, name: str) -> GObject.Object: ...
    def create_pango_context(self) -> Pango.Context: ...
    def create_pango_layout(self, text: str) -> Pango.Layout: ...
    def custom_finished(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_end(self, builder: Gtk.Builder, child: GObject.Object, tagname: str, data: Incomplete | None = ...): ...
    def custom_tag_start(self, builder: Gtk.Builder, child: GObject.Object, tagname: str) -> tuple[bool, None, data]: ...
    def destroy(self) -> None: ...
    def destroyed(self, widget_pointer: Gtk.Widget) -> Gtk.Widget: ...
    def device_is_shadowed(self, device: Gdk.Device) -> bool: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_add(self, widget: Gtk.Widget): ...
    def do_adjust_baseline_allocation(self, baseline: int): ...
    def do_adjust_baseline_request(self, minimum_baseline: int, natural_baseline: int): ...
    def do_adjust_size_allocation(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int, allocated_pos: int, allocated_size: int): ...
    def do_adjust_size_request(self, orientation: Gtk.Orientation, minimum_size: int, natural_size: int): ...
    def do_button_press_event(self, event: Gdk.EventButton) -> bool: ...
    def do_button_release_event(self, event: Gdk.EventButton) -> bool: ...
    def do_can_activate_accel(self, signal_id: int) -> bool: ...
    def do_check_resize(self) -> None: ...
    def do_child_notify(self, child_property: GObject.ParamSpec): ...
    def do_child_type(self) -> GType: ...
    def do_composited_changed(self) -> None: ...
    def do_composite_name(self, child: Gtk.Widget) -> str: ...
    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool): ...
    def do_configure_event(self, event: Gdk.EventConfigure) -> bool: ...
    def do_damage_event(self, event: Gdk.EventExpose) -> bool: ...
    def do_delete_event(self, event: Gdk.EventAny) -> bool: ...
    def do_destroy(self) -> None: ...
    def do_destroy_event(self, event: Gdk.EventAny) -> bool: ...
    def do_direction_changed(self, previous_direction: Gtk.TextDirection): ...
    def do_dispatch_child_properties_changed(self, n_pspecs: int, pspecs: GObject.ParamSpec): ...
    def do_drag_begin(self, context: Gdk.DragContext): ...
    def do_drag_data_delete(self, context: Gdk.DragContext): ...
    def do_drag_data_get(self, context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_data_received(self, context: Gdk.DragContext, x: int, y: int, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_drag_drop(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_drag_end(self, context: Gdk.DragContext): ...
    def do_drag_failed(self, context: Gdk.DragContext, result: Gtk.DragResult) -> bool: ...
    def do_drag_leave(self, context: Gdk.DragContext, time_: int): ...
    def do_drag_motion(self, context: Gdk.DragContext, x: int, y: int, time_: int) -> bool: ...
    def do_draw(self) -> None: ...
    def do_draw_buffer(self, buffer: list, rowstride: int): ...
    def do_draw_thumb(self, area: GimpUi.PreviewArea, width: int, height: int): ...
    def do_enter_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_event(self, event: Gdk.Event) -> bool: ...
    def do_focus(self, direction: Gtk.DirectionType) -> bool: ...
    def do_focus_in_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_focus_out_event(self, event: Gdk.EventFocus) -> bool: ...
    def do_forall(self, include_internals: bool, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def do_get_accessible(self) -> Atk.Object: ...
    def do_get_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def do_get_preferred_height(self) -> tuple[None, None]: ...
    def do_get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def do_get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def do_get_preferred_width(self) -> tuple[None, None]: ...
    def do_get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def do_get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def do_grab_broken_event(self, event: Gdk.EventGrabBroken) -> bool: ...
    def do_grab_focus(self) -> None: ...
    def do_grab_notify(self, was_grabbed: bool): ...
    def do_hide(self) -> None: ...
    def do_hierarchy_changed(self, previous_toplevel: Gtk.Widget): ...
    def do_invalidated(self) -> None: ...
    def do_keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def do_key_press_event(self, event: Gdk.EventKey) -> bool: ...
    def do_key_release_event(self, event: Gdk.EventKey) -> bool: ...
    def do_leave_notify_event(self, event: Gdk.EventCrossing) -> bool: ...
    def do_map(self) -> None: ...
    def do_map_event(self, event: Gdk.EventAny) -> bool: ...
    def do_mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def do_motion_notify_event(self, event: Gdk.EventMotion) -> bool: ...
    def do_move_focus(self, direction: Gtk.DirectionType): ...
    def do_parent_set(self, previous_parent: Gtk.Widget): ...
    def do_popup_menu(self) -> bool: ...
    def do_property_notify_event(self, event: Gdk.EventProperty) -> bool: ...
    def do_proximity_in_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_proximity_out_event(self, event: Gdk.EventProximity) -> bool: ...
    def do_query_tooltip(self, x: int, y: int, keyboard_tooltip: bool, tooltip: Gtk.Tooltip) -> bool: ...
    def do_queue_draw_region(self, region: cairo.Region): ...
    def do_realize(self) -> None: ...
    def do_remove(self, widget: Gtk.Widget): ...
    def do_screen_changed(self, previous_screen: Gdk.Screen): ...
    def do_scroll_event(self, event: Gdk.EventScroll) -> bool: ...
    def do_selection_clear_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_get(self, selection_data: Gtk.SelectionData, info: int, time_: int): ...
    def do_selection_notify_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_selection_received(self, selection_data: Gtk.SelectionData, time_: int): ...
    def do_selection_request_event(self, event: Gdk.EventSelection) -> bool: ...
    def do_set_child_property(self, child: Gtk.Widget, property_id: int, value: GObject.Value, pspec: GObject.ParamSpec): ...
    def do_set_cursor(self) -> None: ...
    def do_set_focus_child(self, child: Gtk.Widget = ...): ...
    def do_show(self) -> None: ...
    def do_show_all(self) -> None: ...
    def do_show_help(self, help_type: Gtk.WidgetHelpType) -> bool: ...
    def do_size_allocate(self, allocation: Gdk.Rectangle): ...
    def do_state_changed(self, previous_state: Gtk.StateType): ...
    def do_state_flags_changed(self, previous_state_flags: Gtk.StateFlags): ...
    def do_style_set(self, previous_style: Gtk.Style): ...
    def do_style_updated(self) -> None: ...
    def do_touch_event(self, event: Gdk.EventTouch) -> bool: ...
    def do_transform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def do_unmap(self) -> None: ...
    def do_unmap_event(self, event: Gdk.EventAny) -> bool: ...
    def do_unrealize(self) -> None: ...
    def do_untransform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def do_visibility_notify_event(self, event: Gdk.EventVisibility) -> bool: ...
    def do_window_state_event(self, event: Gdk.EventWindowState) -> bool: ...
    def drag_begin(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event) -> Gdk.DragContext: ...
    def drag_begin_with_coordinates(self, targets: Gtk.TargetList, actions: Gdk.DragAction, button: int, event: Gdk.Event, x: int, y: int) -> Gdk.DragContext: ...
    def drag_check_threshold(self, start_x: int, start_y: int, current_x: int, current_y: int) -> bool: ...
    def drag_dest_add_image_targets(self) -> None: ...
    def drag_dest_add_text_targets(self) -> None: ...
    def drag_dest_add_uri_targets(self) -> None: ...
    def drag_dest_find_target(self, context: Gdk.DragContext, target_list: Gtk.TargetList) -> Gdk.Atom: ...
    def drag_dest_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_dest_get_track_motion(self) -> bool: ...
    def drag_dest_set(self, flags: Gtk.DestDefaults, targets: list, actions: Gdk.DragAction): ...
    def drag_dest_set_proxy(self, proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: bool): ...
    def drag_dest_set_target_list(self, target_list) -> None: ...
    def drag_dest_set_track_motion(self, track_motion: bool): ...
    def drag_dest_unset(self) -> None: ...
    def drag_get_data(self, context: Gdk.DragContext, target: Gdk.Atom, time_: int): ...
    def drag_highlight(self) -> None: ...
    def drag_source_add_image_targets(self) -> None: ...
    def drag_source_add_text_targets(self) -> None: ...
    def drag_source_add_uri_targets(self) -> None: ...
    def drag_source_get_target_list(self) -> Union[Gtk.TargetList, None]: ...
    def drag_source_set(self, start_button_mask: Gdk.ModifierType, targets: list, actions: Gdk.DragAction): ...
    def drag_source_set_icon_gicon(self, icon: Gio.Icon): ...
    def drag_source_set_icon_name(self, icon_name: str): ...
    def drag_source_set_icon_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf): ...
    def drag_source_set_icon_stock(self, stock_id: str): ...
    def drag_source_set_target_list(self, target_list) -> None: ...
    def drag_source_unset(self) -> None: ...
    def drag_unhighlight(self) -> None: ...
    def draw(self) -> None: ...
    def draw_buffer(self, buffer: list, rowstride: int): ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def ensure_style(self) -> None: ...
    def error_bell(self) -> None: ...
    def event(self, event: Gdk.Event) -> bool: ...
    def find_child_property(self, property_name: str) -> Union[GObject.ParamSpec, None]: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def find_style_property(self, property_name: str) -> GObject.ParamSpec: ...
    def forall(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, callback: Gtk.Callback, callback_data: Incomplete | None = ...): ...
    def freeze(self) -> None: ...
    def freeze_child_notify(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_accessible(self) -> Atk.Object: ...
    def get_action_group(self, prefix: str) -> Union[Gio.ActionGroup, None]: ...
    def get_adjustments(self) -> tuple[None, None]: ...
    def get_allocated_baseline(self) -> int: ...
    def get_allocated_height(self) -> int: ...
    def get_allocated_size(self) -> tuple[None, None]: ...
    def get_allocated_width(self) -> int: ...
    def get_allocation(self) -> Gdk.Rectangle: ...
    def get_ancestor(self, widget_type: GType) -> Union[Gtk.Widget, None]: ...
    def get_app_paintable(self) -> bool: ...
    def get_area(self) -> GimpUi.PreviewArea: ...
    def get_baseline_position(self) -> Gtk.BaselinePosition: ...
    def get_border_width(self) -> int: ...
    def get_bounds(self) -> tuple[None, None, None, None]: ...
    def get_can_default(self) -> bool: ...
    def get_can_focus(self) -> bool: ...
    def get_center_widget(self) -> Union[Gtk.Widget, None]: ...
    def get_children(self) -> list: ...
    def get_child_requisition(self) -> Gtk.Requisition: ...
    def get_child_visible(self) -> bool: ...
    def get_clip(self) -> Gdk.Rectangle: ...
    def get_clipboard(self, selection: Gdk.Atom) -> Gtk.Clipboard: ...
    def get_composite_name(self) -> str: ...
    def get_controls(self) -> Gtk.Box: ...
    def get_css_name(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_default_cursor(self) -> Gdk.Cursor: ...
    @staticmethod
    def get_default_direction() -> Gtk.TextDirection: ...
    @staticmethod
    def get_default_style() -> Gtk.Style: ...
    def get_device_enabled(self, device: Gdk.Device) -> bool: ...
    def get_device_events(self, device: Gdk.Device) -> Gdk.EventMask: ...
    def get_direction(self) -> Gtk.TextDirection: ...
    def get_display(self) -> Gdk.Display: ...
    def get_double_buffered(self) -> bool: ...
    def get_drawable(self) -> Gimp.Drawable: ...
    def get_events(self) -> int: ...
    def get_factor(self) -> float: ...
    def get_focus_chain(*args, **kwargs) -> None: ...
    def get_focus_child(self) -> Union[Gtk.Widget, None]: ...
    def get_focus_hadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_focus_on_click(self) -> bool: ...
    def get_focus_vadjustment(self) -> Union[Gtk.Adjustment, None]: ...
    def get_font_map(self) -> Union[Pango.FontMap, None]: ...
    def get_font_options(self) -> Union[cairo.FontOptions, None]: ...
    def get_frame(self) -> Gtk.AspectFrame: ...
    def get_frame_clock(self) -> Union[Gdk.FrameClock, None]: ...
    def get_grid(self) -> Gtk.Grid: ...
    def get_halign(self) -> Gtk.Align: ...
    def get_has_tooltip(self) -> bool: ...
    def get_has_window(self) -> bool: ...
    def get_hexpand(self) -> bool: ...
    def get_hexpand_set(self) -> bool: ...
    def get_homogeneous(self) -> bool: ...
    def get_internal_child(self, builder: Gtk.Builder, childname: str) -> GObject.Object: ...
    def get_mapped(self) -> bool: ...
    def get_margin_bottom(self) -> int: ...
    def get_margin_end(self) -> int: ...
    def get_margin_left(self) -> int: ...
    def get_margin_right(self) -> int: ...
    def get_margin_start(self) -> int: ...
    def get_margin_top(self) -> int: ...
    def get_model(self) -> GimpUi.ZoomModel: ...
    def get_modifier_mask(self, intent: Gdk.ModifierIntent) -> Gdk.ModifierType: ...
    def get_modifier_style(self) -> Gtk.RcStyle: ...
    def get_name(self) -> str: ...
    def get_no_show_all(self) -> bool: ...
    def get_offsets(self) -> tuple[None, None]: ...
    def get_opacity(self) -> float: ...
    def get_orientation(self) -> Gtk.Orientation: ...
    def get_pango_context(self) -> Pango.Context: ...
    def get_parent(self) -> Union[Gtk.Widget, None]: ...
    def get_parent_window(self) -> Union[Gdk.Window, None]: ...
    def get_path(self) -> Gtk.WidgetPath: ...
    def get_path_for_child(self, child: Gtk.Widget) -> Gtk.WidgetPath: ...
    def get_pointer(self) -> tuple[None, None]: ...
    def get_position(self) -> tuple[None, None]: ...
    def get_preferred_height(self) -> tuple[None, None]: ...
    def get_preferred_height_and_baseline_for_width(self, width: int) -> tuple[None, None, None, None]: ...
    def get_preferred_height_for_width(self, width: int) -> tuple[None, None]: ...
    def get_preferred_size(self) -> tuple[None, None]: ...
    def get_preferred_width(self) -> tuple[None, None]: ...
    def get_preferred_width_for_height(self, height: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_realized(self) -> bool: ...
    def get_receives_default(self) -> bool: ...
    def get_request_mode(self) -> Gtk.SizeRequestMode: ...
    def get_requisition(self) -> Gtk.Requisition: ...
    def get_resize_mode(self) -> Gtk.ResizeMode: ...
    def get_root_window(self) -> Gdk.Window: ...
    def get_scale_factor(self) -> int: ...
    def get_screen(self) -> Gdk.Screen: ...
    def get_sensitive(self) -> bool: ...
    def get_settings(self) -> Gtk.Settings: ...
    def get_size(self) -> tuple[None, None]: ...
    def get_size_request(self) -> tuple[None, None]: ...
    def get_source(self) -> tuple[list, None, None, None]: ...
    def get_spacing(self) -> int: ...
    def get_state(self) -> Gtk.StateType: ...
    def get_state_flags(self) -> Gtk.StateFlags: ...
    def get_style(self) -> Gtk.Style: ...
    def get_style_context(self) -> Gtk.StyleContext: ...
    def get_support_multidevice(self) -> bool: ...
    def get_template_child(self, widget_type: GType, name: str) -> GObject.Object: ...
    def get_tooltip_markup(self) -> Union[str, None]: ...
    def get_tooltip_text(self) -> Union[str, None]: ...
    def get_tooltip_window(self) -> Gtk.Window: ...
    def get_toplevel(self) -> Gtk.Widget: ...
    def get_update(self) -> bool: ...
    def get_valign(self) -> Gtk.Align: ...
    def get_valign_with_baseline(self) -> Gtk.Align: ...
    def get_vexpand(self) -> bool: ...
    def get_vexpand_set(self) -> bool: ...
    def get_visible(self) -> bool: ...
    def get_visual(self) -> Gdk.Visual: ...
    def get_window(self) -> Union[Gdk.Window, None]: ...
    def grab_add(self) -> None: ...
    def grab_default(self) -> None: ...
    def grab_focus(self) -> None: ...
    def grab_remove(self) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def handle_border_width(self) -> None: ...
    def has_default(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def has_grab(self) -> bool: ...
    def has_rc_style(self) -> bool: ...
    def has_screen(self) -> bool: ...
    def has_visible_focus(self) -> bool: ...
    def hide(self) -> None: ...
    def hide_on_delete(self) -> bool: ...
    def init_template(self) -> None: ...
    def input_shape_combine_region(self, region: cairo.Region = ...): ...
    def insert_action_group(self, name: str, group: Gio.ActionGroup = ...): ...
    def install_child_properties(self, pspecs: list): ...
    def install_child_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def install_style_property(self, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def intersect(self, area: Gdk.Rectangle) -> tuple[bool, None]: ...
    def invalidate(self) -> None: ...
    def in_destruction(self) -> bool: ...
    def is_ancestor(self, ancestor: Gtk.Widget) -> bool: ...
    def is_composited(self) -> bool: ...
    def is_drawable(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_focus(self) -> bool: ...
    def is_sensitive(self) -> bool: ...
    def is_toplevel(self) -> bool: ...
    def is_visible(self) -> bool: ...
    def keynav_failed(self, direction: Gtk.DirectionType) -> bool: ...
    def list_accel_closures(self) -> list: ...
    def list_action_prefixes(self) -> list: ...
    def list_child_properties(self) -> tuple[list, None]: ...
    def list_mnemonic_labels(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    def list_style_properties(self) -> tuple[list, None]: ...
    def map(self) -> None: ...
    def mnemonic_activate(self, group_cycling: bool) -> bool: ...
    def modify_base(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_bg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_cursor(self, primary: Gdk.Color = ..., secondary: Gdk.Color = ...): ...
    def modify_fg(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    def modify_font(self, font_desc: Pango.FontDescription = ...): ...
    def modify_style(self, style: Gtk.RcStyle): ...
    def modify_text(self, state: Gtk.StateType, color: Gdk.Color = ...): ...
    @staticmethod
    def new(orientation: Gtk.Orientation, spacing: int) -> Gtk.Widget: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_drawable(drawable: Gimp.Drawable) -> Gtk.Widget: ...
    @staticmethod
    def new_with_model_from_drawable(drawable: Gimp.Drawable, model: GimpUi.ZoomModel) -> Gtk.Widget: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_background_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_color(self, state: Gtk.StateFlags, color: Gdk.RGBA = ...): ...
    def override_cursor(self, cursor: Gdk.RGBA = ..., secondary_cursor: Gdk.RGBA = ...): ...
    def override_font(self, font_desc: Pango.FontDescription = ...): ...
    def override_property(self, property_id: int, name: str): ...
    def override_symbolic_color(self, name: str, color: Gdk.RGBA = ...): ...
    def pack_end(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def pack_start(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int): ...
    def parser_finished(self, builder: Gtk.Builder): ...
    def path(self) -> tuple[None, None, None]: ...
    @staticmethod
    def pop_composite_child() -> None: ...
    def propagate_draw(self, child: Gtk.Widget, cr: cairo.Context): ...
    @staticmethod
    def push_composite_child() -> None: ...
    def query_child_packing(self, child: Gtk.Widget) -> tuple[None, None, None, None]: ...
    def queue_allocate(self) -> None: ...
    def queue_compute_expand(self) -> None: ...
    def queue_draw(self) -> None: ...
    def queue_draw_area(self, x: int, y: int, width: int, height: int): ...
    def queue_draw_region(self, region: cairo.Region): ...
    def queue_resize(self) -> None: ...
    def queue_resize_no_redraw(self) -> None: ...
    def realize(self) -> None: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def region_intersect(self, region: cairo.Region) -> cairo.Region: ...
    def register_window(self, window: Gdk.Window): ...
    def remove(self, widget: Gtk.Widget): ...
    def remove_accelerator(self, accel_group: Gtk.AccelGroup, accel_key: int, accel_mods: Gdk.ModifierType) -> bool: ...
    def remove_mnemonic_label(self, label: Gtk.Widget): ...
    def remove_tick_callback(self, id: int): ...
    def render_icon(self, stock_id: str, size: int, detail: str = ...) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def render_icon_pixbuf(self, stock_id: str, size: int) -> Union[GdkPixbuf.Pixbuf, None]: ...
    def reorder_child(self, child: Gtk.Widget, position: int): ...
    def reparent(self, new_parent: Gtk.Widget): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def reset_rc_styles(self) -> None: ...
    def reset_style(self) -> None: ...
    def resize_children(self) -> None: ...
    def run_dispose(self) -> None: ...
    def send_expose(self, event: Gdk.Event) -> int: ...
    def send_focus_change(self, event: Gdk.Event) -> bool: ...
    def set_accel_path(self, accel_path: str = ..., accel_group: Gtk.AccelGroup = ...): ...
    def set_accessible_role(self, role: Atk.Role): ...
    def set_accessible_type(self, type: GType): ...
    def set_allocation(self, allocation: Gdk.Rectangle): ...
    def set_app_paintable(self, app_paintable: bool): ...
    def set_baseline_position(self, position: Gtk.BaselinePosition): ...
    def set_border_width(self, border_width: int): ...
    def set_bounds(self, xmin: int, ymin: int, xmax: int, ymax: int): ...
    def set_buildable_property(self, builder: Gtk.Builder, name: str, value: GObject.Value): ...
    def set_can_default(self, can_default: bool): ...
    def set_can_focus(self, can_focus: bool): ...
    def set_center_widget(self, widget: Gtk.Widget = ...): ...
    def set_child_packing(self, child: Gtk.Widget, expand: bool, fill: bool, padding: int, pack_type: Gtk.PackType): ...
    def set_child_visible(self, is_visible: bool): ...
    def set_clip(self, clip: Gdk.Rectangle): ...
    def set_composite_name(self, name: str): ...
    def set_connect_func(self, connect_func: Gtk.BuilderConnectFunc, connect_data: Incomplete | None = ...): ...
    def set_css_name(self, name: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_default_cursor(self, cursor: Gdk.Cursor): ...
    @staticmethod
    def set_default_direction(dir: Gtk.TextDirection): ...
    def set_device_enabled(self, device: Gdk.Device, enabled: bool): ...
    def set_device_events(self, device: Gdk.Device, events: Gdk.EventMask): ...
    def set_direction(self, dir: Gtk.TextDirection): ...
    def set_double_buffered(self, double_buffered: bool): ...
    def set_events(self, events: int): ...
    def set_focus_chain(self, focusable_widgets: list): ...
    def set_focus_child(self, child: Gtk.Widget = ...): ...
    def set_focus_hadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_focus_on_click(self, focus_on_click: bool): ...
    def set_focus_vadjustment(self, adjustment: Gtk.Adjustment): ...
    def set_font_map(self, font_map: Pango.FontMap = ...): ...
    def set_font_options(self, options: cairo.FontOptions = ...): ...
    def set_halign(self, align: Gtk.Align): ...
    def set_has_tooltip(self, has_tooltip: bool): ...
    def set_has_window(self, has_window: bool): ...
    def set_hexpand(self, expand: bool): ...
    def set_hexpand_set(self, set: bool): ...
    def set_homogeneous(self, homogeneous: bool): ...
    def set_mapped(self, mapped: bool): ...
    def set_margin_bottom(self, margin: int): ...
    def set_margin_end(self, margin: int): ...
    def set_margin_left(self, margin: int): ...
    def set_margin_right(self, margin: int): ...
    def set_margin_start(self, margin: int): ...
    def set_margin_top(self, margin: int): ...
    def set_name(self, name: str): ...
    def set_no_show_all(self, no_show_all: bool): ...
    def set_offsets(self, xoff: int, yoff: int): ...
    def set_opacity(self, opacity: float): ...
    def set_orientation(self, orientation: Gtk.Orientation): ...
    def set_parent(self, parent: Gtk.Widget): ...
    def set_parent_window(self, parent_window: Gdk.Window): ...
    def set_policy(self, hscrollbar_policy: Gtk.PolicyType, vscrollbar_policy: Gtk.PolicyType): ...
    def set_position(self, x: int, y: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_realized(self, realized: bool): ...
    def set_reallocate_redraws(self, needs_redraws: bool): ...
    def set_receives_default(self, receives_default: bool): ...
    def set_redraw_on_allocate(self, redraw_on_allocate: bool): ...
    def set_resize_mode(self, resize_mode: Gtk.ResizeMode): ...
    def set_sensitive(self, sensitive: bool): ...
    def set_size(self, width: int, height: int): ...
    def set_size_request(self, width: int, height: int): ...
    def set_spacing(self, spacing: int): ...
    def set_state(self, state: Gtk.StateType): ...
    def set_state_flags(self, flags: Gtk.StateFlags, clear: bool): ...
    def set_style(self, style: Gtk.Style = ...): ...
    def set_support_multidevice(self, support_multidevice: bool): ...
    def set_template(self, template_bytes: GLib.Bytes): ...
    def set_template_from_resource(self, resource_name: str): ...
    def set_tooltip_markup(self, markup: str = ...): ...
    def set_tooltip_text(self, text: str = ...): ...
    def set_tooltip_window(self, custom_window: Gtk.Window = ...): ...
    def set_update(self, update: bool): ...
    def set_valign(self, align: Gtk.Align): ...
    def set_vexpand(self, expand: bool): ...
    def set_vexpand_set(self, set: bool): ...
    def set_visible(self, visible: bool): ...
    def set_visual(self, visual: Gdk.Visual = ...): ...
    def set_window(self, window: Gdk.Window): ...
    def shape_combine_region(self, region: cairo.Region = ...): ...
    def show(self) -> None: ...
    def show_all(self) -> None: ...
    def show_now(self) -> None: ...
    def size_allocate(self, allocation: Gdk.Rectangle): ...
    def size_allocate_with_baseline(self, allocation: Gdk.Rectangle, baseline: int): ...
    def size_request(self) -> Gtk.Requisition: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def style_attach(self) -> None: ...
    def style_get_property(self, property_name, value: Incomplete | None = ...) -> None: ...
    def thaw(self) -> None: ...
    def thaw_child_notify(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def transform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def translate_coordinates(*args, **kwargs) -> None: ...
    def trigger_tooltip_query(self) -> None: ...
    def unmap(self) -> None: ...
    def unparent(self) -> None: ...
    def unrealize(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_window(self, window: Gdk.Window): ...
    def unset_focus_chain(self) -> None: ...
    def unset_state_flags(self, flags: Gtk.StateFlags): ...
    def untransform(self, src_x: int, src_y: int) -> tuple[None, None]: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> None: ...
    def __contains__(self, child) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    container: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    widget: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ZoomPreviewClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ZoomPreviewPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ZoomType(__gobject.GEnum):
    GIMP_ZOOM_IN: int
    GIMP_ZOOM_OUT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    IN: int
    OUT: int

class __class__:
    def __delattr__(self, name) -> None: ...
    def __dir__(self) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getattr__(self, name) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, namespace, version: Incomplete | None = ...) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

__loader__: Incomplete
__path__: Incomplete
__spec__: Incomplete
