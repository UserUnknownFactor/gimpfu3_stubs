import gi as __gi
import gi.overrides.GObject as __gi_overrides_GObject
import gi.repository.GObject as __gi_repository_GObject
import gobject as __gobject
from _typeshed import Incomplete


AUTO_ROWSTRIDE: int
CH_BACK_CENTER: int
CH_BACK_LEFT: int
CH_BACK_RIGHT: int
CH_FRONT_CENTER: int
CH_FRONT_LEFT: int
CH_FRONT_LEFT_OF_CENTER: int
CH_FRONT_RIGHT: int
CH_FRONT_RIGHT_OF_CENTER: int
CH_LAYOUT_2POINT1: int
CH_LAYOUT_2_1: int
CH_LAYOUT_2_2: int
CH_LAYOUT_3POINT1: int
CH_LAYOUT_4POINT0: int
CH_LAYOUT_4POINT1: int
CH_LAYOUT_5POINT0: int
CH_LAYOUT_5POINT0_BACK: int
CH_LAYOUT_5POINT1: int
CH_LAYOUT_5POINT1_BACK: int
CH_LAYOUT_6POINT0: int
CH_LAYOUT_6POINT0_FRONT: int
CH_LAYOUT_6POINT1: int
CH_LAYOUT_6POINT1_BACK: int
CH_LAYOUT_6POINT1_FRONT: int
CH_LAYOUT_7POINT0: int
CH_LAYOUT_7POINT0_FRONT: int
CH_LAYOUT_7POINT1: int
CH_LAYOUT_7POINT1_WIDE: int
CH_LAYOUT_7POINT1_WIDE_BACK: int
CH_LAYOUT_HEXADECAGONAL: int
CH_LAYOUT_HEXAGONAL: int
CH_LAYOUT_NATIVE: int
CH_LAYOUT_OCTAGONAL: int
CH_LAYOUT_QUAD: int
CH_LAYOUT_STEREO: int
CH_LAYOUT_STEREO_DOWNMIX: int
CH_LAYOUT_SURROUND: int
CH_LOW_FREQUENCY: int
CH_LOW_FREQUENCY_2: int
CH_SIDE_LEFT: int
CH_SIDE_RIGHT: int
CH_STEREO_LEFT: int
CH_STEREO_RIGHT: int
CH_SURROUND_DIRECT_LEFT: int
CH_SURROUND_DIRECT_RIGHT: int
CH_TOP_BACK_CENTER: int
CH_TOP_BACK_LEFT: int
CH_TOP_BACK_RIGHT: int
CH_TOP_CENTER: int
CH_TOP_FRONT_CENTER: int
CH_TOP_FRONT_LEFT: int
CH_TOP_FRONT_RIGHT: int
CH_WIDE_LEFT: int
CH_WIDE_RIGHT: int
FLOAT_EPSILON: float
LOOKUP_MAX_ENTRIES: int
MAJOR_VERSION: int
MAX_AUDIO_CHANNELS: int
MICRO_VERSION: int
MINOR_VERSION: int
PARAM_NO_VALIDATE: int

def babl_variant(format: Babl.Object, variant: Gegl.BablVariant) -> Babl.Object: ...
def cl_disable() -> None: ...
def cl_init() -> bool: ...
def cl_is_accelerated() -> bool: ...
def config() -> Gegl.Config: ...
def create_chain(ops: str, op_start: Gegl.Node, op_end: Gegl.Node, time: float, rel_dim: int, path_root: str): ...
def create_chain_argv(ops: str, op_start: Gegl.Node, op_end: Gegl.Node, time: float, rel_dim: int, path_root: str): ...
def exit() -> None: ...
def format(format_name: str) -> Union[GObject.Value, None]: ...
def format_get_name(format: GObject.Value) -> Union[str, None]: ...
def get_version() -> tuple[None, None, None]: ...
def graph_dump_outputs(node: Gegl.Node): ...
def graph_dump_request(node: Gegl.Node, roi: Gegl.Rectangle): ...
def has_operation(operation_type: str) -> bool: ...
def init(argv: list) -> list: ...
def is_main_thread() -> bool: ...
def list_operations() -> tuple[list, None]: ...
def load_module_directory(path: str): ...
def parallel_distribute(max_n: int, func: Gegl.ParallelDistributeFunc, user_data: Incomplete | None = ...): ...
def parallel_distribute_area(area: Gegl.Rectangle, thread_cost: float, split_strategy: Gegl.SplitStrategy, func: Gegl.ParallelDistributeAreaFunc, user_data: Incomplete | None = ...): ...
def parallel_distribute_range(size: int, thread_cost: float, func: Gegl.ParallelDistributeRangeFunc, user_data: Incomplete | None = ...): ...
def param_spec_audio_fragment(name: str, nick: str, blurb: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_color(name: str, nick: str, blurb: str, default_color: Gegl.Color, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_color_from_string(name: str, nick: str, blurb: str, default_color_string: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_color_get_default(self) -> Gegl.Color: ...
def param_spec_curve(name: str, nick: str, blurb: str, default_curve: Gegl.Curve, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_double(name: str, nick: str, blurb: str, minimum: float, maximum: float, default_value: float, ui_minimum: float, ui_maximum: float, ui_gamma: float, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_enum(name: str, nick: str, blurb: str, enum_type: GType, default_value: int, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_file_path(name: str, nick: str, blurb: str, no_validate: bool, null_ok: bool, default_value: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_format(name: str, nick: str, blurb: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_get_property_key(pspec: GObject.ParamSpec, key_name: str) -> str: ...
def param_spec_int(name: str, nick: str, blurb: str, minimum: int, maximum: int, default_value: int, ui_minimum: int, ui_maximum: int, ui_gamma: float, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_path(name: str, nick: str, blurb: str, default_path: Gegl.Path, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_seed(name: str, nick: str, blurb: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_set_property_key(pspec: GObject.ParamSpec, key_name: str, value: str): ...
def param_spec_string(name: str, nick: str, blurb: str, no_validate: bool, null_ok: bool, default_value: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def param_spec_uri(name: str, nick: str, blurb: str, no_validate: bool, null_ok: bool, default_value: str, flags: GObject.ParamFlags) -> GObject.ParamSpec: ...
def rectangle_infinite_plane() -> Gegl.Rectangle: ...
def reset_stats() -> None: ...
def serialize(start: Gegl.Node, end: Gegl.Node, basepath: str, serialize_flags: Gegl.SerializeFlag) -> str: ...
def stats() -> Gegl.Stats: ...

class AbyssPolicy(__gobject.GEnum):
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BLACK: int
    CLAMP: int
    LOOP: int
    NONE: int
    WHITE: int

class AccessMode(__gobject.GFlags):
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    READ: int
    READWRITE: int
    WRITE: int

class AudioFragment(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_channels(self) -> int: ...
    def get_channel_layout(self) -> int: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_max_samples(self) -> int: ...
    def get_pos(self) -> int: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_sample_count(self) -> int: ...
    def get_sample_rate(self) -> int: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(sample_rate: int, channels: int, channel_layout: int, max_samples: int) -> Gegl.AudioFragment: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_channels(self, channels: int): ...
    def set_channel_layout(self, channel_layout: int): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_max_samples(self, max_samples: int): ...
    def set_pos(self, pos: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_sample_count(self, sample_count: int): ...
    def set_sample_rate(self, sample_rate: int): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    data: Incomplete
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class AudioFragmentClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class AudioFragmentPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class BablVariant(__gobject.GEnum):
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ADD_ALPHA: int
    FLOAT: int
    LINEAR: int
    LINEAR_PREMULTIPLIED: int
    LINEAR_PREMULTIPLIED_IF_ALPHA: int
    NON_LINEAR: int
    PERCEPTUAL: int
    PERCEPTUAL_PREMULTIPLIED: int
    PERCEPTUAL_PREMULTIPLIED_IF_ALPHA: int

class BlitFlags(__gobject.GFlags):
    GEGL_BLIT_DEFAULT: int
    GEGL_BLIT_CACHE: int
    GEGL_BLIT_DIRTY: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete

class TileSource(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    command: Incomplete
    g_type_instance: Incomplete
    padding: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class TileHandler(TileSource):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def damage_rect(self, rect: Gegl.Rectangle): ...
    def damage_tile(self, x: int, y: int, z: int, damage: int): ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    def lock(self) -> None: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_source(self, source: Gegl.TileSource): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unlock(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    command: Incomplete
    g_type_instance: Incomplete
    padding: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    source: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class Buffer(TileHandler):
    def add_handler(self, handler: Incomplete | None = ...) -> None: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def clear(self, roi: Gegl.Rectangle): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def copy(self, src_rect: Gegl.Rectangle, repeat_mode: Gegl.AbyssPolicy, dst: Gegl.Buffer, dst_rect: Gegl.Rectangle): ...
    def create_sub_buffer(self, extent: Gegl.Rectangle) -> Gegl.Buffer: ...
    def damage_rect(self, rect: Gegl.Rectangle): ...
    def damage_tile(self, x: int, y: int, z: int, damage: int): ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def dup(self) -> Gegl.Buffer: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def flush(self) -> None: ...
    def flush_ext(self, rect: Gegl.Rectangle): ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_changed(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def get(self, rect: Gegl.Rectangle, scale: float, format_name: str, repeat_mode: Gegl.AbyssPolicy) -> tuple[list, None]: ...
    def getv(self, names: list, values: list): ...
    def get_abyss(self) -> Gegl.Rectangle: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_extent(self) -> Gegl.Rectangle: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def linear_close(self, linear: Incomplete | None = ...) -> None: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def load(path: str) -> Gegl.Buffer: ...
    def lock(self) -> None: ...
    @staticmethod
    def new(format_name: str, x: int, y: int, width: int, height: int) -> Gegl.Buffer: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_for_backend(extent: Gegl.Rectangle, backend: Gegl.TileBackend) -> Gegl.Buffer: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    @staticmethod
    def open(path: str) -> Gegl.Buffer: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def remove_handler(self, handler: Incomplete | None = ...) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def sample_cleanup(self) -> None: ...
    def save(self, path: str, roi: Gegl.Rectangle): ...
    def set(self, rect: Gegl.Rectangle, format_name: str, src: list): ...
    def set_abyss(self, abyss: Gegl.Rectangle) -> bool: ...
    def set_color(self, rect: Gegl.Rectangle, color: Gegl.Color): ...
    def set_color_from_pixel(self, rect: Gegl.Rectangle, pixel, pixel_format: Babl.Object): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_extent(self, extent: Gegl.Rectangle) -> bool: ...
    def set_pattern(self, rect: Gegl.Rectangle, pattern: Gegl.Buffer, x_offset: int, y_offset: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_source(self, source: Gegl.TileSource): ...
    def share_storage(self, buffer2: Gegl.Buffer) -> bool: ...
    def signal_connect(self, detailed_signal: str, c_handler: GObject.Callback, data) -> int: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    @staticmethod
    def swap_create_file(suffix: str = ...) -> Union[str, None]: ...
    @staticmethod
    def swap_has_file(path: str) -> bool: ...
    @staticmethod
    def swap_remove_file(path: str): ...
    def thaw_changed(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def unlock(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    command: Incomplete
    g_type_instance: Incomplete
    padding: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    source: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class BufferIterator(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    items: Incomplete
    length: Incomplete
    priv: Incomplete

class BufferIteratorItem(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    data: Incomplete
    roi: Incomplete

class BufferIteratorPriv(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class BufferMatrix2(__gi.Struct):
    def determinant(self) -> float: ...
    def is_identity(self) -> bool: ...
    def is_scale(self) -> bool: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    coeff: Incomplete

class CachePolicy(__gobject.GEnum):
    Auto: int
    Never: int
    Always: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ALWAYS: int
    AUTO: int
    NEVER: int

class Color(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def duplicate(self) -> Gegl.Color: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_components(self, format: GObject.Value) -> tuple[list, None]: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_format(self) -> Babl.Object: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_rgba(self) -> tuple[None, None, None, None]: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(string: str) -> Gegl.Color: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_components(self, format: GObject.Value, components: list): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_rgba(self, red: float, green: float, blue: float, alpha: float): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class ColorClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class ColorPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Config(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class Curve(__gi_overrides_GObject.Object):
    def add_point(self, x: float, y: float) -> int: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def calc_value(self, x: float) -> float: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def duplicate(self) -> Gegl.Curve: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_point(self, index: int) -> tuple[None, None]: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_y_bounds(self) -> tuple[None, None]: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new(y_min: float, y_max: float) -> Gegl.Curve: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_default() -> Gegl.Curve: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def num_points(self) -> int: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_point(self, index: int, x: float, y: float): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class CurveClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class DistanceMetric(__gobject.GEnum):
    Euclidean: int
    Manhattan: int
    Chebyshev: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CHEBYSHEV: int
    EUCLIDEAN: int
    MANHATTAN: int

class DitherMethod(__gobject.GEnum):
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ADD: int
    ADD_COVARIANT: int
    BAYER: int
    BLUE_NOISE: int
    BLUE_NOISE_COVARIANT: int
    FLOYD_STEINBERG: int
    NONE: int
    RANDOM: int
    RANDOM_COVARIANT: int
    XOR: int
    XOR_COVARIANT: int

class Lookup(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    bitmask: Incomplete
    data: Incomplete
    function: Incomplete
    negative_max: Incomplete
    negative_min: Incomplete
    positive_max: Incomplete
    positive_min: Incomplete
    shift: Incomplete
    table: Incomplete

class MapFlags(__gobject.GEnum):
    GEGL_MAP_EXCLUDE_UNMAPPED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    MAP_EXCLUDE_UNMAPPED: int

class Matrix3(__gi.Boxed):
    def copy(self) -> Gegl.Matrix3: ...
    def copy_into(self, src: Gegl.Matrix3): ...
    def determinant(self) -> float: ...
    def equal(self, matrix2: Gegl.Matrix3) -> bool: ...
    def identity(self) -> None: ...
    def invert(self) -> None: ...
    def is_affine(self) -> bool: ...
    def is_identity(self) -> bool: ...
    def is_scale(self) -> bool: ...
    def is_translate(self) -> bool: ...
    def multiply(self, right: Gegl.Matrix3, product: Gegl.Matrix3): ...
    @staticmethod
    def new() -> Gegl.Matrix3: ...
    def originate(self, x: float, y: float): ...
    def parse_string(self, string: str): ...
    def round_error(self) -> None: ...
    def to_string(self) -> str: ...
    def transform_point(self, x: float, y: float): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__() -> Gegl.Matrix3: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    coeff: Incomplete

class Metadata(__gobject.GInterface):
    def get_resolution(self, unit: Gegl.ResolutionUnit, x: float, y: float) -> bool: ...
    def iter_get_value(self, iter: Gegl.MetadataIter, value: GObject.Value) -> bool: ...
    def iter_init(self, iter: Gegl.MetadataIter): ...
    def iter_lookup(self, iter: Gegl.MetadataIter, key: str) -> bool: ...
    def iter_next(self, iter: Gegl.MetadataIter) -> str: ...
    def iter_set_value(self, iter: Gegl.MetadataIter, value: GObject.Value) -> bool: ...
    def register_map(self, file_module: str, flags: int, map: list): ...
    def set_resolution(self, unit: Gegl.ResolutionUnit, x: float, y: float) -> bool: ...
    def unregister_map(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    __gsignals__: Incomplete

class MetadataStore(__gi_overrides_GObject.Object, Metadata):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def declare(self, pspec: GObject.ParamSpec): ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_has_value(self, name: str) -> bool: ...
    def do_register_hook(self, file_module_name: str, flags: int): ...
    def do_set_value(self, name: str, value: GObject.Value): ...
    def do__declare(self, pspec: GObject.ParamSpec, shadow: bool): ...
    def do__get_value(self, name: str) -> GObject.Value: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_artist(self) -> str: ...
    def get_comment(self) -> str: ...
    def get_copyright(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_description(self) -> str: ...
    def get_disclaimer(self) -> str: ...
    def get_file_module_name(self) -> str: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_resolution(self, unit: Gegl.ResolutionUnit, x: float, y: float) -> bool: ...
    def get_resolution_unit(self) -> Gegl.ResolutionUnit: ...
    def get_resolution_x(self) -> float: ...
    def get_resolution_y(self) -> float: ...
    def get_software(self) -> str: ...
    def get_source(self) -> str: ...
    def get_string(self, name: str) -> str: ...
    def get_timestamp(self) -> GLib.DateTime: ...
    def get_title(self) -> str: ...
    def get_value(self, name: str, value: GObject.Value) -> GObject.Value: ...
    def get_warning(self) -> str: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_value(self, name: str) -> bool: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def iter_get_value(self, iter: Gegl.MetadataIter, value: GObject.Value) -> bool: ...
    def iter_init(self, iter: Gegl.MetadataIter): ...
    def iter_lookup(self, iter: Gegl.MetadataIter, key: str) -> bool: ...
    def iter_next(self, iter: Gegl.MetadataIter) -> str: ...
    def iter_set_value(self, iter: Gegl.MetadataIter, value: GObject.Value) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, pspec: GObject.ParamSpec, shadow: bool): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def register(self, local_name: str, name: str, transform: GObject.ValueTransform): ...
    def register_map(self, file_module: str, flags: int, map: list): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_artist(self, artist: str): ...
    def set_comment(self, comment: str): ...
    def set_copyright(self, copyright: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_description(self, description: str): ...
    def set_disclaimer(self, disclaimer: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_resolution(self, unit: Gegl.ResolutionUnit, x: float, y: float) -> bool: ...
    def set_resolution_unit(self, unit: Gegl.ResolutionUnit): ...
    def set_resolution_x(self, resolution_x: float): ...
    def set_resolution_y(self, resolution_y: float): ...
    def set_software(self, software: str): ...
    def set_source(self, source: str): ...
    def set_string(self, name: str, string: str): ...
    def set_timestamp(self, timestamp: GLib.DateTime): ...
    def set_title(self, title: str): ...
    def set_value(self, name: str, value: GObject.Value): ...
    def set_warning(self, warning: str): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def typeof_value(self, name: str) -> GType: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_map(self) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class MetadataHash(MetadataStore):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def declare(self, pspec: GObject.ParamSpec): ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def do_has_value(self, name: str) -> bool: ...
    def do_register_hook(self, file_module_name: str, flags: int): ...
    def do_set_value(self, name: str, value: GObject.Value): ...
    def do__declare(self, pspec: GObject.ParamSpec, shadow: bool): ...
    def do__get_value(self, name: str) -> GObject.Value: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_artist(self) -> str: ...
    def get_comment(self) -> str: ...
    def get_copyright(self) -> str: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_description(self) -> str: ...
    def get_disclaimer(self) -> str: ...
    def get_file_module_name(self) -> str: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_resolution(self, unit: Gegl.ResolutionUnit, x: float, y: float) -> bool: ...
    def get_resolution_unit(self) -> Gegl.ResolutionUnit: ...
    def get_resolution_x(self) -> float: ...
    def get_resolution_y(self) -> float: ...
    def get_software(self) -> str: ...
    def get_source(self) -> str: ...
    def get_string(self, name: str) -> str: ...
    def get_timestamp(self) -> GLib.DateTime: ...
    def get_title(self) -> str: ...
    def get_value(self, name: str, value: GObject.Value) -> GObject.Value: ...
    def get_warning(self) -> str: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_value(self, name: str) -> bool: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def iter_get_value(self, iter: Gegl.MetadataIter, value: GObject.Value) -> bool: ...
    def iter_init(self, iter: Gegl.MetadataIter): ...
    def iter_lookup(self, iter: Gegl.MetadataIter, key: str) -> bool: ...
    def iter_next(self, iter: Gegl.MetadataIter) -> str: ...
    def iter_set_value(self, iter: Gegl.MetadataIter, value: GObject.Value) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new() -> Gegl.MetadataStore: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, pspec: GObject.ParamSpec, shadow: bool): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def register(self, local_name: str, name: str, transform: GObject.ValueTransform): ...
    def register_map(self, file_module: str, flags: int, map: list): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_artist(self, artist: str): ...
    def set_comment(self, comment: str): ...
    def set_copyright(self, copyright: str): ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_description(self, description: str): ...
    def set_disclaimer(self, disclaimer: str): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_resolution(self, unit: Gegl.ResolutionUnit, x: float, y: float) -> bool: ...
    def set_resolution_unit(self, unit: Gegl.ResolutionUnit): ...
    def set_resolution_x(self, resolution_x: float): ...
    def set_resolution_y(self, resolution_y: float): ...
    def set_software(self, software: str): ...
    def set_source(self, source: str): ...
    def set_string(self, name: str, string: str): ...
    def set_timestamp(self, timestamp: GLib.DateTime): ...
    def set_title(self, title: str): ...
    def set_value(self, name: str, value: GObject.Value): ...
    def set_warning(self, warning: str): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def typeof_value(self, name: str) -> GType: ...
    def unref(self, *args, **kargs) -> None: ...
    def unregister_map(self) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class MetadataHashClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class MetadataInterface(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    base_iface: Incomplete
    get_resolution: Incomplete
    iter_get_value: Incomplete
    iter_init: Incomplete
    iter_lookup: Incomplete
    iter_next: Incomplete
    iter_set_value: Incomplete
    register_map: Incomplete
    set_resolution: Incomplete

class MetadataIter(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    stamp: Incomplete
    user_data: Incomplete
    user_data2: Incomplete
    user_data3: Incomplete

class MetadataMap(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    local_name: Incomplete
    name: Incomplete
    transform: Incomplete

class MetadataStoreClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    generate_value: Incomplete
    has_value: Incomplete
    padding: Incomplete
    parent_class: Incomplete
    parse_value: Incomplete
    pspec: Incomplete
    register_hook: Incomplete
    set_value: Incomplete

class Node(__gi_overrides_GObject.Object):
    def add_child(self, child: Gegl.Node) -> Gegl.Node: ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def blit_buffer(self, buffer: Gegl.Buffer, roi: Gegl.Rectangle, level: int, abyss_policy: Gegl.AbyssPolicy): ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_from(self, input_pad_name: str, source: Gegl.Node, output_pad_name: str) -> bool: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def connect_to(self, output_pad_name: str, sink: Gegl.Node, input_pad_name: str) -> bool: ...
    def create_child(self, operation: str) -> Gegl.Node: ...
    def detect(self, x: int, y: int) -> Gegl.Node: ...
    def disconnect(self, input_pad: str) -> bool: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_bounding_box(self) -> Gegl.Rectangle: ...
    def get_children(self) -> list: ...
    def get_consumers(self, output_pad: str) -> tuple[int, None, None]: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_gegl_operation(self) -> Union[Gegl.Operation, None]: ...
    def get_input_proxy(self, pad_name: str) -> Gegl.Node: ...
    def get_operation(self) -> str: ...
    def get_output_proxy(self, pad_name: str) -> Gegl.Node: ...
    def get_parent(self) -> Gegl.Node: ...
    def get_passthrough(self) -> bool: ...
    def get_producer(self, input_pad_name: str, output_pad_name: str) -> Gegl.Node: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, property_name: str) -> GObject.Value: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def has_pad(self, pad_name: str) -> bool: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def is_graph(self) -> bool: ...
    def link(self, sink: Gegl.Node): ...
    def list_input_pads(self) -> list: ...
    def list_output_pads(self) -> list: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new() -> Gegl.Node: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_file(path: str) -> Gegl.Node: ...
    @staticmethod
    def new_from_serialized(chaindata: str, path_root: str) -> Gegl.Node: ...
    @staticmethod
    def new_from_xml(xmldata: str, path_root: str) -> Gegl.Node: ...
    def new_processor(self, rectangle: Gegl.Rectangle) -> Gegl.Processor: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def process(self) -> None: ...
    def progress(self, progress: float, message: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def remove_child(self, child: Gegl.Node) -> Gegl.Node: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_passthrough(self, passthrough: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, property_name: str, value: GObject.Value): ...
    def set_time(self, time: float): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def to_xml(self, path_root: str) -> str: ...
    def to_xml_full(self, tail: Gegl.Node, path_root: str) -> str: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class Operation(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    @staticmethod
    def find_property(operation_type: str, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    @staticmethod
    def get_key(operation_type: str, key_name: str) -> str: ...
    @staticmethod
    def get_op_version(op_name: str) -> str: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    @staticmethod
    def get_property_key(operation_type: str, property_name: str, property_key_name: str) -> str: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    @staticmethod
    def list_keys(operation_type: str) -> tuple[list, None]: ...
    @staticmethod
    def list_properties(operation_type: str) -> tuple[list, None]: ...
    @staticmethod
    def list_property_keys(operation_type: str, property_name: str) -> tuple[list, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class OperationContext(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Orientation(__gobject.GEnum):
    Horizontal: int
    Vertical: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    HORIZONTAL: int
    VERTICAL: int

class PadType(__gobject.GFlags):
    GEGL_PARAM_PAD_OUTPUT: int
    GEGL_PARAM_PAD_INPUT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    INPUT: int
    OUTPUT: int

class ParamAudioFragment(__gi_repository_GObject.ParamSpec):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamColor(__gi_repository_GObject.ParamSpec):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamCurve(__gi_repository_GObject.ParamSpec):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamDouble(__gi_repository_GObject.ParamSpecDouble):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    default_value: Incomplete
    epsilon: Incomplete
    flags: Incomplete
    g_type_instance: Incomplete
    maximum: Incomplete
    minimum: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamEnum(__gi_repository_GObject.ParamSpecEnum):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    default_value: Incomplete
    enum_class: Incomplete
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamFilePath(__gi_repository_GObject.ParamSpecString):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    cset_first: Incomplete
    cset_nth: Incomplete
    default_value: Incomplete
    ensure_non_null: Incomplete
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    null_fold_if_empty: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    substitutor: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamFormat(__gi_repository_GObject.ParamSpecPointer):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamInt(__gi_repository_GObject.ParamSpecInt):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    default_value: Incomplete
    flags: Incomplete
    g_type_instance: Incomplete
    maximum: Incomplete
    minimum: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamPath(__gi_repository_GObject.ParamSpec):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamSeed(__gi_repository_GObject.ParamSpecUInt):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    default_value: Incomplete
    flags: Incomplete
    g_type_instance: Incomplete
    maximum: Incomplete
    minimum: Incomplete
    name: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamSpecDouble(__gi.Struct):
    def set_digits(self, digits: int): ...
    def set_steps(self, small_step: float, big_step: float): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete
    ui_digits: Incomplete
    ui_gamma: Incomplete
    ui_maximum: Incomplete
    ui_minimum: Incomplete
    ui_step_big: Incomplete
    ui_step_small: Incomplete

class ParamSpecEnum(__gi.Struct):
    def exclude_value(self, value: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    excluded_values: Incomplete
    parent_instance: Incomplete

class ParamSpecFilePath(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    no_validate: Incomplete
    null_ok: Incomplete
    parent_instance: Incomplete

class ParamSpecFormat(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete

class ParamSpecInt(__gi.Struct):
    def set_steps(self, small_step: int, big_step: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete
    ui_gamma: Incomplete
    ui_maximum: Incomplete
    ui_minimum: Incomplete
    ui_step_big: Incomplete
    ui_step_small: Incomplete

class ParamSpecSeed(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_instance: Incomplete
    ui_maximum: Incomplete
    ui_minimum: Incomplete

class ParamSpecString(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    no_validate: Incomplete
    null_ok: Incomplete
    parent_instance: Incomplete

class ParamSpecUri(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    no_validate: Incomplete
    null_ok: Incomplete
    parent_instance: Incomplete

class ParamString(__gi_repository_GObject.ParamSpecString):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    cset_first: Incomplete
    cset_nth: Incomplete
    default_value: Incomplete
    ensure_non_null: Incomplete
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    null_fold_if_empty: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    substitutor: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class ParamUri(__gi_repository_GObject.ParamSpecString):
    def do_finalize(self) -> None: ...
    def do_values_cmp(self, value1: GObject.Value, value2: GObject.Value) -> int: ...
    def do_value_set_default(self, value: GObject.Value): ...
    def do_value_validate(self, value: GObject.Value) -> bool: ...
    def get_blurb(self) -> Union[str, None]: ...
    def get_default_value(self) -> GObject.Value: ...
    def get_name(self) -> str: ...
    def get_name_quark(self) -> int: ...
    def get_nick(self) -> str: ...
    def get_qdata(self, quark: int): ...
    def get_redirect_target(self) -> Union[GObject.ParamSpec, None]: ...
    @staticmethod
    def is_valid_name(name: str) -> bool: ...
    def set_qdata(self, quark: int, data: Incomplete | None = ...): ...
    def sink(self) -> None: ...
    def steal_qdata(self, quark: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    cset_first: Incomplete
    cset_nth: Incomplete
    default_value: Incomplete
    ensure_non_null: Incomplete
    flags: Incomplete
    g_type_instance: Incomplete
    name: Incomplete
    null_fold_if_empty: Incomplete
    owner_type: Incomplete
    param_id: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    substitutor: Incomplete
    value_type: Incomplete
    __gsignals__: Incomplete

class Path(__gi_overrides_GObject.Object):
    @staticmethod
    def add_type(type: int, items: int, description: str): ...
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def calc(self, pos: float) -> tuple[bool, None, None]: ...
    def calc_y_for_x(self, x: float) -> tuple[int, None]: ...
    def chain(self, *args, **kwargs) -> None: ...
    def clear(self) -> None: ...
    def closest_point(self, x: float, y: float) -> tuple[float, None, None, None]: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def dirty(self) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def foreach(self, each_item: Gegl.NodeFunction, user_data: Incomplete | None = ...): ...
    def foreach_flat(self, each_item: Gegl.NodeFunction, user_data: Incomplete | None = ...): ...
    def freeze(self) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_bounds(self) -> tuple[None, None, None, None]: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_length(self) -> float: ...
    def get_matrix(self) -> Gegl.Matrix3: ...
    def get_node(self, index: int) -> tuple[bool, None]: ...
    def get_n_nodes(self) -> int: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def insert_node(self, pos: int, node: Gegl.PathItem): ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_empty(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def new() -> Gegl.Path: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    @staticmethod
    def new_from_string(instructions: str) -> Gegl.Path: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def parse_string(self, instructions: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def remove_node(self, pos: int): ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_node(self, pos: int, node: Gegl.PathItem): ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_matrix(self, matrix: Gegl.Matrix3): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw(self) -> None: ...
    def thaw_notify(self) -> None: ...
    def to_string(self) -> str: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    parent_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class PathClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class PathItem(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    point: Incomplete
    type: Incomplete

class PathList(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    d: Incomplete
    next: Incomplete

class PathPoint(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    x: Incomplete
    y: Incomplete

class Processor(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_buffer(self) -> Gegl.Buffer: ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_level(self, level: int): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def set_rectangle(self, rectangle: Gegl.Rectangle): ...
    def set_scale(self, scale: float): ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def work(self) -> tuple[bool, None]: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class Random(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def duplicate(self) -> Gegl.Random: ...
    def float(self, x: int, y: int, z: int, n: int) -> float: ...
    def float_range(self, x: int, y: int, z: int, n: int, min: float, max: float) -> float: ...
    def free(self) -> None: ...
    def int(self, x: int, y: int, z: int, n: int) -> int: ...
    def int_range(self, x: int, y: int, z: int, n: int, min: int, max: int) -> int: ...
    @staticmethod
    def new() -> Gegl.Random: ...
    @staticmethod
    def new_with_seed(seed: int) -> Gegl.Random: ...
    def set_seed(self, seed: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__() -> Gegl.Random: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Rectangle(__gi.Boxed):
    def align(self, rectangle: Gegl.Rectangle, tile: Gegl.Rectangle, alignment: Gegl.RectangleAlignment) -> bool: ...
    def align_to_buffer(self, rectangle: Gegl.Rectangle, buffer: Gegl.Buffer, alignment: Gegl.RectangleAlignment) -> bool: ...
    def bounding_box(self, source1: Gegl.Rectangle, source2: Gegl.Rectangle): ...
    def contains(self, child: Gegl.Rectangle) -> bool: ...
    def copy(self, source: Gegl.Rectangle): ...
    def dump(self) -> None: ...
    def dup(self) -> Gegl.Rectangle: ...
    def equal(self, rectangle2: Gegl.Rectangle) -> bool: ...
    def equal_coords(self, x: int, y: int, width: int, height: int) -> bool: ...
    @staticmethod
    def infinite_plane() -> Gegl.Rectangle: ...
    def intersect(self, src1: Gegl.Rectangle, src2: Gegl.Rectangle) -> bool: ...
    def is_empty(self) -> bool: ...
    def is_infinite_plane(self) -> bool: ...
    @staticmethod
    def new(x: int, y: int, width: int, height: int) -> Gegl.Rectangle: ...
    def set(self, x: int, y: int, width: int, height: int): ...
    def subtract(self, minuend: Gegl.Rectangle, subtrahend: Gegl.Rectangle) -> int: ...
    def subtract_bounding_box(self, minuend: Gegl.Rectangle, subtrahend: Gegl.Rectangle) -> bool: ...
    def xor(self, source1: Gegl.Rectangle, source2: Gegl.Rectangle) -> int: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    height: Incomplete
    width: Incomplete
    x: Incomplete
    y: Incomplete

class RectangleAlignment(__gobject.GEnum):
    Subset: int
    Superset: int
    Nearest: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    NEAREST: int
    SUBSET: int
    SUPERSET: int

class ResolutionUnit(__gobject.GEnum):
    GEGL_RESOLUTION_UNIT_NONE: int
    GEGL_RESOLUTION_UNIT_DPI: int
    GEGL_RESOLUTION_UNIT_DPM: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    DPI: int
    DPM: int
    NONE: int

class Sampler(__gi.Struct):
    def get(self, x: float, y: float, scale: Gegl.BufferMatrix2, output, repeat_mode: Gegl.AbyssPolicy): ...
    def get_context_rect(self) -> Gegl.Rectangle: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class SamplerType(__gobject.GEnum):
    Nearest: int
    Linear: int
    Cubic: int
    NoHalo: int
    LoHalo: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CUBIC: int
    LINEAR: int
    LOHALO: int
    NEAREST: int
    NOHALO: int

class SerializeFlag(__gobject.GFlags):
    GEGL_SERIALIZE_TRIM_DEFAULTS: int
    GEGL_SERIALIZE_VERSION: int
    GEGL_SERIALIZE_INDENT: int
    GEGL_SERIALIZE_BAKE_ANIM: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    BAKE_ANIM: int
    INDENT: int
    TRIM_DEFAULTS: int
    VERSION: int

class SplitStrategy(__gobject.GEnum):
    GEGL_SPLIT_STRATEGY_AUTO: int
    GEGL_SPLIT_STRATEGY_HORIZONTAL: int
    GEGL_SPLIT_STRATEGY_VERTICAL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    AUTO: int
    HORIZONTAL: int
    VERTICAL: int

class Stats(__gi_overrides_GObject.Object):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class Tile(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class TileBackend(TileSource):
    def bind_property(self, *args, **kwargs) -> None: ...
    def bind_property_full(self, *args, **kargs) -> None: ...
    def chain(self, *args, **kwargs) -> None: ...
    def command(self, command: Gegl.TileCommand, x: int, y: int, z: int, data: Incomplete | None = ...): ...
    def compat_control(self, *args, **kargs) -> None: ...
    def connect(self, *args, **kwargs) -> None: ...
    def connect_after(self, *args, **kwargs) -> None: ...
    def connect_data(self, detailed_signal, handler, *data, **kwargs) -> None: ...
    def connect_object(self, *args, **kwargs) -> None: ...
    def connect_object_after(self, *args, **kwargs) -> None: ...
    def disconnect(*args, **kwargs) -> None: ...
    def disconnect_by_func(self, *args, **kwargs) -> None: ...
    def emit(self, *args, **kwargs) -> None: ...
    def emit_stop_by_name(self, detailed_signal) -> None: ...
    def find_property(self, property_name: str) -> GObject.ParamSpec: ...
    def force_floating(self, *args, **kargs) -> None: ...
    def freeze_notify(self) -> None: ...
    def getv(self, names: list, values: list): ...
    def get_data(self, *args, **kargs) -> None: ...
    def get_flush_on_destroy(self) -> bool: ...
    def get_properties(self, *args, **kwargs) -> None: ...
    def get_property(self, *args, **kwargs) -> None: ...
    def get_qdata(self, *args, **kargs) -> None: ...
    def get_tile_height(self) -> int: ...
    def get_tile_size(self) -> int: ...
    def get_tile_width(self) -> int: ...
    def handler_block(obj, handler_id) -> None: ...
    def handler_block_by_func(self, *args, **kwargs) -> None: ...
    def handler_disconnect(*args, **kwargs) -> None: ...
    def handler_is_connected(*args, **kwargs) -> None: ...
    def handler_unblock(*args, **kwargs) -> None: ...
    def handler_unblock_by_func(self, *args, **kwargs) -> None: ...
    def install_properties(self, pspecs: list): ...
    def install_property(self, property_id: int, pspec: GObject.ParamSpec): ...
    def interface_find_property(self, *args, **kargs) -> None: ...
    def interface_install_property(self, *args, **kargs) -> None: ...
    def interface_list_properties(self, *args, **kargs) -> None: ...
    def is_floating(self) -> bool: ...
    def list_properties(self) -> tuple[list, None]: ...
    @staticmethod
    def newv(object_type: GType, parameters: list) -> GObject.Object: ...
    def notify(self, property_name: str): ...
    def notify_by_pspec(self, *args, **kargs) -> None: ...
    def override_property(self, property_id: int, name: str): ...
    def peek_storage(self) -> Gegl.TileSource: ...
    def ref(self, *args, **kargs) -> None: ...
    def ref_sink(self, *args, **kargs) -> None: ...
    def replace_data(self, *args, **kargs) -> None: ...
    def replace_qdata(self, *args, **kargs) -> None: ...
    def run_dispose(self) -> None: ...
    def set_data(self, *args, **kargs) -> None: ...
    def set_extent(self, rectangle: Gegl.Rectangle): ...
    def set_flush_on_destroy(self, flush_on_destroy: bool): ...
    def set_properties(self, *args, **kwargs) -> None: ...
    def set_property(self, *args, **kwargs) -> None: ...
    def steal_data(self, *args, **kargs) -> None: ...
    def steal_qdata(self, *args, **kargs) -> None: ...
    def stop_emission(self, detailed_signal) -> None: ...
    def stop_emission_by_name(*args, **kwargs) -> None: ...
    def thaw_notify(self) -> None: ...
    @staticmethod
    def unlink_swap(path: str): ...
    def unref(self, *args, **kargs) -> None: ...
    def watch_closure(self, *args, **kargs) -> None: ...
    def weak_ref(self, *args, **kwargs) -> None: ...
    def __copy__(self, *args, **kwargs) -> None: ...
    def __deepcopy__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__(**properties) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    g_type_instance: Incomplete
    padding: Incomplete
    parent_instance: Incomplete
    priv: Incomplete
    qdata: Incomplete
    ref_count: Incomplete
    __gpointer__: Incomplete
    __grefcount__: Incomplete
    props: Incomplete
    __gsignals__: Incomplete

class TileBackendClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    padding: Incomplete
    parent_class: Incomplete

class TileBackendPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class TileCommand(__gobject.GEnum):
    GEGL_TILE_IDLE: int
    GEGL_TILE_SET: int
    GEGL_TILE_GET: int
    GEGL_TILE_IS_CACHED: int
    GEGL_TILE_EXIST: int
    GEGL_TILE_VOID: int
    GEGL_TILE_FLUSH: int
    GEGL_TILE_REFETCH: int
    GEGL_TILE_REINIT: int
    GEGL_TILE_LAST_COMMAND: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    EGL_TILE_COPY: int
    EGL_TILE_EXIST: int
    EGL_TILE_FLUSH: int
    EGL_TILE_GET: int
    EGL_TILE_IDLE: int
    EGL_TILE_IS_CACHED: int
    EGL_TILE_LAST_COMMAND: int
    EGL_TILE_REFETCH: int
    EGL_TILE_REINIT: int
    EGL_TILE_SET: int
    EGL_TILE_VOID: int
    GEGL_TILE_LAST_0_4_8_COMMAND: int

class TileCopyParams(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    dst_buffer: Incomplete
    dst_x: Incomplete
    dst_y: Incomplete
    dst_z: Incomplete

class TileHandlerClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    parent_class: Incomplete

class TileHandlerPrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class TileSourceClass(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    padding: Incomplete
    parent_class: Incomplete

class __class__:
    def __delattr__(self, name) -> None: ...
    def __dir__(self) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getattr__(self, name) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, namespace, version: Incomplete | None = ...) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

__loader__: Incomplete
__path__: Incomplete
__spec__: Incomplete
