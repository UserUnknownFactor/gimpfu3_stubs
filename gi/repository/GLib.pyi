import gi as __gi
import gi.overrides as __gi_overrides
import gi.overrides.GLib as __gi_overrides_GLib
import gobject as __gobject
from _typeshed import Incomplete
from gi._gi import OptionContext as OptionContext, OptionGroup as OptionGroup, Pid as Pid, spawn_async as spawn_async


ANALYZER_ANALYZING: int
ASCII_DTOSTR_BUF_SIZE: int
BIG_ENDIAN: int
CSET_A_2_Z: str
CSET_a_2_z: str
CSET_DIGITS: str
DATALIST_FLAGS_MASK: int
DATE_BAD_DAY: int
DATE_BAD_JULIAN: int
DATE_BAD_YEAR: int
DIR_SEPARATOR: int
DIR_SEPARATOR_S: str
E: float
GINT16_FORMAT: str
GINT16_MODIFIER: str
GINT32_FORMAT: str
GINT32_MODIFIER: str
GINT64_FORMAT: str
GINT64_MODIFIER: str
GINTPTR_FORMAT: str
GINTPTR_MODIFIER: str
GNUC_FUNCTION: str
GNUC_PRETTY_FUNCTION: str
GSIZE_FORMAT: str
GSIZE_MODIFIER: str
GSSIZE_FORMAT: str
GSSIZE_MODIFIER: str
GUINT16_FORMAT: str
GUINT32_FORMAT: str
GUINT64_FORMAT: str
GUINTPTR_FORMAT: str
HAVE_GINT64: int
HAVE_GNUC_VARARGS: int
HAVE_GROWING_STACK: int
HAVE_ISO_VARARGS: int
HOOK_FLAG_USER_SHIFT: int
IEEE754_DOUBLE_BIAS: int
IEEE754_FLOAT_BIAS: int
IO_ERR: int
IO_FLAG_APPEND: int
IO_FLAG_GET_MASK: int
IO_FLAG_IS_READABLE: int
IO_FLAG_IS_SEEKABLE: int
IO_FLAG_IS_WRITEABLE: int
IO_FLAG_MASK: int
IO_FLAG_NONBLOCK: int
IO_FLAG_SET_MASK: int
IO_HUP: int
IO_IN: int
IO_NVAL: int
IO_OUT: int
IO_PRI: int
IO_STATUS_AGAIN: int
IO_STATUS_EOF: int
IO_STATUS_ERROR: int
IO_STATUS_NORMAL: int
KEY_FILE_DESKTOP_GROUP: str
KEY_FILE_DESKTOP_KEY_ACTIONS: str
KEY_FILE_DESKTOP_KEY_CATEGORIES: str
KEY_FILE_DESKTOP_KEY_COMMENT: str
KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE: str
KEY_FILE_DESKTOP_KEY_EXEC: str
KEY_FILE_DESKTOP_KEY_GENERIC_NAME: str
KEY_FILE_DESKTOP_KEY_HIDDEN: str
KEY_FILE_DESKTOP_KEY_ICON: str
KEY_FILE_DESKTOP_KEY_MIME_TYPE: str
KEY_FILE_DESKTOP_KEY_NAME: str
KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN: str
KEY_FILE_DESKTOP_KEY_NO_DISPLAY: str
KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN: str
KEY_FILE_DESKTOP_KEY_PATH: str
KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY: str
KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS: str
KEY_FILE_DESKTOP_KEY_TERMINAL: str
KEY_FILE_DESKTOP_KEY_TRY_EXEC: str
KEY_FILE_DESKTOP_KEY_TYPE: str
KEY_FILE_DESKTOP_KEY_URL: str
KEY_FILE_DESKTOP_KEY_VERSION: str
KEY_FILE_DESKTOP_TYPE_APPLICATION: str
KEY_FILE_DESKTOP_TYPE_DIRECTORY: str
KEY_FILE_DESKTOP_TYPE_LINK: str
LITTLE_ENDIAN: int
LN10: float
LN2: float
LOG_2_BASE_10: float
LOG_DOMAIN: int
LOG_FATAL_MASK: int
LOG_LEVEL_USER_SHIFT: int
macro__has_attribute___noreturn__: int
MAJOR_VERSION: int
MAXDOUBLE: float
MAXFLOAT: float
MAXINT: int
MAXINT16: int
MAXINT32: int
MAXINT64: int
MAXINT8: int
MAXLONG: int
MAXOFFSET: int
MAXSHORT: int
MAXSIZE: int
MAXSSIZE: int
MAXUINT: int
MAXUINT16: int
MAXUINT32: int
MAXUINT64: int
MAXUINT8: int
MAXULONG: int
MAXUSHORT: int
MICRO_VERSION: int
MINDOUBLE: float
MINFLOAT: float
MININT: int
MININT16: int
MININT32: int
MININT64: int
MININT8: int
MINLONG: int
MINOFFSET: int
MINOR_VERSION: int
MINSHORT: int
MINSSIZE: int
MODULE_SUFFIX: str
OPTION_ERROR_BAD_VALUE: int
OPTION_ERROR_FAILED: int
OPTION_ERROR_UNKNOWN_OPTION: int
OPTION_FLAG_FILENAME: int
OPTION_FLAG_HIDDEN: int
OPTION_FLAG_IN_MAIN: int
OPTION_FLAG_NOALIAS: int
OPTION_FLAG_NO_ARG: int
OPTION_FLAG_OPTIONAL_ARG: int
OPTION_FLAG_REVERSE: int
OPTION_REMAINING: str
PDP_ENDIAN: int
PI: float
PID_FORMAT: str
PI_2: float
PI_4: float
POLLFD_FORMAT: str
PRIORITY_DEFAULT: int
PRIORITY_DEFAULT_IDLE: int
PRIORITY_HIGH: int
PRIORITY_HIGH_IDLE: int
PRIORITY_LOW: int
SEARCHPATH_SEPARATOR: int
SEARCHPATH_SEPARATOR_S: str
SIZEOF_LONG: int
SIZEOF_SIZE_T: int
SIZEOF_SSIZE_T: int
SIZEOF_VOID_P: int
SOURCE_CONTINUE: bool
SOURCE_REMOVE: bool
SPAWN_CHILD_INHERITS_STDIN: int
SPAWN_DO_NOT_REAP_CHILD: int
SPAWN_FILE_AND_ARGV_ZERO: int
SPAWN_LEAVE_DESCRIPTORS_OPEN: int
SPAWN_SEARCH_PATH: int
SPAWN_STDERR_TO_DEV_NULL: int
SPAWN_STDOUT_TO_DEV_NULL: int
SQRT2: float
STR_DELIMITERS: str
SYSDEF_AF_INET: int
SYSDEF_AF_INET6: int
SYSDEF_AF_UNIX: int
SYSDEF_MSG_DONTROUTE: int
SYSDEF_MSG_OOB: int
SYSDEF_MSG_PEEK: int
TEST_OPTION_ISOLATE_DIRS: str
TIME_SPAN_DAY: int
TIME_SPAN_HOUR: int
TIME_SPAN_MILLISECOND: int
TIME_SPAN_MINUTE: int
TIME_SPAN_SECOND: int
UNICHAR_MAX_DECOMPOSITION_LENGTH: int
URI_RESERVED_CHARS_GENERIC_DELIMITERS: str
URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS: str
USEC_PER_SEC: int
USER_DIRECTORY_DESKTOP: int
USER_DIRECTORY_DOCUMENTS: int
USER_DIRECTORY_DOWNLOAD: int
USER_DIRECTORY_MUSIC: int
USER_DIRECTORY_PICTURES: int
USER_DIRECTORY_PUBLIC_SHARE: int
USER_DIRECTORY_TEMPLATES: int
USER_DIRECTORY_VIDEOS: int
VERSION_MIN_REQUIRED: int
WIN32_MSG_HANDLE: int

def abort() -> None: ...
def access(filename: str, mode: int) -> int: ...
def aligned_alloc(n_blocks: int, n_block_bytes: int, alignment: int): ...
def aligned_alloc0(n_blocks: int, n_block_bytes: int, alignment: int): ...
def aligned_free(mem: Incomplete | None = ...) -> None: ...
def ascii_digit_value(c: int) -> int: ...
def ascii_dtostr(buffer: str, buf_len: int, d: float) -> str: ...
def ascii_formatd(buffer: str, buf_len: int, format: str, d: float) -> str: ...
def ascii_strcasecmp(s1: str, s2: str) -> int: ...
def ascii_strdown(str: str, len: int) -> str: ...
def ascii_string_to_signed(str: str, base: int, min: int, max: int) -> tuple[bool, None]: ...
def ascii_string_to_unsigned(str: str, base: int, min: int, max: int) -> tuple[bool, None]: ...
def ascii_strncasecmp(s1: str, s2: str, n: int) -> int: ...
def ascii_strtod(nptr: str) -> tuple[float, None]: ...
def ascii_strtoll(nptr: str, base: int) -> tuple[int, None]: ...
def ascii_strtoull(nptr: str, base: int) -> tuple[int, None]: ...
def ascii_strup(str: str, len: int) -> str: ...
def ascii_tolower(c: int) -> int: ...
def ascii_toupper(c: int) -> int: ...
def ascii_xdigit_value(c: int) -> int: ...
def assertion_message(domain: str, file: str, line: int, func: str, message: str): ...
def assertion_message_cmpstr(domain: str, file: str, line: int, func: str, expr: str, arg1: str, cmp: str, arg2: str): ...
def assertion_message_cmpstrv(domain: str, file: str, line: int, func: str, expr: str, arg1: str, arg2: str, first_wrong_idx: int): ...
def assertion_message_error(domain: str, file: str, line: int, func: str, expr: str, error: error, error_domain: int, error_code: int): ...
def assert_warning(log_domain: str, file: str, line: int, pretty_function: str, expression: str): ...
def atexit(func: GLib.VoidFunc): ...
def atomic_int_add(atomic: int, val: int) -> int: ...
def atomic_int_and(atomic: int, val: int) -> int: ...
def atomic_int_compare_and_exchange(atomic: int, oldval: int, newval: int) -> bool: ...
def atomic_int_dec_and_test(atomic: int) -> bool: ...
def atomic_int_exchange_and_add(atomic: int, val: int) -> int: ...
def atomic_int_get(atomic: int) -> int: ...
def atomic_int_inc(atomic: int): ...
def atomic_int_or(atomic: int, val: int) -> int: ...
def atomic_int_set(atomic: int, newval: int): ...
def atomic_int_xor(atomic: int, val: int) -> int: ...
def atomic_pointer_add(atomic, val: int) -> int: ...
def atomic_pointer_and(atomic, val: int) -> int: ...
def atomic_pointer_compare_and_exchange(atomic, oldval, newval) -> bool: ...
def atomic_pointer_get(atomic) -> None: ...
def atomic_pointer_or(atomic, val: int) -> int: ...
def atomic_pointer_set(atomic, newval: Incomplete | None = ...) -> None: ...
def atomic_pointer_xor(atomic, val: int) -> int: ...
def atomic_rc_box_acquire(mem_block) -> None: ...
def atomic_rc_box_alloc(block_size: int): ...
def atomic_rc_box_alloc0(block_size: int): ...
def atomic_rc_box_dup(block_size: int, mem_block): ...
def atomic_rc_box_get_size(mem_block) -> int: ...
def atomic_rc_box_release(mem_block) -> None: ...
def atomic_rc_box_release_full(mem_block, clear_func: GLib.DestroyNotify): ...
def atomic_ref_count_compare(arc: int, val: int) -> bool: ...
def atomic_ref_count_dec(arc: int) -> bool: ...
def atomic_ref_count_inc(arc: int): ...
def atomic_ref_count_init(arc: int): ...
def base64_decode(text: str) -> tuple[list, None]: ...
def base64_decode_inplace(text: list) -> tuple[int, None]: ...
def base64_encode(data: list) -> str: ...
def base64_encode_close(break_lines: bool, state: int, save: int) -> tuple[int, None, None, None]: ...
def base64_encode_step(in_: list, break_lines: bool, state: int, save: int) -> tuple[int, None, None, None]: ...
def basename(file_name: str) -> str: ...
def bit_lock(address: int, lock_bit: int): ...
def bit_nth_lsf(mask: int, nth_bit: int) -> int: ...
def bit_nth_msf(mask: int, nth_bit: int) -> int: ...
def bit_storage(number: int) -> int: ...
def bit_trylock(address: int, lock_bit: int) -> bool: ...
def bit_unlock(address: int, lock_bit: int): ...
def bookmark_file_error_quark() -> int: ...
def build_filenamev(args: list) -> str: ...
def build_pathv(separator: str, args: list) -> str: ...
def byte_array_free(array: list, free_segment: bool) -> int: ...
def byte_array_free_to_bytes(array: list) -> GLib.Bytes: ...
def byte_array_new() -> list: ...
def byte_array_new_take(data: list) -> list: ...
def byte_array_steal(array: list) -> tuple[int, None]: ...
def byte_array_unref(array: list): ...
def canonicalize_filename(filename: str, relative_to: str) -> str: ...
def chdir(path: str) -> int: ...
def checksum_type_get_length(checksum_type: GLib.ChecksumType) -> int: ...
def check_version(required_major: int, required_minor: int, required_micro: int) -> Union[str, None]: ...
def child_watch_add(*args, **kwargs) -> None: ...
def child_watch_source_new(pid) -> GLib.Source: ...
def chmod(filename: str, mode: int) -> int: ...
def clear_error() -> None: ...
def close(fd: int) -> bool: ...
def compute_checksum_for_bytes(checksum_type: GLib.ChecksumType, data: GLib.Bytes) -> Union[str, None]: ...
def compute_checksum_for_data(checksum_type: GLib.ChecksumType, data: list) -> Union[str, None]: ...
def compute_checksum_for_string(checksum_type: GLib.ChecksumType, str: str, length: int) -> Union[str, None]: ...
def compute_hmac_for_bytes(digest_type: GLib.ChecksumType, key: GLib.Bytes, data: GLib.Bytes) -> str: ...
def compute_hmac_for_data(digest_type: GLib.ChecksumType, key: list, data: list) -> str: ...
def compute_hmac_for_string(digest_type: GLib.ChecksumType, key: list, str: str, length: int) -> str: ...
def convert(str: list, to_codeset: str, from_codeset: str) -> tuple[list, None, None]: ...
def convert_error_quark() -> int: ...
def convert_with_fallback(str: list, to_codeset: str, from_codeset: str, fallback: str) -> tuple[list, None, None]: ...
def creat(filename: str, mode: int) -> int: ...
def datalist_foreach(datalist: GLib.Data, func: GLib.DataForeachFunc, user_data: Incomplete | None = ...): ...
def datalist_get_data(datalist: GLib.Data, key: str): ...
def datalist_get_flags(datalist: GLib.Data) -> int: ...
def datalist_id_get_data(datalist: GLib.Data, key_id: int): ...
def datalist_set_flags(datalist: GLib.Data, flags: int): ...
def datalist_unset_flags(datalist: GLib.Data, flags: int): ...
def dataset_destroy(dataset_location) -> None: ...
def dataset_foreach(dataset_location, func: GLib.DataForeachFunc, user_data: Incomplete | None = ...): ...
def dataset_id_get_data(dataset_location, key_id: int): ...
def date_get_days_in_month(month: GLib.DateMonth, year: int) -> int: ...
def date_get_monday_weeks_in_year(year: int) -> int: ...
def date_get_sunday_weeks_in_year(year: int) -> int: ...
def date_is_leap_year(year: int) -> bool: ...
def date_strftime(s: str, slen: int, format: str, date: GLib.Date) -> int: ...
def date_valid_day(day: int) -> bool: ...
def date_valid_dmy(day: int, month: GLib.DateMonth, year: int) -> bool: ...
def date_valid_julian(julian_date: int) -> bool: ...
def date_valid_month(month: GLib.DateMonth) -> bool: ...
def date_valid_weekday(weekday: GLib.DateWeekday) -> bool: ...
def date_valid_year(year: int) -> bool: ...
def dcgettext(domain: str, msgid: str, category: int) -> str: ...
def dgettext(domain: str, msgid: str) -> str: ...
def direct_equal(v1, v2) -> bool: ...
def direct_hash(v) -> int: ...
def dir_make_tmp(tmpl: str) -> str: ...
def dngettext(domain: str, msgid: str, msgid_plural: str, n: int) -> str: ...
def double_equal(v1, v2) -> bool: ...
def double_hash(v) -> int: ...
def dpgettext(domain: str, msgctxtid: str, msgidoffset: int) -> str: ...
def dpgettext2(domain: str, context: str, msgid: str) -> str: ...
def environ_getenv(envp: list, variable: str) -> Union[str, None]: ...
def environ_setenv(envp: list, variable: str, value: str, overwrite: bool) -> list: ...
def environ_unsetenv(envp: list, variable: str) -> list: ...
def filename_display_basename(filename: str) -> str: ...
def filename_display_name(filename: str) -> str: ...
def filename_from_uri(uri: str) -> tuple[str, None]: ...
def filename_from_utf8(utf8string, len: int = ...) -> None: ...
def filename_to_uri(filename: str, hostname: str) -> str: ...
def filename_to_utf8(opsysstring: str, len: int) -> tuple[str, None, None]: ...
def file_error_from_errno(err_no: int) -> GLib.FileError: ...
def file_error_quark() -> int: ...
def file_get_contents(filename: str) -> tuple[bool, None]: ...
def file_open_tmp(tmpl: str) -> tuple[int, None]: ...
def file_read_link(filename: str) -> str: ...
def file_set_contents(filename: str, contents: list) -> bool: ...
def file_set_contents_full(filename: str, contents: list, flags: GLib.FileSetContentsFlags, mode: int) -> bool: ...
def file_test(filename: str, test: GLib.FileTest) -> bool: ...
def find_program_in_path(program: str) -> Union[str, None]: ...
def fopen(filename: str, mode: str): ...
def format_size(size: int) -> str: ...
def format_size_for_display(size: int) -> str: ...
def format_size_full(size: int, flags: GLib.FormatSizeFlags) -> str: ...
def free(mem: Incomplete | None = ...) -> None: ...
def freopen(filename: str, mode: str, stream: Incomplete | None = ...): ...
def fsync(fd: int) -> int: ...
def getenv(variable: str) -> Union[str, None]: ...
def get_application_name() -> Union[str, None]: ...
def get_charset() -> tuple[bool, None]: ...
def get_codeset() -> str: ...
def get_console_charset() -> tuple[bool, None]: ...
def get_current_dir() -> str: ...
def get_current_time(*args, **kwargs) -> None: ...
def get_environ() -> list: ...
def get_filename_charsets() -> tuple[bool, None]: ...
def get_home_dir() -> str: ...
def get_host_name() -> str: ...
def get_language_names() -> list: ...
def get_language_names_with_category(category_name: str) -> list: ...
def get_locale_variants(locale: str) -> list: ...
def get_monotonic_time() -> int: ...
def get_num_processors() -> int: ...
def get_os_info(key_name: str) -> Union[str, None]: ...
def get_prgname() -> Union[str, None]: ...
def get_real_name() -> str: ...
def get_real_time() -> int: ...
def get_system_config_dirs() -> list: ...
def get_system_data_dirs() -> list: ...
def get_tmp_dir() -> str: ...
def get_user_cache_dir() -> str: ...
def get_user_config_dir() -> str: ...
def get_user_data_dir() -> str: ...
def get_user_name() -> str: ...
def get_user_runtime_dir() -> str: ...
def get_user_special_dir(directory: GLib.UserDirectory) -> Union[str, None]: ...
def get_user_state_dir() -> str: ...
def hash_table_add(hash_table: dict, key) -> bool: ...
def hash_table_contains(hash_table: dict, key) -> bool: ...
def hash_table_destroy(hash_table: dict): ...
def hash_table_insert(hash_table: dict, key, value) -> bool: ...
def hash_table_lookup(hash_table: dict, key: Incomplete | None = ...): ...
def hash_table_lookup_extended(hash_table: dict, lookup_key) -> tuple[bool, orig_key, value]: ...
def hash_table_new_similar(other_hash_table: dict) -> dict: ...
def hash_table_remove(hash_table: dict, key) -> bool: ...
def hash_table_remove_all(hash_table: dict): ...
def hash_table_replace(hash_table: dict, key, value) -> bool: ...
def hash_table_size(hash_table: dict) -> int: ...
def hash_table_steal(hash_table: dict, key) -> bool: ...
def hash_table_steal_all(hash_table: dict): ...
def hash_table_steal_extended(hash_table: dict, lookup_key) -> tuple[bool, stolen_key, stolen_value]: ...
def hash_table_unref(hash_table: dict): ...
def hook_destroy(hook_list: GLib.HookList, hook_id: int) -> bool: ...
def hook_destroy_link(hook_list: GLib.HookList, hook: GLib.Hook): ...
def hook_free(hook_list: GLib.HookList, hook: GLib.Hook): ...
def hook_insert_before(hook_list: GLib.HookList, sibling: GLib.Hook, hook: GLib.Hook): ...
def hook_prepend(hook_list: GLib.HookList, hook: GLib.Hook): ...
def hook_unref(hook_list: GLib.HookList, hook: GLib.Hook): ...
def hostname_is_ascii_encoded(hostname: str) -> bool: ...
def hostname_is_ip_address(hostname: str) -> bool: ...
def hostname_is_non_ascii(hostname: str) -> bool: ...
def hostname_to_ascii(hostname: str) -> Union[str, None]: ...
def hostname_to_unicode(hostname: str) -> Union[str, None]: ...
def idle_add(function, *user_data, **kwargs) -> None: ...
def idle_remove_by_data(data) -> bool: ...
def idle_source_new() -> GLib.Source: ...
def int64_equal(v1, v2) -> bool: ...
def int64_hash(v) -> int: ...
def intern_static_string(string: str) -> str: ...
def intern_string(string: str) -> str: ...
def int_equal(v1, v2) -> bool: ...
def int_hash(v) -> int: ...
def io_add_watch(*args, **kwargs) -> None: ...
def io_channel_error_from_errno(en: int) -> GLib.IOChannelError: ...
def io_channel_error_quark() -> int: ...
def io_channel_win32_poll(fds: GLib.PollFD, n_fds: int, timeout_: int) -> int: ...
def io_create_watch(channel: GLib.IOChannel, condition: GLib.IOCondition) -> GLib.Source: ...
def key_file_error_quark() -> int: ...
def listenv() -> list: ...
def locale_from_utf8(utf8string: str, len: int) -> tuple[list, None, None]: ...
def locale_to_utf8(opsysstring: list) -> tuple[str, None, None]: ...
def log_default_handler(log_domain: str, log_level: GLib.LogLevelFlags, message: str = ..., unused_data: Incomplete | None = ...): ...
def log_get_debug_enabled() -> bool: ...
def log_remove_handler(log_domain: str, handler_id: int): ...
def log_set_always_fatal(fatal_mask: GLib.LogLevelFlags) -> GLib.LogLevelFlags: ...
def log_set_debug_enabled(enabled: bool): ...
def log_set_fatal_mask(log_domain: str, fatal_mask: GLib.LogLevelFlags) -> GLib.LogLevelFlags: ...
def log_set_handler(log_domain: str, log_levels: GLib.LogLevelFlags, log_func: GLib.LogFunc, user_data) -> int: ...
def log_set_writer_func(user_data: Incomplete | None = ...) -> None: ...
def log_structured_array(log_level: GLib.LogLevelFlags, fields: list): ...
def log_variant(log_domain: str, log_level: GLib.LogLevelFlags, fields: GLib.Variant): ...
def log_writer_default(log_level: GLib.LogLevelFlags, fields: list, user_data) -> GLib.LogWriterOutput: ...
def log_writer_default_set_use_stderr(use_stderr: bool): ...
def log_writer_default_would_drop(log_level: GLib.LogLevelFlags, log_domain: str) -> bool: ...
def log_writer_format_fields(log_level: GLib.LogLevelFlags, fields: list, use_color: bool) -> str: ...
def log_writer_is_journald(output_fd: int) -> bool: ...
def log_writer_journald(log_level: GLib.LogLevelFlags, fields: list, user_data) -> GLib.LogWriterOutput: ...
def log_writer_standard_streams(log_level: GLib.LogLevelFlags, fields: list, user_data) -> GLib.LogWriterOutput: ...
def log_writer_supports_color(output_fd: int) -> bool: ...
def lstat(filename: str, buf: GLib.StatBuf) -> int: ...
def main_context_default() -> GLib.MainContext: ...
def main_context_get_thread_default() -> Union[GLib.MainContext, None]: ...
def main_context_ref_thread_default() -> GLib.MainContext: ...
def main_current_source() -> Union[GLib.Source, None]: ...
def main_depth() -> int: ...
def malloc(n_bytes: int): ...
def malloc0(n_bytes: int): ...
def malloc0_n(n_blocks: int, n_block_bytes: int): ...
def malloc_n(n_blocks: int, n_block_bytes: int): ...
def markup_error_quark() -> int: ...
def markup_escape_text(text, length: int = ...) -> None: ...
def memdup(mem, byte_size: int): ...
def memdup2(mem, byte_size: int): ...
def mem_is_system_malloc() -> bool: ...
def mem_profile() -> None: ...
def mem_set_vtable(vtable: GLib.MemVTable): ...
def mkdir(filename: str, mode: int) -> int: ...
def mkdir_with_parents(pathname: str, mode: int) -> int: ...
def nullify_pointer(nullify_location) -> None: ...
def number_parser_error_quark() -> int: ...
def once_init_enter(location) -> bool: ...
def once_init_leave(location, result: int): ...
def on_error_query(prg_name: str): ...
def on_error_stack_trace(prg_name: str): ...
def open(filename: str, flags: int, mode: int) -> int: ...
def option_error_quark() -> int: ...
def parse_debug_string(string: str, keys: list) -> int: ...
def path_get_basename(file_name: str) -> str: ...
def path_get_dirname(file_name: str) -> str: ...
def path_is_absolute(file_name: str) -> bool: ...
def path_skip_root(file_name: str) -> Union[str, None]: ...
def pattern_match_simple(pattern: str, string: str) -> bool: ...
def pointer_bit_lock(address, lock_bit: int): ...
def pointer_bit_trylock(address, lock_bit: int) -> bool: ...
def pointer_bit_unlock(address, lock_bit: int): ...
def poll(fds: GLib.PollFD, nfds: int, timeout: int) -> int: ...
def prefix_error_literal(err: error, prefix: str): ...
def propagate_error(src: error) -> error: ...
def quark_from_static_string(string: str) -> int: ...
def quark_from_string(string: str) -> int: ...
def quark_to_string(quark: int) -> str: ...
def quark_try_string(string: str) -> int: ...
def random_double() -> float: ...
def random_double_range(begin: float, end: float) -> float: ...
def random_int() -> int: ...
def random_int_range(begin: int, end: int) -> int: ...
def random_set_seed(seed: int): ...
def rc_box_acquire(mem_block) -> None: ...
def rc_box_alloc(block_size: int): ...
def rc_box_alloc0(block_size: int): ...
def rc_box_dup(block_size: int, mem_block): ...
def rc_box_get_size(mem_block) -> int: ...
def rc_box_release(mem_block) -> None: ...
def rc_box_release_full(mem_block, clear_func: GLib.DestroyNotify): ...
def realloc(mem, n_bytes: int): ...
def realloc_n(mem, n_blocks: int, n_block_bytes: int): ...
def ref_count_compare(rc: int, val: int) -> bool: ...
def ref_count_dec(rc: int) -> bool: ...
def ref_count_inc(rc: int): ...
def ref_count_init(rc: int): ...
def ref_string_acquire(str: str) -> str: ...
def ref_string_length(str: str) -> int: ...
def ref_string_new(str: str) -> str: ...
def ref_string_new_intern(str: str) -> str: ...
def ref_string_new_len(str: str, len: int) -> str: ...
def ref_string_release(str: str): ...
def regex_check_replacement(replacement: str) -> tuple[bool, None]: ...
def regex_error_quark() -> int: ...
def regex_escape_nul(string: str, length: int) -> str: ...
def regex_escape_string(string: list) -> str: ...
def regex_match_simple(pattern: str, string: str, compile_options: GLib.RegexCompileFlags, match_options: GLib.RegexMatchFlags) -> bool: ...
def regex_split_simple(pattern: str, string: str, compile_options: GLib.RegexCompileFlags, match_options: GLib.RegexMatchFlags) -> list: ...
def reload_user_special_dirs_cache() -> None: ...
def remove(filename: str) -> int: ...
def rename(oldfilename: str, newfilename: str) -> int: ...
def rmdir(filename: str) -> int: ...
def sequence_get(iter: GLib.SequenceIter): ...
def sequence_insert_before(iter: GLib.SequenceIter, data) -> GLib.SequenceIter: ...
def sequence_move(src: GLib.SequenceIter, dest: GLib.SequenceIter): ...
def sequence_move_range(dest: GLib.SequenceIter, begin: GLib.SequenceIter, end: GLib.SequenceIter): ...
def sequence_range_get_midpoint(begin: GLib.SequenceIter, end: GLib.SequenceIter) -> GLib.SequenceIter: ...
def sequence_remove(iter: GLib.SequenceIter): ...
def sequence_remove_range(begin: GLib.SequenceIter, end: GLib.SequenceIter): ...
def sequence_set(iter: GLib.SequenceIter, data: Incomplete | None = ...): ...
def sequence_swap(a: GLib.SequenceIter, b: GLib.SequenceIter): ...
def setenv(variable: str, value: str, overwrite: bool) -> bool: ...
def set_application_name(application_name: str): ...
def set_error_literal(domain: int, code: int, message: str) -> error: ...
def set_prgname(prgname: str): ...
def shell_error_quark() -> int: ...
def shell_parse_argv(command_line: str) -> tuple[bool, None]: ...
def shell_quote(unquoted_string: str) -> str: ...
def shell_unquote(quoted_string: str) -> str: ...
def slice_alloc(block_size: int): ...
def slice_alloc0(block_size: int): ...
def slice_copy(block_size: int, mem_block: Incomplete | None = ...): ...
def slice_free1(block_size: int, mem_block: Incomplete | None = ...): ...
def slice_free_chain_with_offset(block_size: int, mem_chain, next_offset: int): ...
def slice_get_config(ckey: GLib.SliceConfig) -> int: ...
def slice_get_config_state(ckey: GLib.SliceConfig, address: int, n_values: int) -> int: ...
def slice_set_config(ckey: GLib.SliceConfig, value: int): ...
def source_remove(tag: int) -> bool: ...
def source_remove_by_funcs_user_data(funcs: GLib.SourceFuncs, user_data) -> bool: ...
def source_remove_by_user_data(user_data) -> bool: ...
def source_set_name_by_id(tag: int, name: str): ...
def spaced_primes_closest(num: int) -> int: ...
def spawn_async_with_fds(working_directory: str, argv: list, envp: list, flags: GLib.SpawnFlags, child_setup: GLib.SpawnChildSetupFunc, user_data, stdin_fd: int, stdout_fd: int, stderr_fd: int) -> tuple[bool, child_pid]: ...
def spawn_async_with_pipes(working_directory: str, argv: list, envp: list, flags: GLib.SpawnFlags, child_setup: GLib.SpawnChildSetupFunc, user_data) -> tuple[bool, child_pid, None, None, None]: ...
def spawn_async_with_pipes_and_fds(working_directory: str, argv: list, envp: list, flags: GLib.SpawnFlags, child_setup: GLib.SpawnChildSetupFunc, user_data, stdin_fd: int, stdout_fd: int, stderr_fd: int, source_fds: list, target_fds: list) -> tuple[bool, child_pid_out, None, None, None]: ...
def spawn_check_exit_status(wait_status: int) -> bool: ...
def spawn_check_wait_status(wait_status: int) -> bool: ...
def spawn_close_pid(pid) -> None: ...
def spawn_command_line_async(command_line: str) -> bool: ...
def spawn_command_line_sync(command_line: str) -> tuple[bool, None, None, None]: ...
def spawn_error_quark() -> int: ...
def spawn_exit_error_quark() -> int: ...
def spawn_sync(working_directory: str, argv: list, envp: list, flags: GLib.SpawnFlags, child_setup: GLib.SpawnChildSetupFunc, user_data) -> tuple[bool, None, None, None]: ...
def stat(filename: str, buf: GLib.StatBuf) -> int: ...
def stpcpy(dest: str, src: str) -> str: ...
def strcanon(string: str, valid_chars: str, substitutor: int) -> str: ...
def strcasecmp(s1: str, s2: str) -> int: ...
def strchomp(string: str) -> str: ...
def strchug(string: str) -> str: ...
def strcmp0(str1: str, str2: str) -> int: ...
def strcompress(source: str) -> str: ...
def strdelimit(string: str, delimiters: str, new_delimiter: int) -> str: ...
def strdown(string: str) -> str: ...
def strdup(str: str) -> str: ...
def strerror(errnum: int) -> str: ...
def strescape(source: str, exceptions: str) -> str: ...
def strfreev(str_array: str = ...): ...
def strip_context(msgid: str, msgval: str) -> str: ...
def strjoinv(separator: str, str_array: str) -> str: ...
def strlcat(dest: str, src: str, dest_size: int) -> int: ...
def strlcpy(dest: str, src: str, dest_size: int) -> int: ...
def strncasecmp(s1: str, s2: str, n: int) -> int: ...
def strndup(str: str, n: int) -> str: ...
def strnfill(length: int, fill_char: int) -> str: ...
def strreverse(string: str) -> str: ...
def strrstr(haystack: str, needle: str) -> str: ...
def strrstr_len(haystack: str, haystack_len: int, needle: str) -> str: ...
def strsignal(signum: int) -> str: ...
def strstr_len(haystack: str, haystack_len: int, needle: str) -> str: ...
def strtod(nptr: str) -> tuple[float, None]: ...
def strup(string: str) -> str: ...
def strv_contains(strv: str, str: str) -> bool: ...
def strv_equal(strv1: str, strv2: str) -> bool: ...
def strv_get_type() -> GType: ...
def strv_length(str_array: str) -> int: ...
def str_equal(v1, v2) -> bool: ...
def str_hash(v) -> int: ...
def str_has_prefix(str: str, prefix: str) -> bool: ...
def str_has_suffix(str: str, suffix: str) -> bool: ...
def str_is_ascii(str: str) -> bool: ...
def str_match_string(search_term: str, potential_hit: str, accept_alternates: bool) -> bool: ...
def str_tokenize_and_fold(string: str, translit_locale: str) -> tuple[list, None]: ...
def str_to_ascii(str: str, from_locale: str) -> str: ...
def test_add_data_func(testpath: str, test_data, test_func: GLib.TestDataFunc): ...
def test_add_data_func_full(testpath: str, test_data, test_func: GLib.TestDataFunc): ...
def test_add_func(testpath: str, test_func: GLib.TestFunc): ...
def test_assert_expected_messages_internal(domain: str, file: str, line: int, func: str): ...
def test_bug(bug_uri_snippet: str): ...
def test_bug_base(uri_pattern: str): ...
def test_expect_message(log_domain: str, log_level: GLib.LogLevelFlags, pattern: str): ...
def test_fail() -> None: ...
def test_failed() -> bool: ...
def test_get_dir(file_type: GLib.TestFileType) -> str: ...
def test_get_path() -> str: ...
def test_incomplete(msg: str = ...): ...
def test_log_type_name(log_type: GLib.TestLogType) -> str: ...
def test_queue_destroy(destroy_func: GLib.DestroyNotify, destroy_data: Incomplete | None = ...): ...
def test_queue_free(gfree_pointer: Incomplete | None = ...) -> None: ...
def test_rand_double() -> float: ...
def test_rand_double_range(range_start: float, range_end: float) -> float: ...
def test_rand_int() -> int: ...
def test_rand_int_range(begin: int, end: int) -> int: ...
def test_run() -> int: ...
def test_run_suite(suite: GLib.TestSuite) -> int: ...
def test_set_nonfatal_assertions() -> None: ...
def test_skip(msg: str = ...): ...
def test_subprocess() -> bool: ...
def test_summary(summary: str): ...
def test_timer_elapsed() -> float: ...
def test_timer_last() -> float: ...
def test_timer_start() -> None: ...
def test_trap_assertions(domain: str, file: str, line: int, func: str, assertion_flags: int, pattern: str): ...
def test_trap_fork(usec_timeout: int, test_trap_flags: GLib.TestTrapFlags) -> bool: ...
def test_trap_has_passed() -> bool: ...
def test_trap_reached_timeout() -> bool: ...
def test_trap_subprocess(test_path: str, usec_timeout: int, test_flags: GLib.TestSubprocessFlags): ...
def threads_init() -> None: ...
def thread_error_quark() -> int: ...
def thread_exit(retval: Incomplete | None = ...) -> None: ...
def thread_pool_get_max_idle_time() -> int: ...
def thread_pool_get_max_unused_threads() -> int: ...
def thread_pool_get_num_unused_threads() -> int: ...
def thread_pool_set_max_idle_time(interval: int): ...
def thread_pool_set_max_unused_threads(max_threads: int): ...
def thread_pool_stop_unused_threads() -> None: ...
def thread_self() -> GLib.Thread: ...
def thread_yield() -> None: ...
def timeout_add(interval, function, *user_data, **kwargs) -> None: ...
def timeout_add_seconds(interval, function, *user_data, **kwargs) -> None: ...
def timeout_source_new(interval: int) -> GLib.Source: ...
def timeout_source_new_seconds(interval: int) -> GLib.Source: ...
def time_val_from_iso8601(iso_date: str) -> tuple[bool, None]: ...
def trash_stack_height(stack_p: GLib.TrashStack) -> int: ...
def trash_stack_peek(stack_p: GLib.TrashStack): ...
def trash_stack_pop(stack_p: GLib.TrashStack): ...
def trash_stack_push(stack_p: GLib.TrashStack, data_p): ...
def try_malloc(n_bytes: int): ...
def try_malloc0(n_bytes: int): ...
def try_malloc0_n(n_blocks: int, n_block_bytes: int): ...
def try_malloc_n(n_blocks: int, n_block_bytes: int): ...
def try_realloc(mem, n_bytes: int): ...
def try_realloc_n(mem, n_blocks: int, n_block_bytes: int): ...
def ucs4_to_utf16(str: str, len: int) -> tuple[int, None, None]: ...
def ucs4_to_utf8(str: str, len: int) -> tuple[str, None, None]: ...
def unichar_break_type(c: str) -> GLib.UnicodeBreakType: ...
def unichar_combining_class(uc: str) -> int: ...
def unichar_compose(a: str, b: str) -> tuple[bool, None]: ...
def unichar_decompose(ch: str) -> tuple[bool, None, None]: ...
def unichar_digit_value(c: str) -> int: ...
def unichar_fully_decompose(ch: str, compat: bool, result_len: int) -> tuple[int, None]: ...
def unichar_get_mirror_char(ch: str, mirrored_ch: str) -> bool: ...
def unichar_get_script(ch: str) -> GLib.UnicodeScript: ...
def unichar_isalnum(c: str) -> bool: ...
def unichar_isalpha(c: str) -> bool: ...
def unichar_iscntrl(c: str) -> bool: ...
def unichar_isdefined(c: str) -> bool: ...
def unichar_isdigit(c: str) -> bool: ...
def unichar_isgraph(c: str) -> bool: ...
def unichar_islower(c: str) -> bool: ...
def unichar_ismark(c: str) -> bool: ...
def unichar_isprint(c: str) -> bool: ...
def unichar_ispunct(c: str) -> bool: ...
def unichar_isspace(c: str) -> bool: ...
def unichar_istitle(c: str) -> bool: ...
def unichar_isupper(c: str) -> bool: ...
def unichar_iswide(c: str) -> bool: ...
def unichar_iswide_cjk(c: str) -> bool: ...
def unichar_isxdigit(c: str) -> bool: ...
def unichar_iszerowidth(c: str) -> bool: ...
def unichar_tolower(c: str) -> str: ...
def unichar_totitle(c: str) -> str: ...
def unichar_toupper(c: str) -> str: ...
def unichar_to_utf8(c: str) -> tuple[int, None]: ...
def unichar_type(c: str) -> GLib.UnicodeType: ...
def unichar_validate(ch: str) -> bool: ...
def unichar_xdigit_value(c: str) -> int: ...
def unicode_canonical_decomposition(ch: str, result_len: int) -> str: ...
def unicode_canonical_ordering(string: str, len: int): ...
def unicode_script_from_iso15924(iso15924: int) -> GLib.UnicodeScript: ...
def unicode_script_to_iso15924(script: GLib.UnicodeScript) -> int: ...
def unlink(filename: str) -> int: ...
def unsetenv(variable: str): ...
def uri_build(flags: GLib.UriFlags, scheme: str, userinfo: str, host: str, port: int, path: str, query: str, fragment: str) -> GLib.Uri: ...
def uri_build_with_user(flags: GLib.UriFlags, scheme: str, user: str, password: str, auth_params: str, host: str, port: int, path: str, query: str, fragment: str) -> GLib.Uri: ...
def uri_error_quark() -> int: ...
def uri_escape_bytes(unescaped: list, reserved_chars_allowed: str) -> str: ...
def uri_escape_string(unescaped: str, reserved_chars_allowed: str, allow_utf8: bool) -> str: ...
def uri_is_valid(uri_string: str, flags: GLib.UriFlags) -> bool: ...
def uri_join(flags: GLib.UriFlags, scheme: str, userinfo: str, host: str, port: int, path: str, query: str, fragment: str) -> str: ...
def uri_join_with_user(flags: GLib.UriFlags, scheme: str, user: str, password: str, auth_params: str, host: str, port: int, path: str, query: str, fragment: str) -> str: ...
def uri_list_extract_uris(uri_list: str) -> list: ...
def uri_parse(uri_string: str, flags: GLib.UriFlags) -> GLib.Uri: ...
def uri_parse_params(params: str, length: int, separators: str, flags: GLib.UriParamsFlags) -> dict: ...
def uri_parse_scheme(uri: str) -> Union[str, None]: ...
def uri_peek_scheme(uri: str) -> Union[str, None]: ...
def uri_resolve_relative(base_uri_string: str, uri_ref: str, flags: GLib.UriFlags) -> str: ...
def uri_split(uri_ref: str, flags: GLib.UriFlags) -> tuple[None, None, None, None, None, None, None]: ...
def uri_split_network(uri_string: str, flags: GLib.UriFlags) -> tuple[None, None, None]: ...
def uri_split_with_user(uri_ref: str, flags: GLib.UriFlags) -> tuple[None, None, None, None, None, None, None, None, None]: ...
def uri_unescape_bytes(escaped_string: str, length: int, illegal_characters: str) -> GLib.Bytes: ...
def uri_unescape_segment(escaped_string: str = ..., escaped_string_end: str = ..., illegal_characters: str = ...) -> Union[str, None]: ...
def uri_unescape_string(escaped_string: str, illegal_characters: str = ...) -> Union[str, None]: ...
def usleep(microseconds: int): ...
def utf16_to_ucs4(str: int, len: int) -> tuple[str, None, None]: ...
def utf16_to_utf8(str: int, len: int) -> tuple[str, None, None]: ...
def utf8_casefold(str: str, len: int) -> str: ...
def utf8_collate(str1: str, str2: str) -> int: ...
def utf8_collate_key(str: str, len: int) -> str: ...
def utf8_collate_key_for_filename(str: str, len: int) -> str: ...
def utf8_find_next_char(p: str, end: str = ...) -> Union[str, None]: ...
def utf8_find_prev_char(str: str, p: str) -> Union[str, None]: ...
def utf8_get_char(p: str) -> str: ...
def utf8_get_char_validated(p: str, max_len: int) -> str: ...
def utf8_make_valid(str: str, len: int) -> str: ...
def utf8_normalize(str: str, len: int, mode: GLib.NormalizeMode) -> Union[str, None]: ...
def utf8_offset_to_pointer(str: str, offset: int) -> str: ...
def utf8_pointer_to_offset(str: str, pos: str) -> int: ...
def utf8_prev_char(p: str) -> str: ...
def utf8_strchr(p: str, len: int, c: str) -> Union[str, None]: ...
def utf8_strdown(str: str, len: int) -> str: ...
def utf8_strlen(p: str, max: int) -> int: ...
def utf8_strncpy(dest: str, src: str, n: int) -> str: ...
def utf8_strrchr(p: str, len: int, c: str) -> Union[str, None]: ...
def utf8_strreverse(str: str, len: int) -> str: ...
def utf8_strup(str: str, len: int) -> str: ...
def utf8_substring(str: str, start_pos: int, end_pos: int) -> str: ...
def utf8_to_ucs4(str: str, len: int) -> tuple[str, None, None]: ...
def utf8_to_ucs4_fast(str: str, len: int) -> tuple[str, None]: ...
def utf8_to_utf16(str: str, len: int) -> tuple[int, None, None]: ...
def utf8_validate(str: list) -> tuple[bool, None]: ...
def utf8_validate_len(str: list) -> tuple[bool, None]: ...
def utime(filename: str, utb) -> int: ...
def uuid_string_is_valid(str: str) -> bool: ...
def uuid_string_random() -> str: ...
def variant_get_gtype() -> GType: ...
def variant_is_object_path(string: str) -> bool: ...
def variant_is_signature(string: str) -> bool: ...
def variant_parse(type: GLib.VariantType, text: str, limit: str, endptr: str) -> GLib.Variant: ...
def variant_parser_get_error_quark() -> int: ...
def variant_parse_error_print_context(error: error, source_str: str) -> str: ...
def variant_parse_error_quark() -> int: ...
def variant_type_checked_(arg0: str) -> GLib.VariantType: ...
def variant_type_string_get_depth_(type_string: str) -> int: ...
def variant_type_string_is_valid(type_string: str) -> bool: ...
def variant_type_string_scan(string: str, limit: str) -> tuple[bool, None]: ...
def win32_check_windows_version(major: int, minor: int, spver: int, os_type: GLib.Win32OSType) -> bool: ...
def win32_error_message(error: int) -> str: ...
def win32_ftruncate(f: int, size: int) -> int: ...
def win32_getlocale() -> str: ...
def win32_get_command_line() -> list: ...
def win32_get_package_installation_directory(package: str, dll_name: str) -> str: ...
def win32_get_package_installation_directory_of_module(hmodule) -> str: ...
def win32_get_package_installation_subdirectory(package: str, dll_name: str, subdir: str) -> str: ...
def win32_get_system_data_dirs_for_module(address_of_function) -> list: ...
def win32_get_windows_version() -> int: ...
def win32_locale_filename_from_utf8(utf8filename: str) -> str: ...


class Array(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self) -> GLib.Array: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> GLib.Array: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    data: Incomplete
    len: Incomplete

class AsciiType(__gobject.GFlags):
    G_ASCII_ALNUM: int
    G_ASCII_ALPHA: int
    G_ASCII_CNTRL: int
    G_ASCII_DIGIT: int
    G_ASCII_GRAPH: int
    G_ASCII_LOWER: int
    G_ASCII_PRINT: int
    G_ASCII_PUNCT: int
    G_ASCII_SPACE: int
    G_ASCII_UPPER: int
    G_ASCII_XDIGIT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> GLib.AsciiType: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> GLib.AsciiType: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    ALNUM: int
    ALPHA: int
    CNTRL: int
    DIGIT: int
    GRAPH: int
    LOWER: int
    PRINT: int
    PUNCT: int
    SPACE: int
    UPPER: int
    XDIGIT: int

class AsyncQueue(__gi.Struct):
    def length(self) -> int: ...
    def length_unlocked(self) -> int: ...
    def lock(self) -> None: ...
    def pop(self) -> None: ...
    def pop_unlocked(self) -> None: ...
    def push(self, data: Incomplete | None = ...) -> None: ...
    def push_front(self, item: Incomplete | None = ...) -> None: ...
    def push_front_unlocked(self, item: Incomplete | None = ...) -> None: ...
    def push_unlocked(self, data: Incomplete | None = ...) -> None: ...
    def ref_unlocked(self) -> None: ...
    def remove(self, item) -> bool: ...
    def remove_unlocked(self, item) -> bool: ...
    def timed_pop(self, end_time: GLib.TimeVal): ...
    def timed_pop_unlocked(self, end_time: GLib.TimeVal): ...
    def timeout_pop(self, timeout: int): ...
    def timeout_pop_unlocked(self, timeout: int): ...
    def try_pop(self) -> None: ...
    def try_pop_unlocked(self) -> None: ...
    def unlock(self) -> None: ...
    def unref(self) -> None: ...
    def unref_and_unlock(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class BookmarkFile(__gi.Struct):
    def add_application(self, uri: str, name: str = ..., exec: str = ...): ...
    def add_group(self, uri: str, group: str): ...
    @staticmethod
    def error_quark() -> int: ...
    def free(self) -> None: ...
    def get_added(self, uri: str) -> int: ...
    def get_added_date_time(self, uri: str) -> GLib.DateTime: ...
    def get_applications(self, uri: str) -> tuple[list, None]: ...
    def get_application_info(self, uri: str, name: str) -> tuple[bool, None, None, None]: ...
    def get_app_info(self, uri: str, name: str) -> tuple[bool, None, None, None]: ...
    def get_description(self, uri: str) -> str: ...
    def get_groups(self, uri: str) -> tuple[list, None]: ...
    def get_icon(self, uri: str) -> tuple[bool, None, None]: ...
    def get_is_private(self, uri: str) -> bool: ...
    def get_mime_type(self, uri: str) -> str: ...
    def get_modified(self, uri: str) -> int: ...
    def get_modified_date_time(self, uri: str) -> GLib.DateTime: ...
    def get_size(self) -> int: ...
    def get_title(self, uri: str) -> str: ...
    def get_uris(self) -> tuple[list, None]: ...
    def get_visited(self, uri: str) -> int: ...
    def get_visited_date_time(self, uri: str) -> GLib.DateTime: ...
    def has_application(self, uri: str, name: str) -> bool: ...
    def has_group(self, uri: str, group: str) -> bool: ...
    def has_item(self, uri: str) -> bool: ...
    def load_from_data(self, data: list) -> bool: ...
    def load_from_data_dirs(self, file: str) -> tuple[bool, None]: ...
    def load_from_file(self, filename: str) -> bool: ...
    def move_item(self, old_uri: str, new_uri: str) -> bool: ...
    def remove_application(self, uri: str, name: str) -> bool: ...
    def remove_group(self, uri: str, group: str) -> bool: ...
    def remove_item(self, uri: str) -> bool: ...
    def set_added(self, uri: str, added: int): ...
    def set_added_date_time(self, uri: str, added: GLib.DateTime): ...
    def set_application_info(self, uri: str, name: str, exec: str, count: int, stamp: GLib.DateTime) -> bool: ...
    def set_app_info(self, uri: str, name: str, exec: str, count: int, stamp: int) -> bool: ...
    def set_description(self, uri: str, description: str): ...
    def set_groups(self, uri: str, groups: list = ...): ...
    def set_icon(self, uri: str, href: str, mime_type: str): ...
    def set_is_private(self, uri: str, is_private: bool): ...
    def set_mime_type(self, uri: str, mime_type: str): ...
    def set_modified(self, uri: str, modified: int): ...
    def set_modified_date_time(self, uri: str, modified: GLib.DateTime): ...
    def set_title(self, uri: str, title: str): ...
    def set_visited(self, uri: str, visited: int): ...
    def set_visited_date_time(self, uri: str, visited: GLib.DateTime): ...
    def to_data(self) -> tuple[list, None]: ...
    def to_file(self, filename: str) -> bool: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class BookmarkFileError(__gobject.GEnum):
    G_BOOKMARK_FILE_ERROR_INVALID_URI: int
    G_BOOKMARK_FILE_ERROR_INVALID_VALUE: int
    G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED: int
    G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND: int
    G_BOOKMARK_FILE_ERROR_READ: int
    G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING: int
    G_BOOKMARK_FILE_ERROR_WRITE: int
    G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    APP_NOT_REGISTERED: int
    FILE_NOT_FOUND: int
    INVALID_URI: int
    INVALID_VALUE: int
    READ: int
    UNKNOWN_ENCODING: int
    URI_NOT_FOUND: int
    WRITE: int

class ByteArray(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    @staticmethod
    def free(array: list, free_segment: bool) -> int: ...
    @staticmethod
    def free_to_bytes(array: list) -> GLib.Bytes: ...
    @staticmethod
    def new() -> list: ...
    @staticmethod
    def new_take(data: list) -> list: ...
    @staticmethod
    def steal(array: list) -> tuple[int, None]: ...
    @staticmethod
    def unref(array: list): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    data: Incomplete
    len: Incomplete

class Bytes(__gi.Boxed):
    def compare(self, bytes2: GLib.Bytes) -> int: ...
    def copy(self, *args, **kwargs) -> None: ...
    def equal(self, bytes2: GLib.Bytes) -> bool: ...
    def get_data(self) -> Union[list, tuple[None, None]]: ...
    def get_region(self, element_size: int, offset: int, n_elements: int): ...
    def get_size(self) -> int: ...
    def hash(self) -> int: ...
    @staticmethod
    def new(data: list) -> GLib.Bytes: ...
    def new_from_bytes(self, offset: int, length: int) -> GLib.Bytes: ...
    @staticmethod
    def new_take(data: list) -> GLib.Bytes: ...
    def ref(self) -> GLib.Bytes: ...
    def unref(self) -> None: ...
    def unref_to_array(self) -> list: ...
    def unref_to_data(self) -> tuple[list, None]: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(data: list) -> GLib.Bytes: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Checksum(__gi.Boxed):
    def copy(self) -> GLib.Checksum: ...
    def free(self) -> None: ...
    def get_string(self) -> str: ...
    @staticmethod
    def new(checksum_type: GLib.ChecksumType) -> Union[GLib.Checksum, None]: ...
    def reset(self) -> None: ...
    @staticmethod
    def type_get_length(checksum_type: GLib.ChecksumType) -> int: ...
    def update(self, data: list): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(checksum_type: GLib.ChecksumType) -> Union[GLib.Checksum, None]: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ChecksumType(__gobject.GEnum):
    G_CHECKSUM_MD5: int
    G_CHECKSUM_SHA1: int
    G_CHECKSUM_SHA256: int
    G_CHECKSUM_SHA512: int
    G_CHECKSUM_SHA384: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    MD5: int
    SHA1: int
    SHA256: int
    SHA384: int
    SHA512: int

class Cond(__gi.Struct):
    def broadcast(self) -> None: ...
    def clear(self) -> None: ...
    def init(self) -> None: ...
    def signal(self) -> None: ...
    def wait(self, mutex: GLib.Mutex): ...
    def wait_until(self, mutex: GLib.Mutex, end_time: int) -> bool: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    i: Incomplete
    p: Incomplete

class ConvertError(__gobject.GEnum):
    G_CONVERT_ERROR_NO_CONVERSION: int
    G_CONVERT_ERROR_ILLEGAL_SEQUENCE: int
    G_CONVERT_ERROR_FAILED: int
    G_CONVERT_ERROR_PARTIAL_INPUT: int
    G_CONVERT_ERROR_BAD_URI: int
    G_CONVERT_ERROR_NOT_ABSOLUTE_PATH: int
    G_CONVERT_ERROR_NO_MEMORY: int
    G_CONVERT_ERROR_EMBEDDED_NUL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BAD_URI: int
    EMBEDDED_NUL: int
    FAILED: int
    ILLEGAL_SEQUENCE: int
    NOT_ABSOLUTE_PATH: int
    NO_CONVERSION: int
    NO_MEMORY: int
    PARTIAL_INPUT: int

class Data(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Date(__gi.Boxed):
    def add_days(self, n_days: int): ...
    def add_months(self, n_months: int): ...
    def add_years(self, n_years: int): ...
    def clamp(self, min_date: GLib.Date, max_date: GLib.Date): ...
    def clear(self, n_dates: int): ...
    def compare(self, rhs: GLib.Date) -> int: ...
    def copy(self) -> GLib.Date: ...
    def days_between(self, date2: GLib.Date) -> int: ...
    def free(self) -> None: ...
    def get_day(self) -> int: ...
    @staticmethod
    def get_days_in_month(month: GLib.DateMonth, year: int) -> int: ...
    def get_day_of_year(self) -> int: ...
    def get_iso8601_week_of_year(self) -> int: ...
    def get_julian(self) -> int: ...
    @staticmethod
    def get_monday_weeks_in_year(year: int) -> int: ...
    def get_monday_week_of_year(self) -> int: ...
    def get_month(self) -> GLib.DateMonth: ...
    @staticmethod
    def get_sunday_weeks_in_year(year: int) -> int: ...
    def get_sunday_week_of_year(self) -> int: ...
    def get_weekday(self) -> GLib.DateWeekday: ...
    def get_year(self) -> int: ...
    def is_first_of_month(self) -> bool: ...
    def is_last_of_month(self) -> bool: ...
    @staticmethod
    def is_leap_year(year: int) -> bool: ...
    @staticmethod
    def new() -> GLib.Date: ...
    @staticmethod
    def new_dmy(day: int, month: GLib.DateMonth, year: int) -> GLib.Date: ...
    @staticmethod
    def new_julian(julian_day: int) -> GLib.Date: ...
    def order(self, date2: GLib.Date): ...
    def set_day(self, day: int): ...
    def set_dmy(self, day: int, month: GLib.DateMonth, y: int): ...
    def set_julian(self, julian_date: int): ...
    def set_month(self, month: GLib.DateMonth): ...
    def set_parse(self, str: str): ...
    def set_time(self, time_: int): ...
    def set_time_t(self, timet: int): ...
    def set_time_val(self, timeval: GLib.TimeVal): ...
    def set_year(self, year: int): ...
    @staticmethod
    def strftime(s: str, slen: int, format: str, date: GLib.Date) -> int: ...
    def subtract_days(self, n_days: int): ...
    def subtract_months(self, n_months: int): ...
    def subtract_years(self, n_years: int): ...
    def to_struct_tm(self, tm) -> None: ...
    def valid(self) -> bool: ...
    @staticmethod
    def valid_day(day: int) -> bool: ...
    @staticmethod
    def valid_dmy(day: int, month: GLib.DateMonth, year: int) -> bool: ...
    @staticmethod
    def valid_julian(julian_date: int) -> bool: ...
    @staticmethod
    def valid_month(month: GLib.DateMonth) -> bool: ...
    @staticmethod
    def valid_weekday(weekday: GLib.DateWeekday) -> bool: ...
    @staticmethod
    def valid_year(year: int) -> bool: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__() -> GLib.Date: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    day: Incomplete
    dmy: Incomplete
    julian: Incomplete
    julian_days: Incomplete
    month: Incomplete
    year: Incomplete

class DateDMY(__gobject.GEnum):
    G_DATE_DAY: int
    G_DATE_MONTH: int
    G_DATE_YEAR: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    DAY: int
    MONTH: int
    YEAR: int

class DateMonth(__gobject.GEnum):
    G_DATE_BAD_MONTH: int
    G_DATE_JANUARY: int
    G_DATE_FEBRUARY: int
    G_DATE_MARCH: int
    G_DATE_APRIL: int
    G_DATE_MAY: int
    G_DATE_JUNE: int
    G_DATE_JULY: int
    G_DATE_AUGUST: int
    G_DATE_SEPTEMBER: int
    G_DATE_OCTOBER: int
    G_DATE_NOVEMBER: int
    G_DATE_DECEMBER: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    APRIL: int
    AUGUST: int
    BAD_MONTH: int
    DECEMBER: int
    FEBRUARY: int
    JANUARY: int
    JULY: int
    JUNE: int
    MARCH: int
    MAY: int
    NOVEMBER: int
    OCTOBER: int
    SEPTEMBER: int

class DateTime(__gi.Boxed):
    def add(self, timespan: int) -> Union[GLib.DateTime, None]: ...
    def add_days(self, days: int) -> Union[GLib.DateTime, None]: ...
    def add_full(self, years: int, months: int, days: int, hours: int, minutes: int, seconds: float) -> Union[GLib.DateTime, None]: ...
    def add_hours(self, hours: int) -> Union[GLib.DateTime, None]: ...
    def add_minutes(self, minutes: int) -> Union[GLib.DateTime, None]: ...
    def add_months(self, months: int) -> Union[GLib.DateTime, None]: ...
    def add_seconds(self, seconds: float) -> Union[GLib.DateTime, None]: ...
    def add_weeks(self, weeks: int) -> Union[GLib.DateTime, None]: ...
    def add_years(self, years: int) -> Union[GLib.DateTime, None]: ...
    def compare(self, dt2: GLib.DateTime) -> int: ...
    def copy(self, *args, **kwargs) -> None: ...
    def difference(self, begin: GLib.DateTime) -> int: ...
    def equal(self, dt2: GLib.DateTime) -> bool: ...
    def format(self, format: str) -> Union[str, None]: ...
    def format_iso8601(self) -> Union[str, None]: ...
    def get_day_of_month(self) -> int: ...
    def get_day_of_week(self) -> int: ...
    def get_day_of_year(self) -> int: ...
    def get_hour(self) -> int: ...
    def get_microsecond(self) -> int: ...
    def get_minute(self) -> int: ...
    def get_month(self) -> int: ...
    def get_second(self) -> int: ...
    def get_seconds(self) -> float: ...
    def get_timezone(self) -> GLib.TimeZone: ...
    def get_timezone_abbreviation(self) -> str: ...
    def get_utc_offset(self) -> int: ...
    def get_week_numbering_year(self) -> int: ...
    def get_week_of_year(self) -> int: ...
    def get_year(self) -> int: ...
    def get_ymd(self) -> tuple[None, None, None]: ...
    def hash(self) -> int: ...
    def is_daylight_savings(self) -> bool: ...
    @staticmethod
    def new(tz: GLib.TimeZone, year: int, month: int, day: int, hour: int, minute: int, seconds: float) -> Union[GLib.DateTime, None]: ...
    @staticmethod
    def new_from_iso8601(text: str, default_tz: GLib.TimeZone = ...) -> Union[GLib.DateTime, None]: ...
    @staticmethod
    def new_from_timeval_local(tv: GLib.TimeVal) -> Union[GLib.DateTime, None]: ...
    @staticmethod
    def new_from_timeval_utc(tv: GLib.TimeVal) -> Union[GLib.DateTime, None]: ...
    @staticmethod
    def new_from_unix_local(t: int) -> Union[GLib.DateTime, None]: ...
    @staticmethod
    def new_from_unix_utc(t: int) -> Union[GLib.DateTime, None]: ...
    @staticmethod
    def new_local(year: int, month: int, day: int, hour: int, minute: int, seconds: float) -> Union[GLib.DateTime, None]: ...
    @staticmethod
    def new_now(tz: GLib.TimeZone) -> Union[GLib.DateTime, None]: ...
    @staticmethod
    def new_now_local() -> Union[GLib.DateTime, None]: ...
    @staticmethod
    def new_now_utc() -> Union[GLib.DateTime, None]: ...
    @staticmethod
    def new_utc(year: int, month: int, day: int, hour: int, minute: int, seconds: float) -> Union[GLib.DateTime, None]: ...
    def ref(self) -> GLib.DateTime: ...
    def to_local(self) -> Union[GLib.DateTime, None]: ...
    def to_timeval(self, tv: GLib.TimeVal) -> bool: ...
    def to_timezone(self, tz: GLib.TimeZone) -> Union[GLib.DateTime, None]: ...
    def to_unix(self) -> int: ...
    def to_utc(self) -> Union[GLib.DateTime, None]: ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(tz: GLib.TimeZone, year: int, month: int, day: int, hour: int, minute: int, seconds: float) -> Union[GLib.DateTime, None]: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class DateWeekday(__gobject.GEnum):
    G_DATE_BAD_WEEKDAY: int
    G_DATE_MONDAY: int
    G_DATE_TUESDAY: int
    G_DATE_WEDNESDAY: int
    G_DATE_THURSDAY: int
    G_DATE_FRIDAY: int
    G_DATE_SATURDAY: int
    G_DATE_SUNDAY: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BAD_WEEKDAY: int
    FRIDAY: int
    MONDAY: int
    SATURDAY: int
    SUNDAY: int
    THURSDAY: int
    TUESDAY: int
    WEDNESDAY: int

class DebugKey(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    key: Incomplete
    value: Incomplete

class Dir(__gi.Struct):
    def close(self) -> None: ...
    @staticmethod
    def make_tmp(tmpl: str) -> str: ...
    def read_name(self) -> str: ...
    def rewind(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class DoubleIEEE754(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    v_double: Incomplete

class GError(RuntimeError):
    def copy(self) -> None: ...
    def matches(self, domain, code) -> None: ...
    def new_literal(domain, message, code) -> None: ...
    @staticmethod
    def with_traceback(tb) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, message: Incomplete | None = ..., domain: Incomplete | None = ..., code: int = ...) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    args: Incomplete
    __cause__: Incomplete
    __context__: Incomplete
    __suppress_context__: Incomplete
    __traceback__: Incomplete
Error = GError

class ErrorType(__gobject.GEnum):
    G_ERR_UNKNOWN: int
    G_ERR_UNEXP_EOF: int
    G_ERR_UNEXP_EOF_IN_STRING: int
    G_ERR_UNEXP_EOF_IN_COMMENT: int
    G_ERR_NON_DIGIT_IN_CONST: int
    G_ERR_DIGIT_RADIX: int
    G_ERR_FLOAT_RADIX: int
    G_ERR_FLOAT_MALFORMED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    DIGIT_RADIX: int
    FLOAT_MALFORMED: int
    FLOAT_RADIX: int
    NON_DIGIT_IN_CONST: int
    UNEXP_EOF: int
    UNEXP_EOF_IN_COMMENT: int
    UNEXP_EOF_IN_STRING: int
    UNKNOWN: int

class FileError(__gobject.GEnum):
    G_FILE_ERROR_EXIST: int
    G_FILE_ERROR_ISDIR: int
    G_FILE_ERROR_ACCES: int
    G_FILE_ERROR_NAMETOOLONG: int
    G_FILE_ERROR_NOENT: int
    G_FILE_ERROR_NOTDIR: int
    G_FILE_ERROR_NXIO: int
    G_FILE_ERROR_NODEV: int
    G_FILE_ERROR_ROFS: int
    G_FILE_ERROR_TXTBSY: int
    G_FILE_ERROR_FAULT: int
    G_FILE_ERROR_LOOP: int
    G_FILE_ERROR_NOSPC: int
    G_FILE_ERROR_NOMEM: int
    G_FILE_ERROR_MFILE: int
    G_FILE_ERROR_NFILE: int
    G_FILE_ERROR_BADF: int
    G_FILE_ERROR_INVAL: int
    G_FILE_ERROR_PIPE: int
    G_FILE_ERROR_AGAIN: int
    G_FILE_ERROR_INTR: int
    G_FILE_ERROR_IO: int
    G_FILE_ERROR_PERM: int
    G_FILE_ERROR_NOSYS: int
    G_FILE_ERROR_FAILED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ACCES: int
    AGAIN: int
    BADF: int
    EXIST: int
    FAILED: int
    FAULT: int
    INTR: int
    INVAL: int
    IO: int
    ISDIR: int
    LOOP: int
    MFILE: int
    NAMETOOLONG: int
    NFILE: int
    NODEV: int
    NOENT: int
    NOMEM: int
    NOSPC: int
    NOSYS: int
    NOTDIR: int
    NXIO: int
    PERM: int
    PIPE: int
    ROFS: int
    TXTBSY: int

class FileSetContentsFlags(__gobject.GFlags):
    G_FILE_SET_CONTENTS_NONE: int
    G_FILE_SET_CONTENTS_CONSISTENT: int
    G_FILE_SET_CONTENTS_DURABLE: int
    G_FILE_SET_CONTENTS_ONLY_EXISTING: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    CONSISTENT: int
    DURABLE: int
    NONE: int
    ONLY_EXISTING: int

class FileTest(__gobject.GFlags):
    G_FILE_TEST_IS_REGULAR: int
    G_FILE_TEST_IS_SYMLINK: int
    G_FILE_TEST_IS_DIR: int
    G_FILE_TEST_IS_EXECUTABLE: int
    G_FILE_TEST_EXISTS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    EXISTS: int
    IS_DIR: int
    IS_EXECUTABLE: int
    IS_REGULAR: int
    IS_SYMLINK: int

class FloatIEEE754(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    v_float: Incomplete

class FormatSizeFlags(__gobject.GFlags):
    G_FORMAT_SIZE_DEFAULT: int
    G_FORMAT_SIZE_LONG_FORMAT: int
    G_FORMAT_SIZE_IEC_UNITS: int
    G_FORMAT_SIZE_BITS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    BITS: int
    DEFAULT: int
    IEC_UNITS: int
    LONG_FORMAT: int

class HashTable(__gi.Boxed):
    @staticmethod
    def add(hash_table: dict, key) -> bool: ...
    @staticmethod
    def contains(hash_table: dict, key) -> bool: ...
    def copy(self, *args, **kwargs) -> None: ...
    @staticmethod
    def destroy(hash_table: dict): ...
    @staticmethod
    def insert(hash_table: dict, key, value) -> bool: ...
    @staticmethod
    def lookup(hash_table: dict, key: Incomplete | None = ...): ...
    @staticmethod
    def lookup_extended(hash_table: dict, lookup_key) -> tuple[bool, orig_key, value]: ...
    @staticmethod
    def new_similar(other_hash_table: dict) -> dict: ...
    @staticmethod
    def remove(hash_table: dict, key) -> bool: ...
    @staticmethod
    def remove_all(hash_table: dict): ...
    @staticmethod
    def replace(hash_table: dict, key, value) -> bool: ...
    @staticmethod
    def size(hash_table: dict) -> int: ...
    @staticmethod
    def steal(hash_table: dict, key) -> bool: ...
    @staticmethod
    def steal_all(hash_table: dict): ...
    @staticmethod
    def steal_extended(hash_table: dict, lookup_key) -> tuple[bool, stolen_key, stolen_value]: ...
    @staticmethod
    def unref(hash_table: dict): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class HashTableIter(__gi.Struct):
    def init(self, hash_table: dict): ...
    def next(self) -> tuple[bool, key, value]: ...
    def remove(self) -> None: ...
    def replace(self, value: Incomplete | None = ...) -> None: ...
    def steal(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    dummy1: Incomplete
    dummy2: Incomplete
    dummy3: Incomplete
    dummy4: Incomplete
    dummy5: Incomplete
    dummy6: Incomplete

class Hmac(__gi.Struct):
    def get_digest(self, buffer: list): ...
    def get_string(self) -> str: ...
    def unref(self) -> None: ...
    def update(self, data: list): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Hook(__gi.Struct):
    def compare_ids(self, sibling: GLib.Hook) -> int: ...
    @staticmethod
    def destroy(hook_list: GLib.HookList, hook_id: int) -> bool: ...
    @staticmethod
    def destroy_link(hook_list: GLib.HookList, hook: GLib.Hook): ...
    @staticmethod
    def free(hook_list: GLib.HookList, hook: GLib.Hook): ...
    @staticmethod
    def insert_before(hook_list: GLib.HookList, sibling: GLib.Hook, hook: GLib.Hook): ...
    @staticmethod
    def prepend(hook_list: GLib.HookList, hook: GLib.Hook): ...
    @staticmethod
    def unref(hook_list: GLib.HookList, hook: GLib.Hook): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    data: Incomplete
    flags: Incomplete
    func: Incomplete
    hook_id: Incomplete
    next: Incomplete
    prev: Incomplete
    ref_count: Incomplete

class HookFlagMask(__gobject.GFlags):
    G_HOOK_FLAG_ACTIVE: int
    G_HOOK_FLAG_IN_CALL: int
    G_HOOK_FLAG_MASK: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    ACTIVE: int
    IN_CALL: int
    MASK: int

class HookList(__gi.Struct):
    def clear(self) -> None: ...
    def init(self, hook_size: int): ...
    def invoke(self, may_recurse: bool): ...
    def invoke_check(self, may_recurse: bool): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    dummy: Incomplete
    dummy3: Incomplete
    finalize_hook: Incomplete
    hooks: Incomplete
    hook_size: Incomplete
    is_setup: Incomplete
    seq_id: Incomplete

class Source(Source):
    def add_child_source(self, child_source: GLib.Source): ...
    def add_poll(self, fd: GLib.PollFD): ...
    def attach(self, context: GLib.MainContext) -> int: ...
    def copy(self, *args, **kwargs) -> None: ...
    def destroy(self) -> None: ...
    def get_can_recurse(self) -> bool: ...
    def get_context(self) -> Union[GLib.MainContext, None]: ...
    def get_current_time(*args, **kwargs) -> None: ...
    def get_id(self) -> int: ...
    def get_name(self) -> Union[str, None]: ...
    def get_priority(self) -> int: ...
    def get_ready_time(self) -> int: ...
    def get_time(self) -> int: ...
    def is_destroyed(self) -> bool: ...
    @staticmethod
    def new(source_funcs: GLib.SourceFuncs, struct_size: int) -> GLib.Source: ...
    def ref(self) -> GLib.Source: ...
    @staticmethod
    def remove(tag: int) -> bool: ...
    @staticmethod
    def remove_by_funcs_user_data(funcs: GLib.SourceFuncs, user_data) -> bool: ...
    @staticmethod
    def remove_by_user_data(user_data) -> bool: ...
    def remove_child_source(self, child_source: GLib.Source): ...
    def remove_poll(self, fd: GLib.PollFD): ...
    def set_callback(self, fn, user_data: Incomplete | None = ...) -> None: ...
    def set_callback_indirect(self, callback_data, callback_funcs: GLib.SourceCallbackFuncs): ...
    def set_can_recurse(self, can_recurse: bool): ...
    def set_funcs(self, funcs: GLib.SourceFuncs): ...
    def set_name(self, name: str): ...
    @staticmethod
    def set_name_by_id(tag: int, name: str): ...
    def set_priority(self, priority: int): ...
    def set_ready_time(self, ready_time: int): ...
    def set_static_name(self, name: str): ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    def __del__(self) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(cls, *args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    callback_data: Incomplete
    callback_funcs: Incomplete
    can_recurse: Incomplete
    context: Incomplete
    flags: Incomplete
    name: Incomplete
    next: Incomplete
    poll_fds: Incomplete
    prev: Incomplete
    priority: Incomplete
    priv: Incomplete
    ref_count: Incomplete
    source_funcs: Incomplete
    source_id: Incomplete

class Idle(__gi_overrides_GLib.Source):
    def add_child_source(self, child_source: GLib.Source): ...
    def add_poll(self, fd: GLib.PollFD): ...
    def attach(self, context: GLib.MainContext) -> int: ...
    def copy(self, *args, **kwargs) -> None: ...
    def destroy(self) -> None: ...
    def get_can_recurse(self) -> bool: ...
    def get_context(self) -> Union[GLib.MainContext, None]: ...
    def get_current_time(*args, **kwargs) -> None: ...
    def get_id(self) -> int: ...
    def get_name(self) -> Union[str, None]: ...
    def get_priority(self) -> int: ...
    def get_ready_time(self) -> int: ...
    def get_time(self) -> int: ...
    def is_destroyed(self) -> bool: ...
    @staticmethod
    def new(source_funcs: GLib.SourceFuncs, struct_size: int) -> GLib.Source: ...
    def ref(self) -> GLib.Source: ...
    @staticmethod
    def remove(tag: int) -> bool: ...
    @staticmethod
    def remove_by_funcs_user_data(funcs: GLib.SourceFuncs, user_data) -> bool: ...
    @staticmethod
    def remove_by_user_data(user_data) -> bool: ...
    def remove_child_source(self, child_source: GLib.Source): ...
    def remove_poll(self, fd: GLib.PollFD): ...
    def set_callback(self, fn, user_data: Incomplete | None = ...) -> None: ...
    def set_callback_indirect(self, callback_data, callback_funcs: GLib.SourceCallbackFuncs): ...
    def set_can_recurse(self, can_recurse: bool): ...
    def set_funcs(self, funcs: GLib.SourceFuncs): ...
    def set_name(self, name: str): ...
    @staticmethod
    def set_name_by_id(tag: int, name: str): ...
    def set_priority(self, priority: int): ...
    def set_ready_time(self, ready_time: int): ...
    def set_static_name(self, name: str): ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    def __del__(self) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, priority: int = ...) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(cls, priority: int = ...) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    callback_data: Incomplete
    callback_funcs: Incomplete
    can_recurse: Incomplete
    context: Incomplete
    flags: Incomplete
    name: Incomplete
    next: Incomplete
    poll_fds: Incomplete
    prev: Incomplete
    priority: Incomplete
    priv: Incomplete
    ref_count: Incomplete
    source_funcs: Incomplete
    source_id: Incomplete

class IOChannel(IOChannel):
    def add_watch(*args, **kwargs) -> None: ...
    def close(self) -> None: ...
    def copy(self, *args, **kwargs) -> None: ...
    @staticmethod
    def error_from_errno(en: int) -> GLib.IOChannelError: ...
    @staticmethod
    def error_quark() -> int: ...
    def flush(self) -> GLib.IOStatus: ...
    def get_buffered(self) -> bool: ...
    def get_buffer_condition(self) -> GLib.IOCondition: ...
    def get_buffer_size(self) -> int: ...
    def get_close_on_unref(self) -> bool: ...
    def get_encoding(self) -> str: ...
    def get_flags(self) -> GLib.IOFlags: ...
    def get_line_term(self, length: int) -> str: ...
    def init(self) -> None: ...
    @staticmethod
    def new_file(filename: str, mode: str) -> GLib.IOChannel: ...
    def next(self) -> None: ...
    def read(self, max_count: int = ...) -> None: ...
    def readline(self, size_hint: int = ...) -> None: ...
    def readlines(self, size_hint: int = ...) -> None: ...
    def read_chars(self) -> tuple[GLib.IOStatus, None, None]: ...
    def read_line(self) -> tuple[GLib.IOStatus, None, None, None]: ...
    def read_line_string(self, buffer: GLib.String, terminator_pos: int) -> GLib.IOStatus: ...
    def read_to_end(self) -> tuple[GLib.IOStatus, None]: ...
    def read_unichar(self) -> tuple[GLib.IOStatus, None]: ...
    def ref(self) -> GLib.IOChannel: ...
    def seek(self, offset, whence: int = ...) -> None: ...
    def seek_position(self, offset: int, type: GLib.SeekType) -> GLib.IOStatus: ...
    def set_buffered(self, buffered: bool): ...
    def set_buffer_size(self, size: int): ...
    def set_close_on_unref(self, do_close: bool): ...
    def set_encoding(self, encoding: str) -> GLib.IOStatus: ...
    def set_flags(self, flags: GLib.IOFlags) -> GLib.IOStatus: ...
    def set_line_term(self, line_term: str, length: int): ...
    def shutdown(self, flush: bool) -> GLib.IOStatus: ...
    def unix_get_fd(self) -> int: ...
    @staticmethod
    def unix_new(fd: int) -> GLib.IOChannel: ...
    def unref(self) -> None: ...
    def win32_get_fd(self) -> int: ...
    def win32_make_pollfd(self, condition: GLib.IOCondition, fd: GLib.PollFD): ...
    @staticmethod
    def win32_new_fd(fd: int) -> GLib.IOChannel: ...
    @staticmethod
    def win32_new_messages(hwnd: int) -> GLib.IOChannel: ...
    @staticmethod
    def win32_new_socket(socket: int) -> GLib.IOChannel: ...
    @staticmethod
    def win32_new_stream_socket(socket: int) -> GLib.IOChannel: ...
    @staticmethod
    def win32_poll(fds: GLib.PollFD, n_fds: int, timeout_: int) -> int: ...
    def win32_set_debug(self, flag: bool): ...
    def write(self, buf, buflen: int = ...) -> None: ...
    def writelines(self, lines) -> None: ...
    def write_chars(self, buf: list, count: int) -> tuple[GLib.IOStatus, None]: ...
    def write_unichar(self, thechar: str) -> GLib.IOStatus: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(cls, filedes: Incomplete | None = ..., filename: Incomplete | None = ..., mode: Incomplete | None = ..., hwnd: Incomplete | None = ...) -> None: ...
    def __next__(self) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    buf_size: Incomplete
    close_on_unref: Incomplete
    do_encode: Incomplete
    encoded_read_buf: Incomplete
    encoding: Incomplete
    funcs: Incomplete
    is_readable: Incomplete
    is_seekable: Incomplete
    is_writeable: Incomplete
    line_term: Incomplete
    line_term_len: Incomplete
    partial_write_buf: Incomplete
    read_buf: Incomplete
    read_cd: Incomplete
    ref_count: Incomplete
    reserved1: Incomplete
    reserved2: Incomplete
    use_buffer: Incomplete
    write_buf: Incomplete
    write_cd: Incomplete

class IOChannelError(__gobject.GEnum):
    G_IO_CHANNEL_ERROR_FBIG: int
    G_IO_CHANNEL_ERROR_INVAL: int
    G_IO_CHANNEL_ERROR_IO: int
    G_IO_CHANNEL_ERROR_ISDIR: int
    G_IO_CHANNEL_ERROR_NOSPC: int
    G_IO_CHANNEL_ERROR_NXIO: int
    G_IO_CHANNEL_ERROR_OVERFLOW: int
    G_IO_CHANNEL_ERROR_PIPE: int
    G_IO_CHANNEL_ERROR_FAILED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    FAILED: int
    FBIG: int
    INVAL: int
    IO: int
    ISDIR: int
    NOSPC: int
    NXIO: int
    OVERFLOW: int
    PIPE: int

class IOCondition(__gobject.GFlags):
    G_IO_IN: int
    G_IO_OUT: int
    G_IO_PRI: int
    G_IO_ERR: int
    G_IO_HUP: int
    G_IO_NVAL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    ERR: int
    HUP: int
    IN: int
    NVAL: int
    OUT: int
    PRI: int

class IOError(__gobject.GEnum):
    G_IO_ERROR_NONE: int
    G_IO_ERROR_AGAIN: int
    G_IO_ERROR_INVAL: int
    G_IO_ERROR_UNKNOWN: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    AGAIN: int
    INVAL: int
    NONE: int
    UNKNOWN: int

class IOFlags(__gobject.GFlags):
    G_IO_FLAG_APPEND: int
    G_IO_FLAG_NONBLOCK: int
    G_IO_FLAG_IS_READABLE: int
    G_IO_FLAG_IS_WRITEABLE: int
    G_IO_FLAG_IS_SEEKABLE: int
    G_IO_FLAG_SET_MASK: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    APPEND: int
    GET_MASK: int
    IS_READABLE: int
    IS_SEEKABLE: int
    IS_WRITABLE: int
    IS_WRITEABLE: int
    MASK: int
    NONBLOCK: int
    SET_MASK: int

class IOFuncs(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    io_close: Incomplete
    io_create_watch: Incomplete
    io_free: Incomplete
    io_get_flags: Incomplete
    io_read: Incomplete
    io_seek: Incomplete
    io_set_flags: Incomplete
    io_write: Incomplete

class IOStatus(__gobject.GEnum):
    G_IO_STATUS_ERROR: int
    G_IO_STATUS_NORMAL: int
    G_IO_STATUS_EOF: int
    G_IO_STATUS_AGAIN: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    AGAIN: int
    EOF: int
    ERROR: int
    NORMAL: int

class KeyFile(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    @staticmethod
    def error_quark() -> int: ...
    def get_boolean(self, group_name: str, key: str) -> bool: ...
    def get_boolean_list(self, group_name: str, key: str) -> tuple[list, None]: ...
    def get_comment(self, group_name: str, key: str) -> str: ...
    def get_double(self, group_name: str, key: str) -> float: ...
    def get_double_list(self, group_name: str, key: str) -> tuple[list, None]: ...
    def get_groups(self) -> tuple[list, None]: ...
    def get_int64(self, group_name: str, key: str) -> int: ...
    def get_integer(self, group_name: str, key: str) -> int: ...
    def get_integer_list(self, group_name: str, key: str) -> tuple[list, None]: ...
    def get_keys(self, group_name: str) -> tuple[list, None]: ...
    def get_locale_for_key(self, group_name: str, key: str, locale: str = ...) -> Union[str, None]: ...
    def get_locale_string(self, group_name: str, key: str, locale: str) -> str: ...
    def get_locale_string_list(self, group_name: str, key: str, locale: str) -> tuple[list, None]: ...
    def get_start_group(self) -> Union[str, None]: ...
    def get_string(self, group_name: str, key: str) -> str: ...
    def get_string_list(self, group_name: str, key: str) -> tuple[list, None]: ...
    def get_uint64(self, group_name: str, key: str) -> int: ...
    def get_value(self, group_name: str, key: str) -> str: ...
    def has_group(self, group_name: str) -> bool: ...
    def load_from_bytes(self, bytes: GLib.Bytes, flags: GLib.KeyFileFlags) -> bool: ...
    def load_from_data(self, data: str, length: int, flags: GLib.KeyFileFlags) -> bool: ...
    def load_from_data_dirs(self, file: str, flags: GLib.KeyFileFlags) -> tuple[bool, None]: ...
    def load_from_dirs(self, file: str, search_dirs: list, flags: GLib.KeyFileFlags) -> tuple[bool, None]: ...
    def load_from_file(self, file: str, flags: GLib.KeyFileFlags) -> bool: ...
    @staticmethod
    def new() -> GLib.KeyFile: ...
    def remove_comment(self, group_name: str, key: str) -> bool: ...
    def remove_group(self, group_name: str) -> bool: ...
    def remove_key(self, group_name: str, key: str) -> bool: ...
    def save_to_file(self, filename: str) -> bool: ...
    def set_boolean(self, group_name: str, key: str, value: bool): ...
    def set_boolean_list(self, group_name: str, key: str, list: list): ...
    def set_comment(self, group_name: str, key: str, comment: str) -> bool: ...
    def set_double(self, group_name: str, key: str, value: float): ...
    def set_double_list(self, group_name: str, key: str, list: list): ...
    def set_int64(self, group_name: str, key: str, value: int): ...
    def set_integer(self, group_name: str, key: str, value: int): ...
    def set_integer_list(self, group_name: str, key: str, list: list): ...
    def set_list_separator(self, separator: int): ...
    def set_locale_string(self, group_name: str, key: str, locale: str, string: str): ...
    def set_locale_string_list(self, group_name: str, key: str, locale: str, list: list): ...
    def set_string(self, group_name: str, key: str, string: str): ...
    def set_string_list(self, group_name: str, key: str, list: list): ...
    def set_uint64(self, group_name: str, key: str, value: int): ...
    def set_value(self, group_name: str, key: str, value: str): ...
    def to_data(self) -> tuple[str, None]: ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__() -> GLib.KeyFile: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class KeyFileError(__gobject.GEnum):
    G_KEY_FILE_ERROR_UNKNOWN_ENCODING: int
    G_KEY_FILE_ERROR_PARSE: int
    G_KEY_FILE_ERROR_NOT_FOUND: int
    G_KEY_FILE_ERROR_KEY_NOT_FOUND: int
    G_KEY_FILE_ERROR_GROUP_NOT_FOUND: int
    G_KEY_FILE_ERROR_INVALID_VALUE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    GROUP_NOT_FOUND: int
    INVALID_VALUE: int
    KEY_NOT_FOUND: int
    NOT_FOUND: int
    PARSE: int
    UNKNOWN_ENCODING: int

class KeyFileFlags(__gobject.GFlags):
    G_KEY_FILE_NONE: int
    G_KEY_FILE_KEEP_COMMENTS: int
    G_KEY_FILE_KEEP_TRANSLATIONS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    KEEP_COMMENTS: int
    KEEP_TRANSLATIONS: int
    NONE: int

class List(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    data: Incomplete
    next: Incomplete
    prev: Incomplete

class LogField(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    key: Incomplete
    length: Incomplete
    value: Incomplete

class LogLevelFlags(__gobject.GFlags):
    G_LOG_FLAG_RECURSION: int
    G_LOG_FLAG_FATAL: int
    G_LOG_LEVEL_ERROR: int
    G_LOG_LEVEL_CRITICAL: int
    G_LOG_LEVEL_WARNING: int
    G_LOG_LEVEL_MESSAGE: int
    G_LOG_LEVEL_INFO: int
    G_LOG_LEVEL_DEBUG: int
    G_LOG_LEVEL_MASK: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    FLAG_FATAL: int
    FLAG_RECURSION: int
    LEVEL_CRITICAL: int
    LEVEL_DEBUG: int
    LEVEL_ERROR: int
    LEVEL_INFO: int
    LEVEL_MASK: int
    LEVEL_MESSAGE: int
    LEVEL_WARNING: int

class LogWriterOutput(__gobject.GEnum):
    G_LOG_WRITER_HANDLED: int
    G_LOG_WRITER_UNHANDLED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    HANDLED: int
    UNHANDLED: int

class MainContext(MainContext):
    def acquire(self) -> bool: ...
    def add_poll(self, fd: GLib.PollFD, priority: int): ...
    def check(self, max_priority: int, fds: list) -> bool: ...
    def copy(self, *args, **kwargs) -> None: ...
    @staticmethod
    def default() -> GLib.MainContext: ...
    def dispatch(self) -> None: ...
    def find_source_by_funcs_user_data(self, funcs: GLib.SourceFuncs, user_data) -> GLib.Source: ...
    def find_source_by_id(self, source_id: int) -> GLib.Source: ...
    def find_source_by_user_data(self, user_data) -> GLib.Source: ...
    @staticmethod
    def get_thread_default() -> Union[GLib.MainContext, None]: ...
    def invoke_full(self, priority: int, function: GLib.SourceFunc, data: Incomplete | None = ...): ...
    def is_owner(self) -> bool: ...
    def iteration(self, may_block: bool = ...) -> None: ...
    @staticmethod
    def new() -> GLib.MainContext: ...
    @staticmethod
    def new_with_flags(flags: GLib.MainContextFlags) -> GLib.MainContext: ...
    def pending(self) -> bool: ...
    def pop_thread_default(self) -> None: ...
    def prepare(self) -> tuple[bool, None]: ...
    def push_thread_default(self) -> None: ...
    def query(self, max_priority: int) -> tuple[int, None, None]: ...
    def ref(self) -> GLib.MainContext: ...
    @staticmethod
    def ref_thread_default() -> GLib.MainContext: ...
    def release(self) -> None: ...
    def remove_poll(self, fd: GLib.PollFD): ...
    def unref(self) -> None: ...
    def wait(self, cond: GLib.Cond, mutex: GLib.Mutex) -> bool: ...
    def wakeup(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__() -> GLib.MainContext: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class MainContextFlags(__gobject.GFlags):
    G_MAIN_CONTEXT_FLAGS_NONE: int
    G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    NONE: int
    OWNERLESS_POLLING: int

class MainLoop(MainLoop):
    def copy(self, *args, **kwargs) -> None: ...
    def get_context(self) -> GLib.MainContext: ...
    def is_running(self) -> bool: ...
    @staticmethod
    def new(context: GLib.MainContext, is_running: bool) -> GLib.MainLoop: ...
    def quit(self) -> None: ...
    def ref(self) -> GLib.MainLoop: ...
    def run(self) -> None: ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, context: Incomplete | None = ...) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(cls, context: Incomplete | None = ...) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class MappedFile(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def free(self) -> None: ...
    def get_bytes(self) -> GLib.Bytes: ...
    def get_contents(self) -> str: ...
    def get_length(self) -> int: ...
    @staticmethod
    def new(filename: str, writable: bool) -> GLib.MappedFile: ...
    @staticmethod
    def new_from_fd(fd: int, writable: bool) -> GLib.MappedFile: ...
    def ref(self) -> GLib.MappedFile: ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(filename: str, writable: bool) -> GLib.MappedFile: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class MarkupCollectType(__gobject.GFlags):
    G_MARKUP_COLLECT_INVALID: int
    G_MARKUP_COLLECT_STRING: int
    G_MARKUP_COLLECT_STRDUP: int
    G_MARKUP_COLLECT_BOOLEAN: int
    G_MARKUP_COLLECT_TRISTATE: int
    G_MARKUP_COLLECT_OPTIONAL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    BOOLEAN: int
    INVALID: int
    OPTIONAL: int
    STRDUP: int
    STRING: int
    TRISTATE: int

class MarkupError(__gobject.GEnum):
    G_MARKUP_ERROR_BAD_UTF8: int
    G_MARKUP_ERROR_EMPTY: int
    G_MARKUP_ERROR_PARSE: int
    G_MARKUP_ERROR_UNKNOWN_ELEMENT: int
    G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE: int
    G_MARKUP_ERROR_INVALID_CONTENT: int
    G_MARKUP_ERROR_MISSING_ATTRIBUTE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BAD_UTF8: int
    EMPTY: int
    INVALID_CONTENT: int
    MISSING_ATTRIBUTE: int
    PARSE: int
    UNKNOWN_ATTRIBUTE: int
    UNKNOWN_ELEMENT: int

class MarkupParseContext(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def end_parse(self) -> bool: ...
    def free(self) -> None: ...
    def get_element(self) -> str: ...
    def get_position(self) -> tuple[None, None]: ...
    def get_user_data(self) -> None: ...
    @staticmethod
    def new(parser: GLib.MarkupParser, flags: GLib.MarkupParseFlags, user_data, user_data_dnotify: GLib.DestroyNotify) -> GLib.MarkupParseContext: ...
    def parse(self, text: str, text_len: int) -> bool: ...
    def pop(self) -> None: ...
    def push(self, parser: GLib.MarkupParser, user_data: Incomplete | None = ...): ...
    def ref(self) -> GLib.MarkupParseContext: ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(parser: GLib.MarkupParser, flags: GLib.MarkupParseFlags, user_data, user_data_dnotify: GLib.DestroyNotify) -> GLib.MarkupParseContext: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class MarkupParseFlags(__gobject.GFlags):
    G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG: int
    G_MARKUP_TREAT_CDATA_AS_TEXT: int
    G_MARKUP_PREFIX_ERROR_POSITION: int
    G_MARKUP_IGNORE_QUALIFIED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    DO_NOT_USE_THIS_UNSUPPORTED_FLAG: int
    IGNORE_QUALIFIED: int
    PREFIX_ERROR_POSITION: int
    TREAT_CDATA_AS_TEXT: int

class MarkupParser(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    end_element: Incomplete
    error: Incomplete
    passthrough: Incomplete
    start_element: Incomplete
    text: Incomplete

class MatchInfo(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def expand_references(self, string_to_expand: str) -> Union[str, None]: ...
    def fetch(self, match_num: int) -> Union[str, None]: ...
    def fetch_all(self) -> list: ...
    def fetch_named(self, name: str) -> Union[str, None]: ...
    def fetch_named_pos(self, name: str) -> tuple[bool, None, None]: ...
    def fetch_pos(self, match_num: int) -> tuple[bool, None, None]: ...
    def free(self) -> None: ...
    def get_match_count(self) -> int: ...
    def get_regex(self) -> GLib.Regex: ...
    def get_string(self) -> str: ...
    def is_partial_match(self) -> bool: ...
    def matches(self) -> bool: ...
    def next(self) -> bool: ...
    def ref(self) -> GLib.MatchInfo: ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class MemVTable(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    calloc: Incomplete
    free: Incomplete
    malloc: Incomplete
    realloc: Incomplete
    try_malloc: Incomplete
    try_realloc: Incomplete

class Mutex(__gi.Struct):
    def clear(self) -> None: ...
    def init(self) -> None: ...
    def lock(self) -> None: ...
    def trylock(self) -> bool: ...
    def unlock(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    i: Incomplete
    p: Incomplete

class Node(__gi.Struct):
    def child_index(self, data) -> int: ...
    def child_position(self, child: GLib.Node) -> int: ...
    def depth(self) -> int: ...
    def destroy(self) -> None: ...
    def is_ancestor(self, descendant: GLib.Node) -> bool: ...
    def max_height(self) -> int: ...
    def n_children(self) -> int: ...
    def n_nodes(self, flags: GLib.TraverseFlags) -> int: ...
    def reverse_children(self) -> None: ...
    def unlink(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    children: Incomplete
    data: Incomplete
    next: Incomplete
    parent: Incomplete
    prev: Incomplete

class NormalizeMode(__gobject.GEnum):
    G_NORMALIZE_DEFAULT: int
    G_NORMALIZE_DEFAULT_COMPOSE: int
    G_NORMALIZE_ALL: int
    G_NORMALIZE_ALL_COMPOSE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ALL: int
    ALL_COMPOSE: int
    DEFAULT: int
    DEFAULT_COMPOSE: int
    NFC: int
    NFD: int
    NFKC: int
    NFKD: int

class NumberParserError(__gobject.GEnum):
    G_NUMBER_PARSER_ERROR_INVALID: int
    G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    INVALID: int
    OUT_OF_BOUNDS: int

class Once(__gi.Struct):
    @staticmethod
    def init_enter(location) -> bool: ...
    @staticmethod
    def init_leave(location, result: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    retval: Incomplete
    status: Incomplete

class OnceStatus(__gobject.GEnum):
    G_ONCE_STATUS_NOTCALLED: int
    G_ONCE_STATUS_PROGRESS: int
    G_ONCE_STATUS_READY: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    NOTCALLED: int
    PROGRESS: int
    READY: int

class OptionArg(__gobject.GEnum):
    G_OPTION_ARG_NONE: int
    G_OPTION_ARG_STRING: int
    G_OPTION_ARG_INT: int
    G_OPTION_ARG_CALLBACK: int
    G_OPTION_ARG_FILENAME: int
    G_OPTION_ARG_STRING_ARRAY: int
    G_OPTION_ARG_FILENAME_ARRAY: int
    G_OPTION_ARG_DOUBLE: int
    G_OPTION_ARG_INT64: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CALLBACK: int
    DOUBLE: int
    FILENAME: int
    FILENAME_ARRAY: int
    INT: int
    INT64: int
    NONE: int
    STRING: int
    STRING_ARRAY: int

class OptionEntry(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    arg: Incomplete
    arg_data: Incomplete
    arg_description: Incomplete
    description: Incomplete
    flags: Incomplete
    long_name: Incomplete
    short_name: Incomplete

class OptionError(__gobject.GEnum):
    G_OPTION_ERROR_UNKNOWN_OPTION: int
    G_OPTION_ERROR_BAD_VALUE: int
    G_OPTION_ERROR_FAILED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BAD_VALUE: int
    FAILED: int
    UNKNOWN_OPTION: int

class OptionFlags(__gobject.GFlags):
    G_OPTION_FLAG_NONE: int
    G_OPTION_FLAG_HIDDEN: int
    G_OPTION_FLAG_IN_MAIN: int
    G_OPTION_FLAG_REVERSE: int
    G_OPTION_FLAG_NO_ARG: int
    G_OPTION_FLAG_FILENAME: int
    G_OPTION_FLAG_OPTIONAL_ARG: int
    G_OPTION_FLAG_NOALIAS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    FILENAME: int
    HIDDEN: int
    IN_MAIN: int
    NOALIAS: int
    NONE: int
    NO_ARG: int
    OPTIONAL_ARG: int
    REVERSE: int

class PatternSpec(__gi.Boxed):
    def copy(self) -> GLib.PatternSpec: ...
    def equal(self, pspec2: GLib.PatternSpec) -> bool: ...
    def free(self) -> None: ...
    def match(self, string_length: int, string: str, string_reversed: str) -> bool: ...
    def match_string(self, string: str) -> bool: ...
    @staticmethod
    def new(pattern: str) -> GLib.PatternSpec: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(pattern: str) -> GLib.PatternSpec: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class PollFD(PollFD):
    def copy(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, fd, events) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(cls, fd, events) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    events: Incomplete
    fd: Incomplete
    revents: Incomplete

class Private(__gi.Struct):
    def get(self) -> None: ...
    def replace(self, value: Incomplete | None = ...) -> None: ...
    def set(self, value: Incomplete | None = ...) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    future: Incomplete
    notify: Incomplete
    p: Incomplete

class PtrArray(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    len: Incomplete
    pdata: Incomplete

class Queue(__gi.Struct):
    def clear(self) -> None: ...
    def clear_full(self, free_func: GLib.DestroyNotify = ...): ...
    def free(self) -> None: ...
    def free_full(self, free_func: GLib.DestroyNotify): ...
    def get_length(self) -> int: ...
    def index(self, data) -> int: ...
    def init(self) -> None: ...
    def is_empty(self) -> bool: ...
    def peek_head(self) -> None: ...
    def peek_nth(self, n: int): ...
    def peek_tail(self) -> None: ...
    def pop_head(self) -> None: ...
    def pop_nth(self, n: int): ...
    def pop_tail(self) -> None: ...
    def push_head(self, data: Incomplete | None = ...) -> None: ...
    def push_nth(self, data, n: int): ...
    def push_tail(self, data: Incomplete | None = ...) -> None: ...
    def remove(self, data) -> bool: ...
    def remove_all(self, data) -> int: ...
    def reverse(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    head: Incomplete
    length: Incomplete
    tail: Incomplete

class Rand(__gi.Struct):
    def double(self) -> float: ...
    def double_range(self, begin: float, end: float) -> float: ...
    def free(self) -> None: ...
    def int(self) -> int: ...
    def int_range(self, begin: int, end: int) -> int: ...
    def set_seed(self, seed: int): ...
    def set_seed_array(self, seed: int, seed_length: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class RecMutex(__gi.Struct):
    def clear(self) -> None: ...
    def init(self) -> None: ...
    def lock(self) -> None: ...
    def trylock(self) -> bool: ...
    def unlock(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    i: Incomplete
    p: Incomplete

class Regex(__gi.Boxed):
    @staticmethod
    def check_replacement(replacement: str) -> tuple[bool, None]: ...
    def copy(self, *args, **kwargs) -> None: ...
    @staticmethod
    def error_quark() -> int: ...
    @staticmethod
    def escape_nul(string: str, length: int) -> str: ...
    @staticmethod
    def escape_string(string: list) -> str: ...
    def get_capture_count(self) -> int: ...
    def get_compile_flags(self) -> GLib.RegexCompileFlags: ...
    def get_has_cr_or_lf(self) -> bool: ...
    def get_match_flags(self) -> GLib.RegexMatchFlags: ...
    def get_max_backref(self) -> int: ...
    def get_max_lookbehind(self) -> int: ...
    def get_pattern(self) -> str: ...
    def get_string_number(self, name: str) -> int: ...
    def match(self, string: str, match_options: GLib.RegexMatchFlags) -> tuple[bool, None]: ...
    def match_all(self, string: str, match_options: GLib.RegexMatchFlags) -> tuple[bool, None]: ...
    def match_all_full(self, string: list, start_position: int, match_options: GLib.RegexMatchFlags) -> tuple[bool, None]: ...
    def match_full(self, string: list, start_position: int, match_options: GLib.RegexMatchFlags) -> tuple[bool, None]: ...
    @staticmethod
    def match_simple(pattern: str, string: str, compile_options: GLib.RegexCompileFlags, match_options: GLib.RegexMatchFlags) -> bool: ...
    @staticmethod
    def new(pattern: str, compile_options: GLib.RegexCompileFlags, match_options: GLib.RegexMatchFlags) -> Union[GLib.Regex, None]: ...
    def ref(self) -> GLib.Regex: ...
    def replace(self, string: list, start_position: int, replacement: str, match_options: GLib.RegexMatchFlags) -> str: ...
    def replace_literal(self, string: list, start_position: int, replacement: str, match_options: GLib.RegexMatchFlags) -> str: ...
    def split(self, string: str, match_options: GLib.RegexMatchFlags) -> list: ...
    def split_full(self, string: list, start_position: int, match_options: GLib.RegexMatchFlags, max_tokens: int) -> list: ...
    @staticmethod
    def split_simple(pattern: str, string: str, compile_options: GLib.RegexCompileFlags, match_options: GLib.RegexMatchFlags) -> list: ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(pattern: str, compile_options: GLib.RegexCompileFlags, match_options: GLib.RegexMatchFlags) -> Union[GLib.Regex, None]: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class RegexCompileFlags(__gobject.GFlags):
    G_REGEX_CASELESS: int
    G_REGEX_MULTILINE: int
    G_REGEX_DOTALL: int
    G_REGEX_EXTENDED: int
    G_REGEX_ANCHORED: int
    G_REGEX_DOLLAR_ENDONLY: int
    G_REGEX_UNGREEDY: int
    G_REGEX_RAW: int
    G_REGEX_NO_AUTO_CAPTURE: int
    G_REGEX_OPTIMIZE: int
    G_REGEX_FIRSTLINE: int
    G_REGEX_DUPNAMES: int
    G_REGEX_NEWLINE_CR: int
    G_REGEX_NEWLINE_LF: int
    G_REGEX_NEWLINE_CRLF: int
    G_REGEX_NEWLINE_ANYCRLF: int
    G_REGEX_BSR_ANYCRLF: int
    G_REGEX_JAVASCRIPT_COMPAT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    ANCHORED: int
    BSR_ANYCRLF: int
    CASELESS: int
    DOLLAR_ENDONLY: int
    DOTALL: int
    DUPNAMES: int
    EXTENDED: int
    FIRSTLINE: int
    JAVASCRIPT_COMPAT: int
    MULTILINE: int
    NEWLINE_ANYCRLF: int
    NEWLINE_CR: int
    NEWLINE_CRLF: int
    NEWLINE_LF: int
    NO_AUTO_CAPTURE: int
    OPTIMIZE: int
    RAW: int
    UNGREEDY: int

class RegexError(__gobject.GEnum):
    G_REGEX_ERROR_COMPILE: int
    G_REGEX_ERROR_OPTIMIZE: int
    G_REGEX_ERROR_REPLACE: int
    G_REGEX_ERROR_MATCH: int
    G_REGEX_ERROR_INTERNAL: int
    G_REGEX_ERROR_STRAY_BACKSLASH: int
    G_REGEX_ERROR_MISSING_CONTROL_CHAR: int
    G_REGEX_ERROR_UNRECOGNIZED_ESCAPE: int
    G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER: int
    G_REGEX_ERROR_QUANTIFIER_TOO_BIG: int
    G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS: int
    G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS: int
    G_REGEX_ERROR_RANGE_OUT_OF_ORDER: int
    G_REGEX_ERROR_NOTHING_TO_REPEAT: int
    G_REGEX_ERROR_UNRECOGNIZED_CHARACTER: int
    G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS: int
    G_REGEX_ERROR_UNMATCHED_PARENTHESIS: int
    G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE: int
    G_REGEX_ERROR_UNTERMINATED_COMMENT: int
    G_REGEX_ERROR_EXPRESSION_TOO_LARGE: int
    G_REGEX_ERROR_MEMORY_ERROR: int
    G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND: int
    G_REGEX_ERROR_MALFORMED_CONDITION: int
    G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES: int
    G_REGEX_ERROR_ASSERTION_EXPECTED: int
    G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME: int
    G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED: int
    G_REGEX_ERROR_HEX_CODE_TOO_LARGE: int
    G_REGEX_ERROR_INVALID_CONDITION: int
    G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND: int
    G_REGEX_ERROR_INFINITE_LOOP: int
    G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR: int
    G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME: int
    G_REGEX_ERROR_MALFORMED_PROPERTY: int
    G_REGEX_ERROR_UNKNOWN_PROPERTY: int
    G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG: int
    G_REGEX_ERROR_TOO_MANY_SUBPATTERNS: int
    G_REGEX_ERROR_INVALID_OCTAL_VALUE: int
    G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE: int
    G_REGEX_ERROR_DEFINE_REPETION: int
    G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS: int
    G_REGEX_ERROR_MISSING_BACK_REFERENCE: int
    G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE: int
    G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN: int
    G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB: int
    G_REGEX_ERROR_NUMBER_TOO_BIG: int
    G_REGEX_ERROR_MISSING_SUBPATTERN_NAME: int
    G_REGEX_ERROR_MISSING_DIGIT: int
    G_REGEX_ERROR_INVALID_DATA_CHARACTER: int
    G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME: int
    G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED: int
    G_REGEX_ERROR_INVALID_CONTROL_CHAR: int
    G_REGEX_ERROR_MISSING_NAME: int
    G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS: int
    G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES: int
    G_REGEX_ERROR_NAME_TOO_LONG: int
    G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ASSERTION_EXPECTED: int
    BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN: int
    BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED: int
    CHARACTER_VALUE_TOO_LARGE: int
    COMPILE: int
    DEFINE_REPETION: int
    DUPLICATE_SUBPATTERN_NAME: int
    EXPRESSION_TOO_LARGE: int
    EXTRA_SUBPATTERN_NAME: int
    HEX_CODE_TOO_LARGE: int
    INCONSISTENT_NEWLINE_OPTIONS: int
    INEXISTENT_SUBPATTERN_REFERENCE: int
    INFINITE_LOOP: int
    INTERNAL: int
    INVALID_CONDITION: int
    INVALID_CONTROL_CHAR: int
    INVALID_DATA_CHARACTER: int
    INVALID_ESCAPE_IN_CHARACTER_CLASS: int
    INVALID_OCTAL_VALUE: int
    INVALID_RELATIVE_REFERENCE: int
    MALFORMED_CONDITION: int
    MALFORMED_PROPERTY: int
    MATCH: int
    MEMORY_ERROR: int
    MISSING_BACK_REFERENCE: int
    MISSING_CONTROL_CHAR: int
    MISSING_DIGIT: int
    MISSING_NAME: int
    MISSING_SUBPATTERN_NAME: int
    MISSING_SUBPATTERN_NAME_TERMINATOR: int
    NAME_TOO_LONG: int
    NOTHING_TO_REPEAT: int
    NOT_SUPPORTED_IN_CLASS: int
    NUMBER_TOO_BIG: int
    OPTIMIZE: int
    POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED: int
    POSIX_NAMED_CLASS_OUTSIDE_CLASS: int
    QUANTIFIERS_OUT_OF_ORDER: int
    QUANTIFIER_TOO_BIG: int
    RANGE_OUT_OF_ORDER: int
    REPLACE: int
    SINGLE_BYTE_MATCH_IN_LOOKBEHIND: int
    STRAY_BACKSLASH: int
    SUBPATTERN_NAME_TOO_LONG: int
    TOO_MANY_BRANCHES_IN_DEFINE: int
    TOO_MANY_CONDITIONAL_BRANCHES: int
    TOO_MANY_FORWARD_REFERENCES: int
    TOO_MANY_SUBPATTERNS: int
    UNKNOWN_BACKTRACKING_CONTROL_VERB: int
    UNKNOWN_POSIX_CLASS_NAME: int
    UNKNOWN_PROPERTY: int
    UNMATCHED_PARENTHESIS: int
    UNRECOGNIZED_CHARACTER: int
    UNRECOGNIZED_ESCAPE: int
    UNTERMINATED_CHARACTER_CLASS: int
    UNTERMINATED_COMMENT: int
    VARIABLE_LENGTH_LOOKBEHIND: int

class RegexMatchFlags(__gobject.GFlags):
    G_REGEX_MATCH_ANCHORED: int
    G_REGEX_MATCH_NOTBOL: int
    G_REGEX_MATCH_NOTEOL: int
    G_REGEX_MATCH_NOTEMPTY: int
    G_REGEX_MATCH_PARTIAL_SOFT: int
    G_REGEX_MATCH_NEWLINE_CR: int
    G_REGEX_MATCH_NEWLINE_LF: int
    G_REGEX_MATCH_NEWLINE_CRLF: int
    G_REGEX_MATCH_NEWLINE_ANY: int
    G_REGEX_MATCH_NEWLINE_ANYCRLF: int
    G_REGEX_MATCH_BSR_ANYCRLF: int
    G_REGEX_MATCH_BSR_ANY: int
    G_REGEX_MATCH_PARTIAL_HARD: int
    G_REGEX_MATCH_NOTEMPTY_ATSTART: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    ANCHORED: int
    BSR_ANY: int
    BSR_ANYCRLF: int
    NEWLINE_ANY: int
    NEWLINE_ANYCRLF: int
    NEWLINE_CR: int
    NEWLINE_CRLF: int
    NEWLINE_LF: int
    NOTBOL: int
    NOTEMPTY: int
    NOTEMPTY_ATSTART: int
    NOTEOL: int
    PARTIAL: int
    PARTIAL_HARD: int
    PARTIAL_SOFT: int

class RWLock(__gi.Struct):
    def clear(self) -> None: ...
    def init(self) -> None: ...
    def reader_lock(self) -> None: ...
    def reader_trylock(self) -> bool: ...
    def reader_unlock(self) -> None: ...
    def writer_lock(self) -> None: ...
    def writer_trylock(self) -> bool: ...
    def writer_unlock(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    i: Incomplete
    p: Incomplete

class Scanner(__gi.Struct):
    def cur_line(self) -> int: ...
    def cur_position(self) -> int: ...
    def cur_token(self) -> GLib.TokenType: ...
    def destroy(self) -> None: ...
    def eof(self) -> bool: ...
    def get_next_token(self) -> GLib.TokenType: ...
    def input_file(self, input_fd: int): ...
    def input_text(self, text: str, text_len: int): ...
    def lookup_symbol(self, symbol: str): ...
    def peek_next_token(self) -> GLib.TokenType: ...
    def scope_add_symbol(self, scope_id: int, symbol: str, value: Incomplete | None = ...): ...
    def scope_lookup_symbol(self, scope_id: int, symbol: str): ...
    def scope_remove_symbol(self, scope_id: int, symbol: str): ...
    def set_scope(self, scope_id: int) -> int: ...
    def sync_file_offset(self) -> None: ...
    def unexp_token(self, expected_token: GLib.TokenType, identifier_spec: str, symbol_spec: str, symbol_name: str, message: str, is_error: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    buffer: Incomplete
    config: Incomplete
    input_fd: Incomplete
    input_name: Incomplete
    line: Incomplete
    max_parse_errors: Incomplete
    msg_handler: Incomplete
    next_line: Incomplete
    next_position: Incomplete
    next_token: Incomplete
    next_value: Incomplete
    parse_errors: Incomplete
    position: Incomplete
    qdata: Incomplete
    scope_id: Incomplete
    symbol_table: Incomplete
    text: Incomplete
    text_end: Incomplete
    token: Incomplete
    user_data: Incomplete
    value: Incomplete

class ScannerConfig(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    case_sensitive: Incomplete
    char_2_token: Incomplete
    cpair_comment_single: Incomplete
    cset_identifier_first: Incomplete
    cset_identifier_nth: Incomplete
    cset_skip_characters: Incomplete
    identifier_2_string: Incomplete
    int_2_float: Incomplete
    numbers_2_int: Incomplete
    padding_dummy: Incomplete
    scan_binary: Incomplete
    scan_comment_multi: Incomplete
    scan_float: Incomplete
    scan_hex: Incomplete
    scan_hex_dollar: Incomplete
    scan_identifier: Incomplete
    scan_identifier_1char: Incomplete
    scan_identifier_NULL: Incomplete
    scan_octal: Incomplete
    scan_string_dq: Incomplete
    scan_string_sq: Incomplete
    scan_symbols: Incomplete
    scope_0_fallback: Incomplete
    skip_comment_multi: Incomplete
    skip_comment_single: Incomplete
    store_int64: Incomplete
    symbol_2_token: Incomplete

class SeekType(__gobject.GEnum):
    G_SEEK_CUR: int
    G_SEEK_SET: int
    G_SEEK_END: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CUR: int
    END: int
    SET: int

class Sequence(__gi.Struct):
    def append(self, data) -> GLib.SequenceIter: ...
    def free(self) -> None: ...
    @staticmethod
    def get(iter: GLib.SequenceIter): ...
    def get_begin_iter(self) -> GLib.SequenceIter: ...
    def get_end_iter(self) -> GLib.SequenceIter: ...
    def get_iter_at_pos(self, pos: int) -> GLib.SequenceIter: ...
    def get_length(self) -> int: ...
    @staticmethod
    def insert_before(iter: GLib.SequenceIter, data) -> GLib.SequenceIter: ...
    def is_empty(self) -> bool: ...
    @staticmethod
    def move(src: GLib.SequenceIter, dest: GLib.SequenceIter): ...
    @staticmethod
    def move_range(dest: GLib.SequenceIter, begin: GLib.SequenceIter, end: GLib.SequenceIter): ...
    def prepend(self, data) -> GLib.SequenceIter: ...
    @staticmethod
    def range_get_midpoint(begin: GLib.SequenceIter, end: GLib.SequenceIter) -> GLib.SequenceIter: ...
    @staticmethod
    def remove(iter: GLib.SequenceIter): ...
    @staticmethod
    def remove_range(begin: GLib.SequenceIter, end: GLib.SequenceIter): ...
    @staticmethod
    def set(iter: GLib.SequenceIter, data: Incomplete | None = ...): ...
    @staticmethod
    def swap(a: GLib.SequenceIter, b: GLib.SequenceIter): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class SequenceIter(__gi.Struct):
    def compare(self, b: GLib.SequenceIter) -> int: ...
    def get_position(self) -> int: ...
    def get_sequence(self) -> GLib.Sequence: ...
    def is_begin(self) -> bool: ...
    def is_end(self) -> bool: ...
    def move(self, delta: int) -> GLib.SequenceIter: ...
    def next(self) -> GLib.SequenceIter: ...
    def prev(self) -> GLib.SequenceIter: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ShellError(__gobject.GEnum):
    G_SHELL_ERROR_BAD_QUOTING: int
    G_SHELL_ERROR_EMPTY_STRING: int
    G_SHELL_ERROR_FAILED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BAD_QUOTING: int
    EMPTY_STRING: int
    FAILED: int

class SliceConfig(__gobject.GEnum):
    G_SLICE_CONFIG_ALWAYS_MALLOC: int
    G_SLICE_CONFIG_BYPASS_MAGAZINES: int
    G_SLICE_CONFIG_WORKING_SET_MSECS: int
    G_SLICE_CONFIG_COLOR_INCREMENT: int
    G_SLICE_CONFIG_CHUNK_SIZES: int
    G_SLICE_CONFIG_CONTENTION_COUNTER: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ALWAYS_MALLOC: int
    BYPASS_MAGAZINES: int
    CHUNK_SIZES: int
    COLOR_INCREMENT: int
    CONTENTION_COUNTER: int
    WORKING_SET_MSECS: int

class SList(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    data: Incomplete
    next: Incomplete

class SourceCallbackFuncs(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    get: Incomplete
    ref: Incomplete
    unref: Incomplete

class SourceFuncs(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    check: Incomplete
    closure_callback: Incomplete
    closure_marshal: Incomplete
    dispatch: Incomplete
    finalize: Incomplete
    prepare: Incomplete

class SourcePrivate(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class SpawnError(__gobject.GEnum):
    G_SPAWN_ERROR_FORK: int
    G_SPAWN_ERROR_READ: int
    G_SPAWN_ERROR_CHDIR: int
    G_SPAWN_ERROR_ACCES: int
    G_SPAWN_ERROR_PERM: int
    G_SPAWN_ERROR_TOO_BIG: int
    G_SPAWN_ERROR_NOEXEC: int
    G_SPAWN_ERROR_NAMETOOLONG: int
    G_SPAWN_ERROR_NOENT: int
    G_SPAWN_ERROR_NOMEM: int
    G_SPAWN_ERROR_NOTDIR: int
    G_SPAWN_ERROR_LOOP: int
    G_SPAWN_ERROR_TXTBUSY: int
    G_SPAWN_ERROR_IO: int
    G_SPAWN_ERROR_NFILE: int
    G_SPAWN_ERROR_MFILE: int
    G_SPAWN_ERROR_INVAL: int
    G_SPAWN_ERROR_ISDIR: int
    G_SPAWN_ERROR_LIBBAD: int
    G_SPAWN_ERROR_FAILED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete

class SpawnFlags(__gobject.GFlags):
    G_SPAWN_DEFAULT: int
    G_SPAWN_LEAVE_DESCRIPTORS_OPEN: int
    G_SPAWN_DO_NOT_REAP_CHILD: int
    G_SPAWN_SEARCH_PATH: int
    G_SPAWN_STDOUT_TO_DEV_NULL: int
    G_SPAWN_STDERR_TO_DEV_NULL: int
    G_SPAWN_CHILD_INHERITS_STDIN: int
    G_SPAWN_FILE_AND_ARGV_ZERO: int
    G_SPAWN_SEARCH_PATH_FROM_ENVP: int
    G_SPAWN_CLOEXEC_PIPES: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    CHILD_INHERITS_STDIN: int
    CLOEXEC_PIPES: int
    DEFAULT: int
    DO_NOT_REAP_CHILD: int
    FILE_AND_ARGV_ZERO: int
    LEAVE_DESCRIPTORS_OPEN: int
    SEARCH_PATH: int
    SEARCH_PATH_FROM_ENVP: int
    STDERR_TO_DEV_NULL: int
    STDOUT_TO_DEV_NULL: int

class StatBuf(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class String(__gi.Boxed):
    def append(self, val: str) -> GLib.String: ...
    def append_c(self, c: int) -> GLib.String: ...
    def append_len(self, val: str, len: int) -> GLib.String: ...
    def append_unichar(self, wc: str) -> GLib.String: ...
    def append_uri_escaped(self, unescaped: str, reserved_chars_allowed: str, allow_utf8: bool) -> GLib.String: ...
    def ascii_down(self) -> GLib.String: ...
    def ascii_up(self) -> GLib.String: ...
    def assign(self, rval: str) -> GLib.String: ...
    def copy(self, *args, **kwargs) -> None: ...
    def down(self) -> GLib.String: ...
    def equal(self, v2: GLib.String) -> bool: ...
    def erase(self, pos: int, len: int) -> GLib.String: ...
    def free(self, free_segment: bool) -> Union[str, None]: ...
    def free_to_bytes(self) -> GLib.Bytes: ...
    def hash(self) -> int: ...
    def insert(self, pos: int, val: str) -> GLib.String: ...
    def insert_c(self, pos: int, c: int) -> GLib.String: ...
    def insert_len(self, pos: int, val: str, len: int) -> GLib.String: ...
    def insert_unichar(self, pos: int, wc: str) -> GLib.String: ...
    @staticmethod
    def new(init: str) -> GLib.String: ...
    @staticmethod
    def new_len(init: str, len: int) -> GLib.String: ...
    def overwrite(self, pos: int, val: str) -> GLib.String: ...
    def overwrite_len(self, pos: int, val: str, len: int) -> GLib.String: ...
    def prepend(self, val: str) -> GLib.String: ...
    def prepend_c(self, c: int) -> GLib.String: ...
    def prepend_len(self, val: str, len: int) -> GLib.String: ...
    def prepend_unichar(self, wc: str) -> GLib.String: ...
    def replace(self, find: str, replace: str, limit: int) -> int: ...
    def set_size(self, len: int) -> GLib.String: ...
    @staticmethod
    def sized_new(dfl_size: int) -> GLib.String: ...
    def truncate(self, len: int) -> GLib.String: ...
    def up(self) -> GLib.String: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    allocated_len: Incomplete
    len: Incomplete
    str: Incomplete

class StringChunk(__gi.Struct):
    def clear(self) -> None: ...
    def free(self) -> None: ...
    def insert(self, string: str) -> str: ...
    def insert_const(self, string: str) -> str: ...
    def insert_len(self, string: str, len: int) -> str: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class StrvBuilder(__gi.Struct):
    def add(self, value: str): ...
    def addv(self, value: list): ...
    def end(self) -> list: ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class TestCase(__gi.Struct):
    def free(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class TestConfig(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    test_initialized: Incomplete
    test_perf: Incomplete
    test_quick: Incomplete
    test_quiet: Incomplete
    test_undefined: Incomplete
    test_verbose: Incomplete

class TestFileType(__gobject.GEnum):
    G_TEST_DIST: int
    G_TEST_BUILT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BUILT: int
    DIST: int

class TestLogBuffer(__gi.Struct):
    def free(self) -> None: ...
    def push(self, n_bytes: int, bytes: int): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    data: Incomplete
    msgs: Incomplete

class TestLogMsg(__gi.Struct):
    def free(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    log_type: Incomplete
    nums: Incomplete
    n_nums: Incomplete
    n_strings: Incomplete
    strings: Incomplete

class TestLogType(__gobject.GEnum):
    G_TEST_LOG_NONE: int
    G_TEST_LOG_ERROR: int
    G_TEST_LOG_START_BINARY: int
    G_TEST_LOG_LIST_CASE: int
    G_TEST_LOG_SKIP_CASE: int
    G_TEST_LOG_START_CASE: int
    G_TEST_LOG_STOP_CASE: int
    G_TEST_LOG_MIN_RESULT: int
    G_TEST_LOG_MAX_RESULT: int
    G_TEST_LOG_MESSAGE: int
    G_TEST_LOG_START_SUITE: int
    G_TEST_LOG_STOP_SUITE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ERROR: int
    LIST_CASE: int
    MAX_RESULT: int
    MESSAGE: int
    MIN_RESULT: int
    NONE: int
    SKIP_CASE: int
    START_BINARY: int
    START_CASE: int
    START_SUITE: int
    STOP_CASE: int
    STOP_SUITE: int

class TestResult(__gobject.GEnum):
    G_TEST_RUN_SUCCESS: int
    G_TEST_RUN_SKIPPED: int
    G_TEST_RUN_FAILURE: int
    G_TEST_RUN_INCOMPLETE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    FAILURE: int
    INCOMPLETE: int
    SKIPPED: int
    SUCCESS: int

class TestSubprocessFlags(__gobject.GFlags):
    G_TEST_SUBPROCESS_INHERIT_STDIN: int
    G_TEST_SUBPROCESS_INHERIT_STDOUT: int
    G_TEST_SUBPROCESS_INHERIT_STDERR: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    STDERR: int
    STDIN: int
    STDOUT: int

class TestSuite(__gi.Struct):
    def add(self, test_case: GLib.TestCase): ...
    def add_suite(self, nestedsuite: GLib.TestSuite): ...
    def free(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class TestTrapFlags(__gobject.GFlags):
    G_TEST_TRAP_SILENCE_STDOUT: int
    G_TEST_TRAP_SILENCE_STDERR: int
    G_TEST_TRAP_INHERIT_STDIN: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    INHERIT_STDIN: int
    SILENCE_STDERR: int
    SILENCE_STDOUT: int

class Thread(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    @staticmethod
    def error_quark() -> int: ...
    @staticmethod
    def exit(retval: Incomplete | None = ...) -> None: ...
    def join(self) -> None: ...
    @staticmethod
    def new(name: str, func: GLib.ThreadFunc, data) -> GLib.Thread: ...
    def ref(self) -> GLib.Thread: ...
    @staticmethod
    def self() -> GLib.Thread: ...
    @staticmethod
    def try_new(name: str, func: GLib.ThreadFunc, data) -> GLib.Thread: ...
    def unref(self) -> None: ...
    @staticmethod
    def yield_() -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(name: str, func: GLib.ThreadFunc, data) -> GLib.Thread: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class ThreadError(__gobject.GEnum):
    G_THREAD_ERROR_AGAIN: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    THREAD_ERROR_AGAIN: int

class ThreadPool(__gi.Struct):
    def free(self, immediate: bool, wait_: bool): ...
    @staticmethod
    def get_max_idle_time() -> int: ...
    def get_max_threads(self) -> int: ...
    @staticmethod
    def get_max_unused_threads() -> int: ...
    def get_num_threads(self) -> int: ...
    @staticmethod
    def get_num_unused_threads() -> int: ...
    def move_to_front(self, data) -> bool: ...
    def push(self, data) -> bool: ...
    @staticmethod
    def set_max_idle_time(interval: int): ...
    def set_max_threads(self, max_threads: int) -> bool: ...
    @staticmethod
    def set_max_unused_threads(max_threads: int): ...
    @staticmethod
    def stop_unused_threads() -> None: ...
    def unprocessed(self) -> int: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    exclusive: Incomplete
    func: Incomplete
    user_data: Incomplete

class Timeout(__gi_overrides_GLib.Source):
    def add_child_source(self, child_source: GLib.Source): ...
    def add_poll(self, fd: GLib.PollFD): ...
    def attach(self, context: GLib.MainContext) -> int: ...
    def copy(self, *args, **kwargs) -> None: ...
    def destroy(self) -> None: ...
    def get_can_recurse(self) -> bool: ...
    def get_context(self) -> Union[GLib.MainContext, None]: ...
    def get_current_time(*args, **kwargs) -> None: ...
    def get_id(self) -> int: ...
    def get_name(self) -> Union[str, None]: ...
    def get_priority(self) -> int: ...
    def get_ready_time(self) -> int: ...
    def get_time(self) -> int: ...
    def is_destroyed(self) -> bool: ...
    @staticmethod
    def new(source_funcs: GLib.SourceFuncs, struct_size: int) -> GLib.Source: ...
    def ref(self) -> GLib.Source: ...
    @staticmethod
    def remove(tag: int) -> bool: ...
    @staticmethod
    def remove_by_funcs_user_data(funcs: GLib.SourceFuncs, user_data) -> bool: ...
    @staticmethod
    def remove_by_user_data(user_data) -> bool: ...
    def remove_child_source(self, child_source: GLib.Source): ...
    def remove_poll(self, fd: GLib.PollFD): ...
    def set_callback(self, fn, user_data: Incomplete | None = ...) -> None: ...
    def set_callback_indirect(self, callback_data, callback_funcs: GLib.SourceCallbackFuncs): ...
    def set_can_recurse(self, can_recurse: bool): ...
    def set_funcs(self, funcs: GLib.SourceFuncs): ...
    def set_name(self, name: str): ...
    @staticmethod
    def set_name_by_id(tag: int, name: str): ...
    def set_priority(self, priority: int): ...
    def set_ready_time(self, ready_time: int): ...
    def set_static_name(self, name: str): ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    def __del__(self) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, interval: int = ..., priority: int = ...) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(cls, interval: int = ..., priority: int = ...) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    callback_data: Incomplete
    callback_funcs: Incomplete
    can_recurse: Incomplete
    context: Incomplete
    flags: Incomplete
    name: Incomplete
    next: Incomplete
    poll_fds: Incomplete
    prev: Incomplete
    priority: Incomplete
    priv: Incomplete
    ref_count: Incomplete
    source_funcs: Incomplete
    source_id: Incomplete

class Timer(__gi.Struct):
    def continue_(self) -> None: ...
    def destroy(self) -> None: ...
    def elapsed(self, microseconds: int) -> float: ...
    def is_active(self) -> bool: ...
    def reset(self) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class TimeType(__gobject.GEnum):
    G_TIME_TYPE_STANDARD: int
    G_TIME_TYPE_DAYLIGHT: int
    G_TIME_TYPE_UNIVERSAL: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    DAYLIGHT: int
    STANDARD: int
    UNIVERSAL: int

class TimeVal(__gi.Struct):
    def add(self, microseconds: int): ...
    @staticmethod
    def from_iso8601(iso_date: str) -> tuple[bool, None]: ...
    def to_iso8601(self) -> Union[str, None]: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    tv_sec: Incomplete
    tv_usec: Incomplete

class TimeZone(__gi.Boxed):
    def adjust_time(self, type: GLib.TimeType, time_: int) -> int: ...
    def copy(self, *args, **kwargs) -> None: ...
    def find_interval(self, type: GLib.TimeType, time_: int) -> int: ...
    def get_abbreviation(self, interval: int) -> str: ...
    def get_identifier(self) -> str: ...
    def get_offset(self, interval: int) -> int: ...
    def is_dst(self, interval: int) -> bool: ...
    @staticmethod
    def new(identifier: str) -> GLib.TimeZone: ...
    @staticmethod
    def new_identifier(identifier: str = ...) -> Union[GLib.TimeZone, None]: ...
    @staticmethod
    def new_local() -> GLib.TimeZone: ...
    @staticmethod
    def new_offset(seconds: int) -> GLib.TimeZone: ...
    @staticmethod
    def new_utc() -> GLib.TimeZone: ...
    def ref(self) -> GLib.TimeZone: ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(identifier: str) -> GLib.TimeZone: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class TokenType(__gobject.GEnum):
    G_TOKEN_EOF: int
    G_TOKEN_LEFT_PAREN: int
    G_TOKEN_RIGHT_PAREN: int
    G_TOKEN_LEFT_CURLY: int
    G_TOKEN_RIGHT_CURLY: int
    G_TOKEN_LEFT_BRACE: int
    G_TOKEN_RIGHT_BRACE: int
    G_TOKEN_EQUAL_SIGN: int
    G_TOKEN_COMMA: int
    G_TOKEN_NONE: int
    G_TOKEN_ERROR: int
    G_TOKEN_CHAR: int
    G_TOKEN_BINARY: int
    G_TOKEN_OCTAL: int
    G_TOKEN_INT: int
    G_TOKEN_HEX: int
    G_TOKEN_FLOAT: int
    G_TOKEN_STRING: int
    G_TOKEN_SYMBOL: int
    G_TOKEN_IDENTIFIER: int
    G_TOKEN_IDENTIFIER_NULL: int
    G_TOKEN_COMMENT_SINGLE: int
    G_TOKEN_COMMENT_MULTI: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BINARY: int
    CHAR: int
    COMMA: int
    COMMENT_MULTI: int
    COMMENT_SINGLE: int
    EOF: int
    EQUAL_SIGN: int
    ERROR: int
    FLOAT: int
    HEX: int
    IDENTIFIER: int
    IDENTIFIER_NULL: int
    INT: int
    LEFT_BRACE: int
    LEFT_CURLY: int
    LEFT_PAREN: int
    NONE: int
    OCTAL: int
    RIGHT_BRACE: int
    RIGHT_CURLY: int
    RIGHT_PAREN: int
    STRING: int
    SYMBOL: int

class TokenValue(__gi.Struct):
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    v_binary: Incomplete
    v_char: Incomplete
    v_comment: Incomplete
    v_error: Incomplete
    v_float: Incomplete
    v_hex: Incomplete
    v_identifier: Incomplete
    v_int: Incomplete
    v_int64: Incomplete
    v_octal: Incomplete
    v_string: Incomplete
    v_symbol: Incomplete

class TrashStack(__gi.Struct):
    @staticmethod
    def height(stack_p: GLib.TrashStack) -> int: ...
    @staticmethod
    def peek(stack_p: GLib.TrashStack): ...
    @staticmethod
    def pop(stack_p: GLib.TrashStack): ...
    @staticmethod
    def push(stack_p: GLib.TrashStack, data_p): ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    next: Incomplete

class TraverseFlags(__gobject.GFlags):
    G_TRAVERSE_LEAFS: int
    G_TRAVERSE_NON_LEAFS: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    ALL: int
    LEAFS: int
    LEAVES: int
    MASK: int
    NON_LEAFS: int
    NON_LEAVES: int

class TraverseType(__gobject.GEnum):
    G_IN_ORDER: int
    G_PRE_ORDER: int
    G_POST_ORDER: int
    G_LEVEL_ORDER: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    IN_ORDER: int
    LEVEL_ORDER: int
    POST_ORDER: int
    PRE_ORDER: int

class Tree(__gi.Boxed):
    def copy(self, *args, **kwargs) -> None: ...
    def destroy(self) -> None: ...
    def height(self) -> int: ...
    def insert(self, key: Incomplete | None = ..., value: Incomplete | None = ...) -> None: ...
    def insert_node(self, key, value) -> GLib.TreeNode: ...
    def lookup(self, key: Incomplete | None = ...) -> None: ...
    def lookup_extended(self, lookup_key) -> tuple[bool, orig_key, value]: ...
    def lookup_node(self, key: Incomplete | None = ...) -> Union[GLib.TreeNode, None]: ...
    def lower_bound(self, key: Incomplete | None = ...) -> Union[GLib.TreeNode, None]: ...
    @staticmethod
    def new_full(key_compare_func: GLib.CompareDataFunc, key_compare_data, key_destroy_func: GLib.DestroyNotify) -> GLib.Tree: ...
    def nnodes(self) -> int: ...
    def node_first(self) -> Union[GLib.TreeNode, None]: ...
    def node_last(self) -> Union[GLib.TreeNode, None]: ...
    def ref(self) -> GLib.Tree: ...
    def remove(self, key) -> bool: ...
    def remove_all(self) -> None: ...
    def replace(self, key: Incomplete | None = ..., value: Incomplete | None = ...) -> None: ...
    def replace_node(self, key, value) -> GLib.TreeNode: ...
    def steal(self, key) -> bool: ...
    def unref(self) -> None: ...
    def upper_bound(self, key: Incomplete | None = ...) -> Union[GLib.TreeNode, None]: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class TreeNode(__gi.Struct):
    def key(self) -> None: ...
    def next(self) -> Union[GLib.TreeNode, None]: ...
    def previous(self) -> Union[GLib.TreeNode, None]: ...
    def value(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class UnicodeBreakType(__gobject.GEnum):
    G_UNICODE_BREAK_MANDATORY: int
    G_UNICODE_BREAK_CARRIAGE_RETURN: int
    G_UNICODE_BREAK_LINE_FEED: int
    G_UNICODE_BREAK_COMBINING_MARK: int
    G_UNICODE_BREAK_SURROGATE: int
    G_UNICODE_BREAK_ZERO_WIDTH_SPACE: int
    G_UNICODE_BREAK_INSEPARABLE: int
    G_UNICODE_BREAK_NON_BREAKING_GLUE: int
    G_UNICODE_BREAK_CONTINGENT: int
    G_UNICODE_BREAK_SPACE: int
    G_UNICODE_BREAK_AFTER: int
    G_UNICODE_BREAK_BEFORE: int
    G_UNICODE_BREAK_BEFORE_AND_AFTER: int
    G_UNICODE_BREAK_HYPHEN: int
    G_UNICODE_BREAK_NON_STARTER: int
    G_UNICODE_BREAK_OPEN_PUNCTUATION: int
    G_UNICODE_BREAK_CLOSE_PUNCTUATION: int
    G_UNICODE_BREAK_QUOTATION: int
    G_UNICODE_BREAK_EXCLAMATION: int
    G_UNICODE_BREAK_IDEOGRAPHIC: int
    G_UNICODE_BREAK_NUMERIC: int
    G_UNICODE_BREAK_INFIX_SEPARATOR: int
    G_UNICODE_BREAK_SYMBOL: int
    G_UNICODE_BREAK_ALPHABETIC: int
    G_UNICODE_BREAK_PREFIX: int
    G_UNICODE_BREAK_POSTFIX: int
    G_UNICODE_BREAK_COMPLEX_CONTEXT: int
    G_UNICODE_BREAK_AMBIGUOUS: int
    G_UNICODE_BREAK_UNKNOWN: int
    G_UNICODE_BREAK_NEXT_LINE: int
    G_UNICODE_BREAK_WORD_JOINER: int
    G_UNICODE_BREAK_HANGUL_L_JAMO: int
    G_UNICODE_BREAK_HANGUL_V_JAMO: int
    G_UNICODE_BREAK_HANGUL_T_JAMO: int
    G_UNICODE_BREAK_HANGUL_LV_SYLLABLE: int
    G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE: int
    G_UNICODE_BREAK_CLOSE_PARANTHESIS: int
    G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER: int
    G_UNICODE_BREAK_HEBREW_LETTER: int
    G_UNICODE_BREAK_REGIONAL_INDICATOR: int
    G_UNICODE_BREAK_EMOJI_BASE: int
    G_UNICODE_BREAK_EMOJI_MODIFIER: int
    G_UNICODE_BREAK_ZERO_WIDTH_JOINER: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    AFTER: int
    ALPHABETIC: int
    AMBIGUOUS: int
    BEFORE: int
    BEFORE_AND_AFTER: int
    CARRIAGE_RETURN: int
    CLOSE_PARANTHESIS: int
    CLOSE_PARENTHESIS: int
    CLOSE_PUNCTUATION: int
    COMBINING_MARK: int
    COMPLEX_CONTEXT: int
    CONDITIONAL_JAPANESE_STARTER: int
    CONTINGENT: int
    EMOJI_BASE: int
    EMOJI_MODIFIER: int
    EXCLAMATION: int
    HANGUL_LVT_SYLLABLE: int
    HANGUL_LV_SYLLABLE: int
    HANGUL_L_JAMO: int
    HANGUL_T_JAMO: int
    HANGUL_V_JAMO: int
    HEBREW_LETTER: int
    HYPHEN: int
    IDEOGRAPHIC: int
    INFIX_SEPARATOR: int
    INSEPARABLE: int
    LINE_FEED: int
    MANDATORY: int
    NEXT_LINE: int
    NON_BREAKING_GLUE: int
    NON_STARTER: int
    NUMERIC: int
    OPEN_PUNCTUATION: int
    POSTFIX: int
    PREFIX: int
    QUOTATION: int
    REGIONAL_INDICATOR: int
    SPACE: int
    SURROGATE: int
    SYMBOL: int
    UNKNOWN: int
    WORD_JOINER: int
    ZERO_WIDTH_JOINER: int
    ZERO_WIDTH_SPACE: int

class UnicodeScript(__gobject.GEnum):
    G_UNICODE_SCRIPT_INVALID_CODE: int
    G_UNICODE_SCRIPT_COMMON: int
    G_UNICODE_SCRIPT_INHERITED: int
    G_UNICODE_SCRIPT_ARABIC: int
    G_UNICODE_SCRIPT_ARMENIAN: int
    G_UNICODE_SCRIPT_BENGALI: int
    G_UNICODE_SCRIPT_BOPOMOFO: int
    G_UNICODE_SCRIPT_CHEROKEE: int
    G_UNICODE_SCRIPT_COPTIC: int
    G_UNICODE_SCRIPT_CYRILLIC: int
    G_UNICODE_SCRIPT_DESERET: int
    G_UNICODE_SCRIPT_DEVANAGARI: int
    G_UNICODE_SCRIPT_ETHIOPIC: int
    G_UNICODE_SCRIPT_GEORGIAN: int
    G_UNICODE_SCRIPT_GOTHIC: int
    G_UNICODE_SCRIPT_GREEK: int
    G_UNICODE_SCRIPT_GUJARATI: int
    G_UNICODE_SCRIPT_GURMUKHI: int
    G_UNICODE_SCRIPT_HAN: int
    G_UNICODE_SCRIPT_HANGUL: int
    G_UNICODE_SCRIPT_HEBREW: int
    G_UNICODE_SCRIPT_HIRAGANA: int
    G_UNICODE_SCRIPT_KANNADA: int
    G_UNICODE_SCRIPT_KATAKANA: int
    G_UNICODE_SCRIPT_KHMER: int
    G_UNICODE_SCRIPT_LAO: int
    G_UNICODE_SCRIPT_LATIN: int
    G_UNICODE_SCRIPT_MALAYALAM: int
    G_UNICODE_SCRIPT_MONGOLIAN: int
    G_UNICODE_SCRIPT_MYANMAR: int
    G_UNICODE_SCRIPT_OGHAM: int
    G_UNICODE_SCRIPT_OLD_ITALIC: int
    G_UNICODE_SCRIPT_ORIYA: int
    G_UNICODE_SCRIPT_RUNIC: int
    G_UNICODE_SCRIPT_SINHALA: int
    G_UNICODE_SCRIPT_SYRIAC: int
    G_UNICODE_SCRIPT_TAMIL: int
    G_UNICODE_SCRIPT_TELUGU: int
    G_UNICODE_SCRIPT_THAANA: int
    G_UNICODE_SCRIPT_THAI: int
    G_UNICODE_SCRIPT_TIBETAN: int
    G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL: int
    G_UNICODE_SCRIPT_YI: int
    G_UNICODE_SCRIPT_TAGALOG: int
    G_UNICODE_SCRIPT_HANUNOO: int
    G_UNICODE_SCRIPT_BUHID: int
    G_UNICODE_SCRIPT_TAGBANWA: int
    G_UNICODE_SCRIPT_BRAILLE: int
    G_UNICODE_SCRIPT_CYPRIOT: int
    G_UNICODE_SCRIPT_LIMBU: int
    G_UNICODE_SCRIPT_OSMANYA: int
    G_UNICODE_SCRIPT_SHAVIAN: int
    G_UNICODE_SCRIPT_LINEAR_B: int
    G_UNICODE_SCRIPT_TAI_LE: int
    G_UNICODE_SCRIPT_UGARITIC: int
    G_UNICODE_SCRIPT_NEW_TAI_LUE: int
    G_UNICODE_SCRIPT_BUGINESE: int
    G_UNICODE_SCRIPT_GLAGOLITIC: int
    G_UNICODE_SCRIPT_TIFINAGH: int
    G_UNICODE_SCRIPT_SYLOTI_NAGRI: int
    G_UNICODE_SCRIPT_OLD_PERSIAN: int
    G_UNICODE_SCRIPT_KHAROSHTHI: int
    G_UNICODE_SCRIPT_UNKNOWN: int
    G_UNICODE_SCRIPT_BALINESE: int
    G_UNICODE_SCRIPT_CUNEIFORM: int
    G_UNICODE_SCRIPT_PHOENICIAN: int
    G_UNICODE_SCRIPT_PHAGS_PA: int
    G_UNICODE_SCRIPT_NKO: int
    G_UNICODE_SCRIPT_KAYAH_LI: int
    G_UNICODE_SCRIPT_LEPCHA: int
    G_UNICODE_SCRIPT_REJANG: int
    G_UNICODE_SCRIPT_SUNDANESE: int
    G_UNICODE_SCRIPT_SAURASHTRA: int
    G_UNICODE_SCRIPT_CHAM: int
    G_UNICODE_SCRIPT_OL_CHIKI: int
    G_UNICODE_SCRIPT_VAI: int
    G_UNICODE_SCRIPT_CARIAN: int
    G_UNICODE_SCRIPT_LYCIAN: int
    G_UNICODE_SCRIPT_LYDIAN: int
    G_UNICODE_SCRIPT_AVESTAN: int
    G_UNICODE_SCRIPT_BAMUM: int
    G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS: int
    G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC: int
    G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI: int
    G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN: int
    G_UNICODE_SCRIPT_JAVANESE: int
    G_UNICODE_SCRIPT_KAITHI: int
    G_UNICODE_SCRIPT_LISU: int
    G_UNICODE_SCRIPT_MEETEI_MAYEK: int
    G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN: int
    G_UNICODE_SCRIPT_OLD_TURKIC: int
    G_UNICODE_SCRIPT_SAMARITAN: int
    G_UNICODE_SCRIPT_TAI_THAM: int
    G_UNICODE_SCRIPT_TAI_VIET: int
    G_UNICODE_SCRIPT_BATAK: int
    G_UNICODE_SCRIPT_BRAHMI: int
    G_UNICODE_SCRIPT_MANDAIC: int
    G_UNICODE_SCRIPT_CHAKMA: int
    G_UNICODE_SCRIPT_MEROITIC_CURSIVE: int
    G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS: int
    G_UNICODE_SCRIPT_MIAO: int
    G_UNICODE_SCRIPT_SHARADA: int
    G_UNICODE_SCRIPT_SORA_SOMPENG: int
    G_UNICODE_SCRIPT_TAKRI: int
    G_UNICODE_SCRIPT_BASSA_VAH: int
    G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN: int
    G_UNICODE_SCRIPT_DUPLOYAN: int
    G_UNICODE_SCRIPT_ELBASAN: int
    G_UNICODE_SCRIPT_GRANTHA: int
    G_UNICODE_SCRIPT_KHOJKI: int
    G_UNICODE_SCRIPT_KHUDAWADI: int
    G_UNICODE_SCRIPT_LINEAR_A: int
    G_UNICODE_SCRIPT_MAHAJANI: int
    G_UNICODE_SCRIPT_MANICHAEAN: int
    G_UNICODE_SCRIPT_MENDE_KIKAKUI: int
    G_UNICODE_SCRIPT_MODI: int
    G_UNICODE_SCRIPT_MRO: int
    G_UNICODE_SCRIPT_NABATAEAN: int
    G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN: int
    G_UNICODE_SCRIPT_OLD_PERMIC: int
    G_UNICODE_SCRIPT_PAHAWH_HMONG: int
    G_UNICODE_SCRIPT_PALMYRENE: int
    G_UNICODE_SCRIPT_PAU_CIN_HAU: int
    G_UNICODE_SCRIPT_PSALTER_PAHLAVI: int
    G_UNICODE_SCRIPT_SIDDHAM: int
    G_UNICODE_SCRIPT_TIRHUTA: int
    G_UNICODE_SCRIPT_WARANG_CITI: int
    G_UNICODE_SCRIPT_AHOM: int
    G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS: int
    G_UNICODE_SCRIPT_HATRAN: int
    G_UNICODE_SCRIPT_MULTANI: int
    G_UNICODE_SCRIPT_OLD_HUNGARIAN: int
    G_UNICODE_SCRIPT_SIGNWRITING: int
    G_UNICODE_SCRIPT_ADLAM: int
    G_UNICODE_SCRIPT_BHAIKSUKI: int
    G_UNICODE_SCRIPT_MARCHEN: int
    G_UNICODE_SCRIPT_NEWA: int
    G_UNICODE_SCRIPT_OSAGE: int
    G_UNICODE_SCRIPT_TANGUT: int
    G_UNICODE_SCRIPT_MASARAM_GONDI: int
    G_UNICODE_SCRIPT_NUSHU: int
    G_UNICODE_SCRIPT_SOYOMBO: int
    G_UNICODE_SCRIPT_ZANABAZAR_SQUARE: int
    G_UNICODE_SCRIPT_DOGRA: int
    G_UNICODE_SCRIPT_GUNJALA_GONDI: int
    G_UNICODE_SCRIPT_HANIFI_ROHINGYA: int
    G_UNICODE_SCRIPT_MAKASAR: int
    G_UNICODE_SCRIPT_MEDEFAIDRIN: int
    G_UNICODE_SCRIPT_OLD_SOGDIAN: int
    G_UNICODE_SCRIPT_SOGDIAN: int
    G_UNICODE_SCRIPT_ELYMAIC: int
    G_UNICODE_SCRIPT_NANDINAGARI: int
    G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG: int
    G_UNICODE_SCRIPT_WANCHO: int
    G_UNICODE_SCRIPT_CHORASMIAN: int
    G_UNICODE_SCRIPT_DIVES_AKURU: int
    G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT: int
    G_UNICODE_SCRIPT_YEZIDI: int
    G_UNICODE_SCRIPT_CYPRO_MINOAN: int
    G_UNICODE_SCRIPT_OLD_UYGHUR: int
    G_UNICODE_SCRIPT_TANGSA: int
    G_UNICODE_SCRIPT_TOTO: int
    G_UNICODE_SCRIPT_VITHKUQI: int
    G_UNICODE_SCRIPT_MATH: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ADLAM: int
    AHOM: int
    ANATOLIAN_HIEROGLYPHS: int
    ARABIC: int
    ARMENIAN: int
    AVESTAN: int
    BALINESE: int
    BAMUM: int
    BASSA_VAH: int
    BATAK: int
    BENGALI: int
    BHAIKSUKI: int
    BOPOMOFO: int
    BRAHMI: int
    BRAILLE: int
    BUGINESE: int
    BUHID: int
    CANADIAN_ABORIGINAL: int
    CARIAN: int
    CAUCASIAN_ALBANIAN: int
    CHAKMA: int
    CHAM: int
    CHEROKEE: int
    CHORASMIAN: int
    COMMON: int
    COPTIC: int
    CUNEIFORM: int
    CYPRIOT: int
    CYPRO_MINOAN: int
    CYRILLIC: int
    DESERET: int
    DEVANAGARI: int
    DIVES_AKURU: int
    DOGRA: int
    DUPLOYAN: int
    EGYPTIAN_HIEROGLYPHS: int
    ELBASAN: int
    ELYMAIC: int
    ETHIOPIC: int
    GEORGIAN: int
    GLAGOLITIC: int
    GOTHIC: int
    GRANTHA: int
    GREEK: int
    GUJARATI: int
    GUNJALA_GONDI: int
    GURMUKHI: int
    HAN: int
    HANGUL: int
    HANIFI_ROHINGYA: int
    HANUNOO: int
    HATRAN: int
    HEBREW: int
    HIRAGANA: int
    IMPERIAL_ARAMAIC: int
    INHERITED: int
    INSCRIPTIONAL_PAHLAVI: int
    INSCRIPTIONAL_PARTHIAN: int
    INVALID_CODE: int
    JAVANESE: int
    KAITHI: int
    KANNADA: int
    KATAKANA: int
    KAYAH_LI: int
    KHAROSHTHI: int
    KHITAN_SMALL_SCRIPT: int
    KHMER: int
    KHOJKI: int
    KHUDAWADI: int
    LAO: int
    LATIN: int
    LEPCHA: int
    LIMBU: int
    LINEAR_A: int
    LINEAR_B: int
    LISU: int
    LYCIAN: int
    LYDIAN: int
    MAHAJANI: int
    MAKASAR: int
    MALAYALAM: int
    MANDAIC: int
    MANICHAEAN: int
    MARCHEN: int
    MASARAM_GONDI: int
    MATH: int
    MEDEFAIDRIN: int
    MEETEI_MAYEK: int
    MENDE_KIKAKUI: int
    MEROITIC_CURSIVE: int
    MEROITIC_HIEROGLYPHS: int
    MIAO: int
    MODI: int
    MONGOLIAN: int
    MRO: int
    MULTANI: int
    MYANMAR: int
    NABATAEAN: int
    NANDINAGARI: int
    NEWA: int
    NEW_TAI_LUE: int
    NKO: int
    NUSHU: int
    NYIAKENG_PUACHUE_HMONG: int
    OGHAM: int
    OLD_HUNGARIAN: int
    OLD_ITALIC: int
    OLD_NORTH_ARABIAN: int
    OLD_PERMIC: int
    OLD_PERSIAN: int
    OLD_SOGDIAN: int
    OLD_SOUTH_ARABIAN: int
    OLD_TURKIC: int
    OLD_UYGHUR: int
    OL_CHIKI: int
    ORIYA: int
    OSAGE: int
    OSMANYA: int
    PAHAWH_HMONG: int
    PALMYRENE: int
    PAU_CIN_HAU: int
    PHAGS_PA: int
    PHOENICIAN: int
    PSALTER_PAHLAVI: int
    REJANG: int
    RUNIC: int
    SAMARITAN: int
    SAURASHTRA: int
    SHARADA: int
    SHAVIAN: int
    SIDDHAM: int
    SIGNWRITING: int
    SINHALA: int
    SOGDIAN: int
    SORA_SOMPENG: int
    SOYOMBO: int
    SUNDANESE: int
    SYLOTI_NAGRI: int
    SYRIAC: int
    TAGALOG: int
    TAGBANWA: int
    TAI_LE: int
    TAI_THAM: int
    TAI_VIET: int
    TAKRI: int
    TAMIL: int
    TANGSA: int
    TANGUT: int
    TELUGU: int
    THAANA: int
    THAI: int
    TIBETAN: int
    TIFINAGH: int
    TIRHUTA: int
    TOTO: int
    UGARITIC: int
    UNKNOWN: int
    VAI: int
    VITHKUQI: int
    WANCHO: int
    WARANG_CITI: int
    YEZIDI: int
    YI: int
    ZANABAZAR_SQUARE: int

class UnicodeType(__gobject.GEnum):
    G_UNICODE_CONTROL: int
    G_UNICODE_FORMAT: int
    G_UNICODE_UNASSIGNED: int
    G_UNICODE_PRIVATE_USE: int
    G_UNICODE_SURROGATE: int
    G_UNICODE_LOWERCASE_LETTER: int
    G_UNICODE_MODIFIER_LETTER: int
    G_UNICODE_OTHER_LETTER: int
    G_UNICODE_TITLECASE_LETTER: int
    G_UNICODE_UPPERCASE_LETTER: int
    G_UNICODE_SPACING_MARK: int
    G_UNICODE_ENCLOSING_MARK: int
    G_UNICODE_NON_SPACING_MARK: int
    G_UNICODE_DECIMAL_NUMBER: int
    G_UNICODE_LETTER_NUMBER: int
    G_UNICODE_OTHER_NUMBER: int
    G_UNICODE_CONNECT_PUNCTUATION: int
    G_UNICODE_DASH_PUNCTUATION: int
    G_UNICODE_CLOSE_PUNCTUATION: int
    G_UNICODE_FINAL_PUNCTUATION: int
    G_UNICODE_INITIAL_PUNCTUATION: int
    G_UNICODE_OTHER_PUNCTUATION: int
    G_UNICODE_OPEN_PUNCTUATION: int
    G_UNICODE_CURRENCY_SYMBOL: int
    G_UNICODE_MODIFIER_SYMBOL: int
    G_UNICODE_MATH_SYMBOL: int
    G_UNICODE_OTHER_SYMBOL: int
    G_UNICODE_LINE_SEPARATOR: int
    G_UNICODE_PARAGRAPH_SEPARATOR: int
    G_UNICODE_SPACE_SEPARATOR: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    CLOSE_PUNCTUATION: int
    CONNECT_PUNCTUATION: int
    CONTROL: int
    CURRENCY_SYMBOL: int
    DASH_PUNCTUATION: int
    DECIMAL_NUMBER: int
    ENCLOSING_MARK: int
    FINAL_PUNCTUATION: int
    FORMAT: int
    INITIAL_PUNCTUATION: int
    LETTER_NUMBER: int
    LINE_SEPARATOR: int
    LOWERCASE_LETTER: int
    MATH_SYMBOL: int
    MODIFIER_LETTER: int
    MODIFIER_SYMBOL: int
    NON_SPACING_MARK: int
    OPEN_PUNCTUATION: int
    OTHER_LETTER: int
    OTHER_NUMBER: int
    OTHER_PUNCTUATION: int
    OTHER_SYMBOL: int
    PARAGRAPH_SEPARATOR: int
    PRIVATE_USE: int
    SPACE_SEPARATOR: int
    SPACING_MARK: int
    SURROGATE: int
    TITLECASE_LETTER: int
    UNASSIGNED: int
    UPPERCASE_LETTER: int

class Uri(__gi.Boxed):
    @staticmethod
    def build(flags: GLib.UriFlags, scheme: str, userinfo: str, host: str, port: int, path: str, query: str, fragment: str) -> GLib.Uri: ...
    @staticmethod
    def build_with_user(flags: GLib.UriFlags, scheme: str, user: str, password: str, auth_params: str, host: str, port: int, path: str, query: str, fragment: str) -> GLib.Uri: ...
    def copy(self, *args, **kwargs) -> None: ...
    @staticmethod
    def error_quark() -> int: ...
    @staticmethod
    def escape_bytes(unescaped: list, reserved_chars_allowed: str) -> str: ...
    @staticmethod
    def escape_string(unescaped: str, reserved_chars_allowed: str, allow_utf8: bool) -> str: ...
    def get_auth_params(self) -> Union[str, None]: ...
    def get_flags(self) -> GLib.UriFlags: ...
    def get_fragment(self) -> Union[str, None]: ...
    def get_host(self) -> Union[str, None]: ...
    def get_password(self) -> Union[str, None]: ...
    def get_path(self) -> str: ...
    def get_port(self) -> int: ...
    def get_query(self) -> Union[str, None]: ...
    def get_scheme(self) -> str: ...
    def get_user(self) -> Union[str, None]: ...
    def get_userinfo(self) -> Union[str, None]: ...
    @staticmethod
    def is_valid(uri_string: str, flags: GLib.UriFlags) -> bool: ...
    @staticmethod
    def join(flags: GLib.UriFlags, scheme: str, userinfo: str, host: str, port: int, path: str, query: str, fragment: str) -> str: ...
    @staticmethod
    def join_with_user(flags: GLib.UriFlags, scheme: str, user: str, password: str, auth_params: str, host: str, port: int, path: str, query: str, fragment: str) -> str: ...
    @staticmethod
    def list_extract_uris(uri_list: str) -> list: ...
    @staticmethod
    def parse(uri_string: str, flags: GLib.UriFlags) -> GLib.Uri: ...
    @staticmethod
    def parse_params(params: str, length: int, separators: str, flags: GLib.UriParamsFlags) -> dict: ...
    def parse_relative(self, uri_ref: str, flags: GLib.UriFlags) -> GLib.Uri: ...
    @staticmethod
    def parse_scheme(uri: str) -> Union[str, None]: ...
    @staticmethod
    def peek_scheme(uri: str) -> Union[str, None]: ...
    @staticmethod
    def resolve_relative(base_uri_string: str, uri_ref: str, flags: GLib.UriFlags) -> str: ...
    @staticmethod
    def split(uri_ref: str, flags: GLib.UriFlags) -> tuple[None, None, None, None, None, None, None]: ...
    @staticmethod
    def split_network(uri_string: str, flags: GLib.UriFlags) -> tuple[None, None, None]: ...
    @staticmethod
    def split_with_user(uri_ref: str, flags: GLib.UriFlags) -> tuple[None, None, None, None, None, None, None, None, None]: ...
    def to_string(self) -> str: ...
    def to_string_partial(self, flags: GLib.UriHideFlags) -> str: ...
    @staticmethod
    def unescape_bytes(escaped_string: str, length: int, illegal_characters: str) -> GLib.Bytes: ...
    @staticmethod
    def unescape_segment(escaped_string: str = ..., escaped_string_end: str = ..., illegal_characters: str = ...) -> Union[str, None]: ...
    @staticmethod
    def unescape_string(escaped_string: str, illegal_characters: str = ...) -> Union[str, None]: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class UriError(__gobject.GEnum):
    G_URI_ERROR_FAILED: int
    G_URI_ERROR_BAD_SCHEME: int
    G_URI_ERROR_BAD_USER: int
    G_URI_ERROR_BAD_PASSWORD: int
    G_URI_ERROR_BAD_AUTH_PARAMS: int
    G_URI_ERROR_BAD_HOST: int
    G_URI_ERROR_BAD_PORT: int
    G_URI_ERROR_BAD_PATH: int
    G_URI_ERROR_BAD_QUERY: int
    G_URI_ERROR_BAD_FRAGMENT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BAD_AUTH_PARAMS: int
    BAD_FRAGMENT: int
    BAD_HOST: int
    BAD_PASSWORD: int
    BAD_PATH: int
    BAD_PORT: int
    BAD_QUERY: int
    BAD_SCHEME: int
    BAD_USER: int
    FAILED: int

class UriFlags(__gobject.GFlags):
    G_URI_FLAGS_NONE: int
    G_URI_FLAGS_PARSE_RELAXED: int
    G_URI_FLAGS_HAS_PASSWORD: int
    G_URI_FLAGS_HAS_AUTH_PARAMS: int
    G_URI_FLAGS_ENCODED: int
    G_URI_FLAGS_NON_DNS: int
    G_URI_FLAGS_ENCODED_QUERY: int
    G_URI_FLAGS_ENCODED_PATH: int
    G_URI_FLAGS_ENCODED_FRAGMENT: int
    G_URI_FLAGS_SCHEME_NORMALIZE: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    ENCODED: int
    ENCODED_FRAGMENT: int
    ENCODED_PATH: int
    ENCODED_QUERY: int
    HAS_AUTH_PARAMS: int
    HAS_PASSWORD: int
    NONE: int
    NON_DNS: int
    PARSE_RELAXED: int
    SCHEME_NORMALIZE: int

class UriHideFlags(__gobject.GFlags):
    G_URI_HIDE_NONE: int
    G_URI_HIDE_USERINFO: int
    G_URI_HIDE_PASSWORD: int
    G_URI_HIDE_AUTH_PARAMS: int
    G_URI_HIDE_QUERY: int
    G_URI_HIDE_FRAGMENT: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    AUTH_PARAMS: int
    FRAGMENT: int
    NONE: int
    PASSWORD: int
    QUERY: int
    USERINFO: int

class UriParamsFlags(__gobject.GFlags):
    G_URI_PARAMS_NONE: int
    G_URI_PARAMS_CASE_INSENSITIVE: int
    G_URI_PARAMS_WWW_FORM: int
    G_URI_PARAMS_PARSE_RELAXED: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    first_value_name: Incomplete
    first_value_nick: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_names: Incomplete
    value_nicks: Incomplete
    CASE_INSENSITIVE: int
    NONE: int
    PARSE_RELAXED: int
    WWW_FORM: int

class UriParamsIter(__gi.Struct):
    def init(self, params: str, length: int, separators: str, flags: GLib.UriParamsFlags): ...
    def next(self) -> tuple[bool, None, None]: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __init__() -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    dummy0: Incomplete
    dummy1: Incomplete
    dummy2: Incomplete
    dummy3: Incomplete

class UserDirectory(__gobject.GEnum):
    G_USER_DIRECTORY_DESKTOP: int
    G_USER_DIRECTORY_DOCUMENTS: int
    G_USER_DIRECTORY_DOWNLOAD: int
    G_USER_DIRECTORY_MUSIC: int
    G_USER_DIRECTORY_PICTURES: int
    G_USER_DIRECTORY_PUBLIC_SHARE: int
    G_USER_DIRECTORY_TEMPLATES: int
    G_USER_DIRECTORY_VIDEOS: int
    G_USER_N_DIRECTORIES: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    DIRECTORY_DESKTOP: int
    DIRECTORY_DOCUMENTS: int
    DIRECTORY_DOWNLOAD: int
    DIRECTORY_MUSIC: int
    DIRECTORY_PICTURES: int
    DIRECTORY_PUBLIC_SHARE: int
    DIRECTORY_TEMPLATES: int
    DIRECTORY_VIDEOS: int
    N_DIRECTORIES: int

class Variant(Variant):
    def byteswap(self) -> GLib.Variant: ...
    def check_format_string(self, format_string: str, copy_only: bool) -> bool: ...
    def classify(self) -> GLib.VariantClass: ...
    def compare(self, two: GLib.Variant) -> int: ...
    def dup_bytestring(self) -> tuple[list, None]: ...
    def dup_bytestring_array(self) -> tuple[list, None]: ...
    def dup_objv(self) -> tuple[list, None]: ...
    def dup_string(self) -> tuple[str, None]: ...
    def dup_strv(self) -> tuple[list, None]: ...
    def equal(self, two: GLib.Variant) -> bool: ...
    def get_boolean(self) -> bool: ...
    def get_byte(self) -> int: ...
    def get_bytestring(self) -> list: ...
    def get_bytestring_array(self) -> tuple[list, None]: ...
    def get_child_value(self, index_: int) -> GLib.Variant: ...
    def get_data(self) -> None: ...
    def get_data_as_bytes(self) -> GLib.Bytes: ...
    def get_double(self) -> float: ...
    def get_handle(self) -> int: ...
    def get_int16(self) -> int: ...
    def get_int32(self) -> int: ...
    def get_int64(self) -> int: ...
    def get_maybe(self) -> Union[GLib.Variant, None]: ...
    def get_normal_form(self) -> GLib.Variant: ...
    def get_objv(self) -> tuple[list, None]: ...
    def get_size(self) -> int: ...
    def get_string(self) -> None: ...
    def get_strv(self) -> tuple[list, None]: ...
    def get_type(self) -> GLib.VariantType: ...
    def get_type_string(self) -> str: ...
    def get_uint16(self) -> int: ...
    def get_uint32(self) -> int: ...
    def get_uint64(self) -> int: ...
    def get_variant(self) -> GLib.Variant: ...
    def hash(self) -> int: ...
    def is_container(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def is_normal_form(self) -> bool: ...
    @staticmethod
    def is_object_path(string: str) -> bool: ...
    def is_of_type(self, type: GLib.VariantType) -> bool: ...
    @staticmethod
    def is_signature(string: str) -> bool: ...
    def keys(self) -> None: ...
    def lookup_value(self, key: str, expected_type: GLib.VariantType) -> GLib.Variant: ...
    @staticmethod
    def new_array(child_type: GLib.VariantType, children: list) -> GLib.Variant: ...
    @staticmethod
    def new_boolean(value: bool) -> GLib.Variant: ...
    @staticmethod
    def new_byte(value: int) -> GLib.Variant: ...
    @staticmethod
    def new_bytestring(string: list) -> GLib.Variant: ...
    @staticmethod
    def new_bytestring_array(strv: list) -> GLib.Variant: ...
    @staticmethod
    def new_dict_entry(key: GLib.Variant, value: GLib.Variant) -> GLib.Variant: ...
    @staticmethod
    def new_double(value: float) -> GLib.Variant: ...
    @staticmethod
    def new_fixed_array(element_type: GLib.VariantType, elements, n_elements: int, element_size: int) -> GLib.Variant: ...
    @staticmethod
    def new_from_bytes(type: GLib.VariantType, bytes: GLib.Bytes, trusted: bool) -> GLib.Variant: ...
    @staticmethod
    def new_from_data(type: GLib.VariantType, data: list, trusted: bool, notify: GLib.DestroyNotify, user_data) -> GLib.Variant: ...
    @staticmethod
    def new_handle(value: int) -> GLib.Variant: ...
    @staticmethod
    def new_int16(value: int) -> GLib.Variant: ...
    @staticmethod
    def new_int32(value: int) -> GLib.Variant: ...
    @staticmethod
    def new_int64(value: int) -> GLib.Variant: ...
    @staticmethod
    def new_maybe(child_type: GLib.VariantType, child: GLib.Variant) -> GLib.Variant: ...
    @staticmethod
    def new_object_path(object_path: str) -> GLib.Variant: ...
    @staticmethod
    def new_objv(strv: list) -> GLib.Variant: ...
    @staticmethod
    def new_signature(signature: str) -> GLib.Variant: ...
    @staticmethod
    def new_string(string: str) -> GLib.Variant: ...
    @staticmethod
    def new_strv(strv: list) -> GLib.Variant: ...
    def new_tuple(*elements) -> None: ...
    @staticmethod
    def new_uint16(value: int) -> GLib.Variant: ...
    @staticmethod
    def new_uint32(value: int) -> GLib.Variant: ...
    @staticmethod
    def new_uint64(value: int) -> GLib.Variant: ...
    @staticmethod
    def new_variant(value: GLib.Variant) -> GLib.Variant: ...
    def n_children(self) -> int: ...
    @staticmethod
    def parse(type: GLib.VariantType, text: str, limit: str, endptr: str) -> GLib.Variant: ...
    @staticmethod
    def parser_get_error_quark() -> int: ...
    @staticmethod
    def parse_error_print_context(error: error, source_str: str) -> str: ...
    @staticmethod
    def parse_error_quark() -> int: ...
    def print_(self, type_annotate: bool) -> str: ...
    def ref(self) -> GLib.Variant: ...
    def ref_sink(self) -> GLib.Variant: ...
    @staticmethod
    def split_signature(*args, **kwargs) -> None: ...
    def store(self, data) -> None: ...
    def take_ref(self) -> GLib.Variant: ...
    def unpack(self) -> None: ...
    def unref(self) -> None: ...
    def __bool__(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    def __del__(self) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, other): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, key) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(cls, format_string, value) -> None: ...
    def __ne__(self, other): ...
    def __nonzero__(self) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class VariantBuilder(__gi.Boxed):
    def add_value(self, value: GLib.Variant): ...
    def close(self) -> None: ...
    def copy(self, *args, **kwargs) -> None: ...
    def end(self) -> GLib.Variant: ...
    @staticmethod
    def new(type: GLib.VariantType) -> GLib.VariantBuilder: ...
    def open(self, type: GLib.VariantType): ...
    def ref(self) -> GLib.VariantBuilder: ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(type: GLib.VariantType) -> GLib.VariantBuilder: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class VariantClass(__gobject.GEnum):
    G_VARIANT_CLASS_BOOLEAN: int
    G_VARIANT_CLASS_BYTE: int
    G_VARIANT_CLASS_INT16: int
    G_VARIANT_CLASS_UINT16: int
    G_VARIANT_CLASS_INT32: int
    G_VARIANT_CLASS_UINT32: int
    G_VARIANT_CLASS_INT64: int
    G_VARIANT_CLASS_UINT64: int
    G_VARIANT_CLASS_HANDLE: int
    G_VARIANT_CLASS_DOUBLE: int
    G_VARIANT_CLASS_STRING: int
    G_VARIANT_CLASS_OBJECT_PATH: int
    G_VARIANT_CLASS_SIGNATURE: int
    G_VARIANT_CLASS_VARIANT: int
    G_VARIANT_CLASS_MAYBE: int
    G_VARIANT_CLASS_ARRAY: int
    G_VARIANT_CLASS_TUPLE: int
    G_VARIANT_CLASS_DICT_ENTRY: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ARRAY: int
    BOOLEAN: int
    BYTE: int
    DICT_ENTRY: int
    DOUBLE: int
    HANDLE: int
    INT16: int
    INT32: int
    INT64: int
    MAYBE: int
    OBJECT_PATH: int
    SIGNATURE: int
    STRING: int
    TUPLE: int
    UINT16: int
    UINT32: int
    UINT64: int
    VARIANT: int

class VariantDict(__gi.Boxed):
    def clear(self) -> None: ...
    def contains(self, key: str) -> bool: ...
    def copy(self, *args, **kwargs) -> None: ...
    def end(self) -> GLib.Variant: ...
    def insert_value(self, key: str, value: GLib.Variant): ...
    def lookup_value(self, key: str, expected_type: GLib.VariantType) -> GLib.Variant: ...
    @staticmethod
    def new(from_asv: GLib.Variant) -> GLib.VariantDict: ...
    def ref(self) -> GLib.VariantDict: ...
    def remove(self, key: str) -> bool: ...
    def unref(self) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(from_asv: GLib.Variant) -> GLib.VariantDict: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class VariantParseError(__gobject.GEnum):
    G_VARIANT_PARSE_ERROR_FAILED: int
    G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED: int
    G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE: int
    G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED: int
    G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END: int
    G_VARIANT_PARSE_ERROR_INVALID_CHARACTER: int
    G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING: int
    G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH: int
    G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE: int
    G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING: int
    G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE: int
    G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE: int
    G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG: int
    G_VARIANT_PARSE_ERROR_TYPE_ERROR: int
    G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN: int
    G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD: int
    G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT: int
    G_VARIANT_PARSE_ERROR_VALUE_EXPECTED: int
    G_VARIANT_PARSE_ERROR_RECURSION: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    BASIC_TYPE_EXPECTED: int
    CANNOT_INFER_TYPE: int
    DEFINITE_TYPE_EXPECTED: int
    FAILED: int
    INPUT_NOT_AT_END: int
    INVALID_CHARACTER: int
    INVALID_FORMAT_STRING: int
    INVALID_OBJECT_PATH: int
    INVALID_SIGNATURE: int
    INVALID_TYPE_STRING: int
    NO_COMMON_TYPE: int
    NUMBER_OUT_OF_RANGE: int
    NUMBER_TOO_BIG: int
    RECURSION: int
    TYPE_ERROR: int
    UNEXPECTED_TOKEN: int
    UNKNOWN_KEYWORD: int
    UNTERMINATED_STRING_CONSTANT: int
    VALUE_EXPECTED: int

class VariantType(__gi.Boxed):
    @staticmethod
    def checked_(arg0: str) -> GLib.VariantType: ...
    def copy(self) -> GLib.VariantType: ...
    def dup_string(self) -> str: ...
    def element(self) -> GLib.VariantType: ...
    def equal(self, type2: GLib.VariantType) -> bool: ...
    def first(self) -> GLib.VariantType: ...
    def free(self) -> None: ...
    def get_string_length(self) -> int: ...
    def hash(self) -> int: ...
    def is_array(self) -> bool: ...
    def is_basic(self) -> bool: ...
    def is_container(self) -> bool: ...
    def is_definite(self) -> bool: ...
    def is_dict_entry(self) -> bool: ...
    def is_maybe(self) -> bool: ...
    def is_subtype_of(self, supertype: GLib.VariantType) -> bool: ...
    def is_tuple(self) -> bool: ...
    def is_variant(self) -> bool: ...
    def key(self) -> GLib.VariantType: ...
    @staticmethod
    def new(type_string: str) -> GLib.VariantType: ...
    @staticmethod
    def new_array(element: GLib.VariantType) -> GLib.VariantType: ...
    @staticmethod
    def new_dict_entry(key: GLib.VariantType, value: GLib.VariantType) -> GLib.VariantType: ...
    @staticmethod
    def new_maybe(element: GLib.VariantType) -> GLib.VariantType: ...
    @staticmethod
    def new_tuple(items: list) -> GLib.VariantType: ...
    def next(self) -> GLib.VariantType: ...
    def n_items(self) -> int: ...
    @staticmethod
    def string_get_depth_(type_string: str) -> int: ...
    @staticmethod
    def string_is_valid(type_string: str) -> bool: ...
    @staticmethod
    def string_scan(string: str, limit: str) -> tuple[bool, None]: ...
    def value(self) -> GLib.VariantType: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(*args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(type_string: str) -> GLib.VariantType: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...

class Win32OSType(__gobject.GEnum):
    G_WIN32_OS_ANY: int
    G_WIN32_OS_WORKSTATION: int
    G_WIN32_OS_SERVER: int
    @staticmethod
    def as_integer_ratio() -> None: ...
    @staticmethod
    def bit_count() -> None: ...
    @staticmethod
    def bit_length() -> None: ...
    def conjugate(self, *args, **kwargs) -> None: ...
    def from_bytes(self, *args, **kwargs) -> None: ...
    def to_bytes(self, *args, **kwargs) -> None: ...
    def __abs__(self) -> None: ...
    def __add__(self, *args, **kwargs) -> None: ...
    def __and__(self, *args, **kwargs) -> None: ...
    def __bool__(self, *args, **kwargs) -> None: ...
    def __ceil__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> None: ...
    @staticmethod
    def __dir__() -> None: ...
    def __divmod__(self, value) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __float__(self) -> None: ...
    def __floordiv__(self, *args, **kwargs) -> None: ...
    def __floor__(self, *args, **kwargs) -> None: ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getnewargs__(self, *args, **kwargs) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __index__(self, *args, **kwargs) -> None: ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __int__(self) -> None: ...
    def __invert__(self, *args, **kwargs) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs) -> None: ...
    def __lt__(self, *args, **kwargs): ...
    def __mod__(self, *args, **kwargs) -> None: ...
    def __mul__(self, *args, **kwargs) -> None: ...
    def __neg__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __or__(self, *args, **kwargs) -> None: ...
    def __pos__(self, *args, **kwargs) -> None: ...
    def __pow__(self, value, mod) -> None: ...
    def __radd__(self, *args, **kwargs) -> None: ...
    def __rand__(self, *args, **kwargs) -> None: ...
    def __rdivmod__(self, *args, **kwargs) -> None: ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __rfloordiv__(self, *args, **kwargs) -> None: ...
    def __rlshift__(self, *args, **kwargs) -> None: ...
    def __rmod__(self, *args, **kwargs) -> None: ...
    def __rmul__(self, *args, **kwargs) -> None: ...
    def __ror__(self, *args, **kwargs) -> None: ...
    def __round__(self, *args, **kwargs) -> None: ...
    def __rpow__(self, *args, **kwargs) -> None: ...
    def __rrshift__(self, *args, **kwargs) -> None: ...
    def __rshift__(self, *args, **kwargs) -> None: ...
    def __rsub__(self, *args, **kwargs) -> None: ...
    def __rtruediv__(self, *args, **kwargs) -> None: ...
    def __rxor__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    def __sub__(self, *args, **kwargs) -> None: ...
    def __truediv__(self, *args, **kwargs) -> None: ...
    def __trunc__(self, *args, **kwargs) -> None: ...
    def __xor__(self, *args, **kwargs) -> None: ...
    denominator: Incomplete
    imag: Incomplete
    numerator: Incomplete
    real: Incomplete
    value_name: Incomplete
    value_nick: Incomplete
    ANY: int
    SERVER: int
    WORKSTATION: int

class __class__(__gi_overrides.OverridesProxyModule):
    def __delattr__(self, name) -> None: ...
    def __dir__(self) -> None: ...
    def __eq__(self, *args, **kwargs): ...
    def __format__(self, *args, **kwargs) -> None: ...
    def __getattribute__(self, *args, **kwargs) -> None: ...
    def __getattr__(self, name) -> None: ...
    def __ge__(self, *args, **kwargs): ...
    def __gt__(self, *args, **kwargs): ...
    def __hash__(self): ...
    def __init_subclass__(self, *args, **kwargs) -> None: ...
    def __init__(self, introspection_module) -> None: ...
    def __le__(self, *args, **kwargs): ...
    def __lt__(self, *args, **kwargs): ...
    @staticmethod
    def __new__(*args, **kwargs) -> None: ...
    def __ne__(self, *args, **kwargs): ...
    def __reduce_ex__(self, *args, **kwargs) -> None: ...
    def __reduce__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __sizeof__(self, *args, **kwargs) -> None: ...
    def __subclasshook__(self, *args, **kwargs) -> None: ...
    __annotations__: Incomplete

glib_version: Incomplete
pyglib_version: Incomplete
__annotations__: Incomplete
__loader__: Incomplete
__path__: Incomplete
__spec__: Incomplete
